// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/JVM.proto

#include "common/JVM.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPU_common_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fJVM_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GC_common_2fJVM_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fJVM_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Memory_common_2fJVM_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fJVM_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryPool_common_2fJVM_2eproto;
class JVMMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JVMMetric> _instance;
} _JVMMetric_default_instance_;
class MemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Memory> _instance;
} _Memory_default_instance_;
class MemoryPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryPool> _instance;
} _MemoryPool_default_instance_;
class GCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GC> _instance;
} _GC_default_instance_;
static void InitDefaultsscc_info_GC_common_2fJVM_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GC_default_instance_;
    new (ptr) ::GC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GC_common_2fJVM_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GC_common_2fJVM_2eproto}, {}};

static void InitDefaultsscc_info_JVMMetric_common_2fJVM_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JVMMetric_default_instance_;
    new (ptr) ::JVMMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JVMMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_JVMMetric_common_2fJVM_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_JVMMetric_common_2fJVM_2eproto}, {
      &scc_info_CPU_common_2fcommon_2eproto.base,
      &scc_info_Memory_common_2fJVM_2eproto.base,
      &scc_info_MemoryPool_common_2fJVM_2eproto.base,
      &scc_info_GC_common_2fJVM_2eproto.base,}};

static void InitDefaultsscc_info_Memory_common_2fJVM_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Memory_default_instance_;
    new (ptr) ::Memory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Memory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Memory_common_2fJVM_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Memory_common_2fJVM_2eproto}, {}};

static void InitDefaultsscc_info_MemoryPool_common_2fJVM_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MemoryPool_default_instance_;
    new (ptr) ::MemoryPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MemoryPool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryPool_common_2fJVM_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoryPool_common_2fJVM_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2fJVM_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2fJVM_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2fJVM_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2fJVM_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JVMMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JVMMetric, time_),
  PROTOBUF_FIELD_OFFSET(::JVMMetric, cpu_),
  PROTOBUF_FIELD_OFFSET(::JVMMetric, memory_),
  PROTOBUF_FIELD_OFFSET(::JVMMetric, memorypool_),
  PROTOBUF_FIELD_OFFSET(::JVMMetric, gc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Memory, isheap_),
  PROTOBUF_FIELD_OFFSET(::Memory, init_),
  PROTOBUF_FIELD_OFFSET(::Memory, max_),
  PROTOBUF_FIELD_OFFSET(::Memory, used_),
  PROTOBUF_FIELD_OFFSET(::Memory, committed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MemoryPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MemoryPool, type_),
  PROTOBUF_FIELD_OFFSET(::MemoryPool, init_),
  PROTOBUF_FIELD_OFFSET(::MemoryPool, max_),
  PROTOBUF_FIELD_OFFSET(::MemoryPool, used_),
  PROTOBUF_FIELD_OFFSET(::MemoryPool, commited_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GC, phrase_),
  PROTOBUF_FIELD_OFFSET(::GC, count_),
  PROTOBUF_FIELD_OFFSET(::GC, time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::JVMMetric)},
  { 10, -1, sizeof(::Memory)},
  { 20, -1, sizeof(::MemoryPool)},
  { 30, -1, sizeof(::GC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JVMMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Memory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MemoryPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GC_default_instance_),
};

const char descriptor_table_protodef_common_2fJVM_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020common/JVM.proto\032\023common/common.proto\""
  "w\n\tJVMMetric\022\014\n\004time\030\001 \001(\003\022\021\n\003cpu\030\002 \001(\0132"
  "\004.CPU\022\027\n\006memory\030\003 \003(\0132\007.Memory\022\037\n\nmemory"
  "Pool\030\004 \003(\0132\013.MemoryPool\022\017\n\002gc\030\005 \003(\0132\003.GC"
  "\"T\n\006Memory\022\016\n\006isHeap\030\001 \001(\010\022\014\n\004init\030\002 \001(\003"
  "\022\013\n\003max\030\003 \001(\003\022\014\n\004used\030\004 \001(\003\022\021\n\tcommitted"
  "\030\005 \001(\003\"`\n\nMemoryPool\022\027\n\004type\030\001 \001(\0162\t.Poo"
  "lType\022\014\n\004init\030\002 \001(\003\022\013\n\003max\030\003 \001(\003\022\014\n\004used"
  "\030\004 \001(\003\022\020\n\010commited\030\005 \001(\003\"<\n\002GC\022\031\n\006phrase"
  "\030\001 \001(\0162\t.GCPhrase\022\r\n\005count\030\002 \001(\003\022\014\n\004time"
  "\030\003 \001(\003*\200\001\n\010PoolType\022\024\n\020CODE_CACHE_USAGE\020"
  "\000\022\020\n\014NEWGEN_USAGE\020\001\022\020\n\014OLDGEN_USAGE\020\002\022\022\n"
  "\016SURVIVOR_USAGE\020\003\022\021\n\rPERMGEN_USAGE\020\004\022\023\n\017"
  "METASPACE_USAGE\020\005*\034\n\010GCPhrase\022\007\n\003NEW\020\000\022\007"
  "\n\003OLD\020\001BQ\n0org.apache.skywalking.apm.net"
  "work.language.agentP\001\252\002\032SkyWalking.Netwo"
  "rkProtocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2fJVM_2eproto_deps[1] = {
  &::descriptor_table_common_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2fJVM_2eproto_sccs[4] = {
  &scc_info_GC_common_2fJVM_2eproto.base,
  &scc_info_JVMMetric_common_2fJVM_2eproto.base,
  &scc_info_Memory_common_2fJVM_2eproto.base,
  &scc_info_MemoryPool_common_2fJVM_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2fJVM_2eproto_once;
static bool descriptor_table_common_2fJVM_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fJVM_2eproto = {
  &descriptor_table_common_2fJVM_2eproto_initialized, descriptor_table_protodef_common_2fJVM_2eproto, "common/JVM.proto", 658,
  &descriptor_table_common_2fJVM_2eproto_once, descriptor_table_common_2fJVM_2eproto_sccs, descriptor_table_common_2fJVM_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_common_2fJVM_2eproto::offsets,
  file_level_metadata_common_2fJVM_2eproto, 4, file_level_enum_descriptors_common_2fJVM_2eproto, file_level_service_descriptors_common_2fJVM_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2fJVM_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2fJVM_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fJVM_2eproto);
  return file_level_enum_descriptors_common_2fJVM_2eproto[0];
}
bool PoolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GCPhrase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2fJVM_2eproto);
  return file_level_enum_descriptors_common_2fJVM_2eproto[1];
}
bool GCPhrase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void JVMMetric::InitAsDefaultInstance() {
  ::_JVMMetric_default_instance_._instance.get_mutable()->cpu_ = const_cast< ::CPU*>(
      ::CPU::internal_default_instance());
}
class JVMMetric::_Internal {
 public:
  static const ::CPU& cpu(const JVMMetric* msg);
};

const ::CPU&
JVMMetric::_Internal::cpu(const JVMMetric* msg) {
  return *msg->cpu_;
}
void JVMMetric::clear_cpu() {
  if (GetArenaNoVirtual() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
}
JVMMetric::JVMMetric()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JVMMetric)
}
JVMMetric::JVMMetric(const JVMMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      memory_(from.memory_),
      memorypool_(from.memorypool_),
      gc_(from.gc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cpu()) {
    cpu_ = new ::CPU(*from.cpu_);
  } else {
    cpu_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:JVMMetric)
}

void JVMMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JVMMetric_common_2fJVM_2eproto.base);
  ::memset(&cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&cpu_)) + sizeof(time_));
}

JVMMetric::~JVMMetric() {
  // @@protoc_insertion_point(destructor:JVMMetric)
  SharedDtor();
}

void JVMMetric::SharedDtor() {
  if (this != internal_default_instance()) delete cpu_;
}

void JVMMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JVMMetric& JVMMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JVMMetric_common_2fJVM_2eproto.base);
  return *internal_default_instance();
}


void JVMMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:JVMMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memory_.Clear();
  memorypool_.Clear();
  gc_.Clear();
  if (GetArenaNoVirtual() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* JVMMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CPU cpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Memory memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .MemoryPool memoryPool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memorypool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GC gc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JVMMetric::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JVMMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // .CPU cpu = 2;
  if (this->has_cpu()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::cpu(this), target, stream);
  }

  // repeated .Memory memory = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memory_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_memory(i), target, stream);
  }

  // repeated .MemoryPool memoryPool = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memorypool_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_memorypool(i), target, stream);
  }

  // repeated .GC gc = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gc_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_gc(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JVMMetric)
  return target;
}

size_t JVMMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JVMMetric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Memory memory = 3;
  total_size += 1UL * this->_internal_memory_size();
  for (const auto& msg : this->memory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MemoryPool memoryPool = 4;
  total_size += 1UL * this->_internal_memorypool_size();
  for (const auto& msg : this->memorypool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GC gc = 5;
  total_size += 1UL * this->_internal_gc_size();
  for (const auto& msg : this->gc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .CPU cpu = 2;
  if (this->has_cpu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpu_);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JVMMetric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JVMMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const JVMMetric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JVMMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JVMMetric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JVMMetric)
    MergeFrom(*source);
  }
}

void JVMMetric::MergeFrom(const JVMMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JVMMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memory_.MergeFrom(from.memory_);
  memorypool_.MergeFrom(from.memorypool_);
  gc_.MergeFrom(from.gc_);
  if (from.has_cpu()) {
    _internal_mutable_cpu()->::CPU::MergeFrom(from._internal_cpu());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void JVMMetric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JVMMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JVMMetric::CopyFrom(const JVMMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JVMMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JVMMetric::IsInitialized() const {
  return true;
}

void JVMMetric::InternalSwap(JVMMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  memory_.InternalSwap(&other->memory_);
  memorypool_.InternalSwap(&other->memorypool_);
  gc_.InternalSwap(&other->gc_);
  swap(cpu_, other->cpu_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JVMMetric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Memory::InitAsDefaultInstance() {
}
class Memory::_Internal {
 public:
};

Memory::Memory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Memory)
}
Memory::Memory(const Memory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&init_, &from.init_,
    static_cast<size_t>(reinterpret_cast<char*>(&isheap_) -
    reinterpret_cast<char*>(&init_)) + sizeof(isheap_));
  // @@protoc_insertion_point(copy_constructor:Memory)
}

void Memory::SharedCtor() {
  ::memset(&init_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isheap_) -
      reinterpret_cast<char*>(&init_)) + sizeof(isheap_));
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
}

void Memory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Memory& Memory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Memory_common_2fJVM_2eproto.base);
  return *internal_default_instance();
}


void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&init_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isheap_) -
      reinterpret_cast<char*>(&init_)) + sizeof(isheap_));
  _internal_metadata_.Clear();
}

const char* Memory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isHeap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isheap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 used = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 committed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          committed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Memory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isHeap = 1;
  if (this->isheap() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isheap(), target);
  }

  // int64 init = 2;
  if (this->init() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_init(), target);
  }

  // int64 max = 3;
  if (this->max() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max(), target);
  }

  // int64 used = 4;
  if (this->used() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_used(), target);
  }

  // int64 committed = 5;
  if (this->committed() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_committed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Memory)
  return target;
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Memory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 init = 2;
  if (this->init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_init());
  }

  // int64 max = 3;
  if (this->max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max());
  }

  // int64 used = 4;
  if (this->used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_used());
  }

  // int64 committed = 5;
  if (this->committed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_committed());
  }

  // bool isHeap = 1;
  if (this->isheap() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Memory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Memory)
  GOOGLE_DCHECK_NE(&from, this);
  const Memory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Memory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Memory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Memory)
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.init() != 0) {
    _internal_set_init(from._internal_init());
  }
  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from.used() != 0) {
    _internal_set_used(from._internal_used());
  }
  if (from.committed() != 0) {
    _internal_set_committed(from._internal_committed());
  }
  if (from.isheap() != 0) {
    _internal_set_isheap(from._internal_isheap());
  }
}

void Memory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {
  return true;
}

void Memory::InternalSwap(Memory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(init_, other->init_);
  swap(max_, other->max_);
  swap(used_, other->used_);
  swap(committed_, other->committed_);
  swap(isheap_, other->isheap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Memory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryPool::InitAsDefaultInstance() {
}
class MemoryPool::_Internal {
 public:
};

MemoryPool::MemoryPool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemoryPool)
}
MemoryPool::MemoryPool(const MemoryPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&init_, &from.init_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&init_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:MemoryPool)
}

void MemoryPool::SharedCtor() {
  ::memset(&init_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&init_)) + sizeof(type_));
}

MemoryPool::~MemoryPool() {
  // @@protoc_insertion_point(destructor:MemoryPool)
  SharedDtor();
}

void MemoryPool::SharedDtor() {
}

void MemoryPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryPool& MemoryPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryPool_common_2fJVM_2eproto.base);
  return *internal_default_instance();
}


void MemoryPool::Clear() {
// @@protoc_insertion_point(message_clear_start:MemoryPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&init_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&init_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* MemoryPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PoolType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::PoolType>(val));
        } else goto handle_unusual;
        continue;
      // int64 init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 used = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 commited = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          commited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryPool::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemoryPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PoolType type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 init = 2;
  if (this->init() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_init(), target);
  }

  // int64 max = 3;
  if (this->max() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max(), target);
  }

  // int64 used = 4;
  if (this->used() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_used(), target);
  }

  // int64 commited = 5;
  if (this->commited() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_commited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemoryPool)
  return target;
}

size_t MemoryPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MemoryPool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 init = 2;
  if (this->init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_init());
  }

  // int64 max = 3;
  if (this->max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max());
  }

  // int64 used = 4;
  if (this->used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_used());
  }

  // int64 commited = 5;
  if (this->commited() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_commited());
  }

  // .PoolType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MemoryPool)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MemoryPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MemoryPool)
    MergeFrom(*source);
  }
}

void MemoryPool::MergeFrom(const MemoryPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MemoryPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.init() != 0) {
    _internal_set_init(from._internal_init());
  }
  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from.used() != 0) {
    _internal_set_used(from._internal_used());
  }
  if (from.commited() != 0) {
    _internal_set_commited(from._internal_commited());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void MemoryPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MemoryPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryPool::CopyFrom(const MemoryPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MemoryPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryPool::IsInitialized() const {
  return true;
}

void MemoryPool::InternalSwap(MemoryPool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(init_, other->init_);
  swap(max_, other->max_);
  swap(used_, other->used_);
  swap(commited_, other->commited_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GC::InitAsDefaultInstance() {
}
class GC::_Internal {
 public:
};

GC::GC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GC)
}
GC::GC(const GC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&phrase_) -
    reinterpret_cast<char*>(&count_)) + sizeof(phrase_));
  // @@protoc_insertion_point(copy_constructor:GC)
}

void GC::SharedCtor() {
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phrase_) -
      reinterpret_cast<char*>(&count_)) + sizeof(phrase_));
}

GC::~GC() {
  // @@protoc_insertion_point(destructor:GC)
  SharedDtor();
}

void GC::SharedDtor() {
}

void GC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GC& GC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GC_common_2fJVM_2eproto.base);
  return *internal_default_instance();
}


void GC::Clear() {
// @@protoc_insertion_point(message_clear_start:GC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phrase_) -
      reinterpret_cast<char*>(&count_)) + sizeof(phrase_));
  _internal_metadata_.Clear();
}

const char* GC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GCPhrase phrase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_phrase(static_cast<::GCPhrase>(val));
        } else goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GC::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GCPhrase phrase = 1;
  if (this->phrase() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phrase(), target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GC)
  return target;
}

size_t GC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // int64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // .GCPhrase phrase = 1;
  if (this->phrase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phrase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GC)
  GOOGLE_DCHECK_NE(&from, this);
  const GC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GC)
    MergeFrom(*source);
  }
}

void GC::MergeFrom(const GC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.phrase() != 0) {
    _internal_set_phrase(from._internal_phrase());
  }
}

void GC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GC::CopyFrom(const GC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GC::IsInitialized() const {
  return true;
}

void GC::InternalSwap(GC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
  swap(time_, other->time_);
  swap(phrase_, other->phrase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::JVMMetric* Arena::CreateMaybeMessage< ::JVMMetric >(Arena* arena) {
  return Arena::CreateInternal< ::JVMMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::Memory* Arena::CreateMaybeMessage< ::Memory >(Arena* arena) {
  return Arena::CreateInternal< ::Memory >(arena);
}
template<> PROTOBUF_NOINLINE ::MemoryPool* Arena::CreateMaybeMessage< ::MemoryPool >(Arena* arena) {
  return Arena::CreateInternal< ::MemoryPool >(arena);
}
template<> PROTOBUF_NOINLINE ::GC* Arena::CreateMaybeMessage< ::GC >(Arena* arena) {
  return Arena::CreateInternal< ::GC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
