// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: register/Register.proto

#include "register/Register.pb.h"
#include "register/Register.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Register_method_names[] = {
  "/Register/doServiceRegister",
  "/Register/doServiceInstanceRegister",
  "/Register/doEndpointRegister",
  "/Register/doNetworkAddressRegister",
  "/Register/doServiceAndNetworkAddressMappingRegister",
};

std::unique_ptr< Register::Stub> Register::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Register::Stub> stub(new Register::Stub(channel));
  return stub;
}

Register::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_doServiceRegister_(Register_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doServiceInstanceRegister_(Register_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doEndpointRegister_(Register_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doNetworkAddressRegister_(Register_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doServiceAndNetworkAddressMappingRegister_(Register_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Register::Stub::doServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::ServiceRegisterMapping* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_doServiceRegister_, context, request, response);
}

void Register::Stub::experimental_async::doServiceRegister(::grpc::ClientContext* context, const ::Services* request, ::ServiceRegisterMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doServiceRegister_, context, request, response, std::move(f));
}

void Register::Stub::experimental_async::doServiceRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ServiceRegisterMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doServiceRegister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>* Register::Stub::AsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServiceRegisterMapping>::Create(channel_.get(), cq, rpcmethod_doServiceRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>* Register::Stub::PrepareAsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServiceRegisterMapping>::Create(channel_.get(), cq, rpcmethod_doServiceRegister_, context, request, false);
}

::grpc::Status Register::Stub::doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::ServiceInstanceRegisterMapping* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_doServiceInstanceRegister_, context, request, response);
}

void Register::Stub::experimental_async::doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doServiceInstanceRegister_, context, request, response, std::move(f));
}

void Register::Stub::experimental_async::doServiceInstanceRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ServiceInstanceRegisterMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doServiceInstanceRegister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>* Register::Stub::AsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServiceInstanceRegisterMapping>::Create(channel_.get(), cq, rpcmethod_doServiceInstanceRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>* Register::Stub::PrepareAsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServiceInstanceRegisterMapping>::Create(channel_.get(), cq, rpcmethod_doServiceInstanceRegister_, context, request, false);
}

::grpc::Status Register::Stub::doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::EndpointMapping* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_doEndpointRegister_, context, request, response);
}

void Register::Stub::experimental_async::doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints* request, ::EndpointMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doEndpointRegister_, context, request, response, std::move(f));
}

void Register::Stub::experimental_async::doEndpointRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EndpointMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doEndpointRegister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::EndpointMapping>* Register::Stub::AsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EndpointMapping>::Create(channel_.get(), cq, rpcmethod_doEndpointRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::EndpointMapping>* Register::Stub::PrepareAsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EndpointMapping>::Create(channel_.get(), cq, rpcmethod_doEndpointRegister_, context, request, false);
}

::grpc::Status Register::Stub::doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::NetAddressMapping* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_doNetworkAddressRegister_, context, request, response);
}

void Register::Stub::experimental_async::doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doNetworkAddressRegister_, context, request, response, std::move(f));
}

void Register::Stub::experimental_async::doNetworkAddressRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NetAddressMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doNetworkAddressRegister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::NetAddressMapping>* Register::Stub::AsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NetAddressMapping>::Create(channel_.get(), cq, rpcmethod_doNetworkAddressRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NetAddressMapping>* Register::Stub::PrepareAsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NetAddressMapping>::Create(channel_.get(), cq, rpcmethod_doNetworkAddressRegister_, context, request, false);
}

::grpc::Status Register::Stub::doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::Commands* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_doServiceAndNetworkAddressMappingRegister_, context, request, response);
}

void Register::Stub::experimental_async::doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doServiceAndNetworkAddressMappingRegister_, context, request, response, std::move(f));
}

void Register::Stub::experimental_async::doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Commands* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_doServiceAndNetworkAddressMappingRegister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Commands>* Register::Stub::AsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Commands>::Create(channel_.get(), cq, rpcmethod_doServiceAndNetworkAddressMappingRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Commands>* Register::Stub::PrepareAsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Commands>::Create(channel_.get(), cq, rpcmethod_doServiceAndNetworkAddressMappingRegister_, context, request, false);
}

Register::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::Services, ::ServiceRegisterMapping>(
          std::mem_fn(&Register::Service::doServiceRegister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::ServiceInstances, ::ServiceInstanceRegisterMapping>(
          std::mem_fn(&Register::Service::doServiceInstanceRegister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::Endpoints, ::EndpointMapping>(
          std::mem_fn(&Register::Service::doEndpointRegister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::NetAddresses, ::NetAddressMapping>(
          std::mem_fn(&Register::Service::doNetworkAddressRegister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::ServiceAndNetworkAddressMappings, ::Commands>(
          std::mem_fn(&Register::Service::doServiceAndNetworkAddressMappingRegister), this)));
}

Register::Service::~Service() {
}

::grpc::Status Register::Service::doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Register::Service::doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Register::Service::doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Register::Service::doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Register::Service::doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


