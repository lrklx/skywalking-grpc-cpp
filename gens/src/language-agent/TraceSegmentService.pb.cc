// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent/TraceSegmentService.proto

#include "language-agent/TraceSegmentService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fKeyWithStringValue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyWithStringValue_language_2dagent_2fKeyWithStringValue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fTraceSegmentService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogMessage_language_2dagent_2fTraceSegmentService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fTraceSegmentService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpanObject_language_2dagent_2fTraceSegmentService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fTraceSegmentService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceSegmentReference_language_2dagent_2fTraceSegmentService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2ftrace_2dcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueId_common_2ftrace_2dcommon_2eproto;
class TraceSegmentObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceSegmentObject> _instance;
} _TraceSegmentObject_default_instance_;
class TraceSegmentReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceSegmentReference> _instance;
} _TraceSegmentReference_default_instance_;
class SpanObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpanObject> _instance;
} _SpanObject_default_instance_;
class LogMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogMessage> _instance;
} _LogMessage_default_instance_;
static void InitDefaultsscc_info_LogMessage_language_2dagent_2fTraceSegmentService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogMessage_default_instance_;
    new (ptr) ::LogMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogMessage_language_2dagent_2fTraceSegmentService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogMessage_language_2dagent_2fTraceSegmentService_2eproto}, {
      &scc_info_KeyWithStringValue_language_2dagent_2fKeyWithStringValue_2eproto.base,}};

static void InitDefaultsscc_info_SpanObject_language_2dagent_2fTraceSegmentService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpanObject_default_instance_;
    new (ptr) ::SpanObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpanObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpanObject_language_2dagent_2fTraceSegmentService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpanObject_language_2dagent_2fTraceSegmentService_2eproto}, {
      &scc_info_TraceSegmentReference_language_2dagent_2fTraceSegmentService_2eproto.base,
      &scc_info_KeyWithStringValue_language_2dagent_2fKeyWithStringValue_2eproto.base,
      &scc_info_LogMessage_language_2dagent_2fTraceSegmentService_2eproto.base,}};

static void InitDefaultsscc_info_TraceSegmentObject_language_2dagent_2fTraceSegmentService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TraceSegmentObject_default_instance_;
    new (ptr) ::TraceSegmentObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TraceSegmentObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TraceSegmentObject_language_2dagent_2fTraceSegmentService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TraceSegmentObject_language_2dagent_2fTraceSegmentService_2eproto}, {
      &scc_info_UniqueId_common_2ftrace_2dcommon_2eproto.base,
      &scc_info_SpanObject_language_2dagent_2fTraceSegmentService_2eproto.base,}};

static void InitDefaultsscc_info_TraceSegmentReference_language_2dagent_2fTraceSegmentService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TraceSegmentReference_default_instance_;
    new (ptr) ::TraceSegmentReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TraceSegmentReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceSegmentReference_language_2dagent_2fTraceSegmentService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TraceSegmentReference_language_2dagent_2fTraceSegmentService_2eproto}, {
      &scc_info_UniqueId_common_2ftrace_2dcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_language_2dagent_2fTraceSegmentService_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_language_2dagent_2fTraceSegmentService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_language_2dagent_2fTraceSegmentService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_language_2dagent_2fTraceSegmentService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TraceSegmentObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TraceSegmentObject, tracesegmentid_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentObject, spans_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentObject, applicationid_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentObject, applicationinstanceid_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentObject, issizelimited_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, reftype_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, parenttracesegmentid_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, parentspanid_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, parentapplicationinstanceid_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, networkaddress_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, networkaddressid_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, entryapplicationinstanceid_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, entryservicename_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, entryserviceid_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, parentservicename_),
  PROTOBUF_FIELD_OFFSET(::TraceSegmentReference, parentserviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpanObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpanObject, spanid_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, parentspanid_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, starttime_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, endtime_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, refs_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, operationnameid_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, operationname_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, peerid_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, peer_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, spantype_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, spanlayer_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, componentid_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, component_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, iserror_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, tags_),
  PROTOBUF_FIELD_OFFSET(::SpanObject, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogMessage, time_),
  PROTOBUF_FIELD_OFFSET(::LogMessage, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TraceSegmentObject)},
  { 10, -1, sizeof(::TraceSegmentReference)},
  { 26, -1, sizeof(::SpanObject)},
  { 47, -1, sizeof(::LogMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TraceSegmentObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TraceSegmentReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpanObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogMessage_default_instance_),
};

const char descriptor_table_protodef_language_2dagent_2fTraceSegmentService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(language-agent/TraceSegmentService.pro"
  "to\032\037language-agent/Downstream.proto\032\'lan"
  "guage-agent/KeyWithStringValue.proto\032\031co"
  "mmon/trace-common.proto\"\240\001\n\022TraceSegment"
  "Object\022!\n\016traceSegmentId\030\001 \001(\0132\t.UniqueI"
  "d\022\032\n\005spans\030\002 \003(\0132\013.SpanObject\022\025\n\rapplica"
  "tionId\030\003 \001(\005\022\035\n\025applicationInstanceId\030\004 "
  "\001(\005\022\025\n\risSizeLimited\030\005 \001(\010\"\322\002\n\025TraceSegm"
  "entReference\022\031\n\007refType\030\001 \001(\0162\010.RefType\022"
  "\'\n\024parentTraceSegmentId\030\002 \001(\0132\t.UniqueId"
  "\022\024\n\014parentSpanId\030\003 \001(\005\022#\n\033parentApplicat"
  "ionInstanceId\030\004 \001(\005\022\026\n\016networkAddress\030\005 "
  "\001(\t\022\030\n\020networkAddressId\030\006 \001(\005\022\"\n\032entryAp"
  "plicationInstanceId\030\007 \001(\005\022\030\n\020entryServic"
  "eName\030\010 \001(\t\022\026\n\016entryServiceId\030\t \001(\005\022\031\n\021p"
  "arentServiceName\030\n \001(\t\022\027\n\017parentServiceI"
  "d\030\013 \001(\005\"\375\002\n\nSpanObject\022\016\n\006spanId\030\001 \001(\005\022\024"
  "\n\014parentSpanId\030\002 \001(\005\022\021\n\tstartTime\030\003 \001(\003\022"
  "\017\n\007endTime\030\004 \001(\003\022$\n\004refs\030\005 \003(\0132\026.TraceSe"
  "gmentReference\022\027\n\017operationNameId\030\006 \001(\005\022"
  "\025\n\roperationName\030\007 \001(\t\022\016\n\006peerId\030\010 \001(\005\022\014"
  "\n\004peer\030\t \001(\t\022\033\n\010spanType\030\n \001(\0162\t.SpanTyp"
  "e\022\035\n\tspanLayer\030\013 \001(\0162\n.SpanLayer\022\023\n\013comp"
  "onentId\030\014 \001(\005\022\021\n\tcomponent\030\r \001(\t\022\017\n\007isEr"
  "ror\030\016 \001(\010\022!\n\004tags\030\017 \003(\0132\023.KeyWithStringV"
  "alue\022\031\n\004logs\030\020 \003(\0132\013.LogMessage\"=\n\nLogMe"
  "ssage\022\014\n\004time\030\001 \001(\003\022!\n\004data\030\002 \003(\0132\023.KeyW"
  "ithStringValue2C\n\023TraceSegmentService\022,\n"
  "\007collect\022\020.UpstreamSegment\032\013.Downstream\""
  "\000(\001BQ\n0org.apache.skywalking.apm.network"
  ".language.agentP\001\252\002\032SkyWalking.NetworkPr"
  "otocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_language_2dagent_2fTraceSegmentService_2eproto_deps[3] = {
  &::descriptor_table_common_2ftrace_2dcommon_2eproto,
  &::descriptor_table_language_2dagent_2fDownstream_2eproto,
  &::descriptor_table_language_2dagent_2fKeyWithStringValue_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_language_2dagent_2fTraceSegmentService_2eproto_sccs[4] = {
  &scc_info_LogMessage_language_2dagent_2fTraceSegmentService_2eproto.base,
  &scc_info_SpanObject_language_2dagent_2fTraceSegmentService_2eproto.base,
  &scc_info_TraceSegmentObject_language_2dagent_2fTraceSegmentService_2eproto.base,
  &scc_info_TraceSegmentReference_language_2dagent_2fTraceSegmentService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_language_2dagent_2fTraceSegmentService_2eproto_once;
static bool descriptor_table_language_2dagent_2fTraceSegmentService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2fTraceSegmentService_2eproto = {
  &descriptor_table_language_2dagent_2fTraceSegmentService_2eproto_initialized, descriptor_table_protodef_language_2dagent_2fTraceSegmentService_2eproto, "language-agent/TraceSegmentService.proto", 1254,
  &descriptor_table_language_2dagent_2fTraceSegmentService_2eproto_once, descriptor_table_language_2dagent_2fTraceSegmentService_2eproto_sccs, descriptor_table_language_2dagent_2fTraceSegmentService_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_language_2dagent_2fTraceSegmentService_2eproto::offsets,
  file_level_metadata_language_2dagent_2fTraceSegmentService_2eproto, 4, file_level_enum_descriptors_language_2dagent_2fTraceSegmentService_2eproto, file_level_service_descriptors_language_2dagent_2fTraceSegmentService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_language_2dagent_2fTraceSegmentService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_language_2dagent_2fTraceSegmentService_2eproto), true);

// ===================================================================

void TraceSegmentObject::InitAsDefaultInstance() {
  ::_TraceSegmentObject_default_instance_._instance.get_mutable()->tracesegmentid_ = const_cast< ::UniqueId*>(
      ::UniqueId::internal_default_instance());
}
class TraceSegmentObject::_Internal {
 public:
  static const ::UniqueId& tracesegmentid(const TraceSegmentObject* msg);
};

const ::UniqueId&
TraceSegmentObject::_Internal::tracesegmentid(const TraceSegmentObject* msg) {
  return *msg->tracesegmentid_;
}
void TraceSegmentObject::clear_tracesegmentid() {
  if (GetArenaNoVirtual() == nullptr && tracesegmentid_ != nullptr) {
    delete tracesegmentid_;
  }
  tracesegmentid_ = nullptr;
}
TraceSegmentObject::TraceSegmentObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TraceSegmentObject)
}
TraceSegmentObject::TraceSegmentObject(const TraceSegmentObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      spans_(from.spans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_tracesegmentid()) {
    tracesegmentid_ = new ::UniqueId(*from.tracesegmentid_);
  } else {
    tracesegmentid_ = nullptr;
  }
  ::memcpy(&applicationid_, &from.applicationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&issizelimited_) -
    reinterpret_cast<char*>(&applicationid_)) + sizeof(issizelimited_));
  // @@protoc_insertion_point(copy_constructor:TraceSegmentObject)
}

void TraceSegmentObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceSegmentObject_language_2dagent_2fTraceSegmentService_2eproto.base);
  ::memset(&tracesegmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issizelimited_) -
      reinterpret_cast<char*>(&tracesegmentid_)) + sizeof(issizelimited_));
}

TraceSegmentObject::~TraceSegmentObject() {
  // @@protoc_insertion_point(destructor:TraceSegmentObject)
  SharedDtor();
}

void TraceSegmentObject::SharedDtor() {
  if (this != internal_default_instance()) delete tracesegmentid_;
}

void TraceSegmentObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceSegmentObject& TraceSegmentObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceSegmentObject_language_2dagent_2fTraceSegmentService_2eproto.base);
  return *internal_default_instance();
}


void TraceSegmentObject::Clear() {
// @@protoc_insertion_point(message_clear_start:TraceSegmentObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spans_.Clear();
  if (GetArenaNoVirtual() == nullptr && tracesegmentid_ != nullptr) {
    delete tracesegmentid_;
  }
  tracesegmentid_ = nullptr;
  ::memset(&applicationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issizelimited_) -
      reinterpret_cast<char*>(&applicationid_)) + sizeof(issizelimited_));
  _internal_metadata_.Clear();
}

const char* TraceSegmentObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .UniqueId traceSegmentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracesegmentid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpanObject spans = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 applicationId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          applicationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 applicationInstanceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          applicationinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSizeLimited = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          issizelimited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceSegmentObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TraceSegmentObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UniqueId traceSegmentId = 1;
  if (this->has_tracesegmentid()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::tracesegmentid(this), target, stream);
  }

  // repeated .SpanObject spans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spans_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_spans(i), target, stream);
  }

  // int32 applicationId = 3;
  if (this->applicationid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_applicationid(), target);
  }

  // int32 applicationInstanceId = 4;
  if (this->applicationinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_applicationinstanceid(), target);
  }

  // bool isSizeLimited = 5;
  if (this->issizelimited() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_issizelimited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TraceSegmentObject)
  return target;
}

size_t TraceSegmentObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TraceSegmentObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpanObject spans = 2;
  total_size += 1UL * this->_internal_spans_size();
  for (const auto& msg : this->spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .UniqueId traceSegmentId = 1;
  if (this->has_tracesegmentid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tracesegmentid_);
  }

  // int32 applicationId = 3;
  if (this->applicationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applicationid());
  }

  // int32 applicationInstanceId = 4;
  if (this->applicationinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applicationinstanceid());
  }

  // bool isSizeLimited = 5;
  if (this->issizelimited() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceSegmentObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TraceSegmentObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceSegmentObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceSegmentObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TraceSegmentObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TraceSegmentObject)
    MergeFrom(*source);
  }
}

void TraceSegmentObject::MergeFrom(const TraceSegmentObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TraceSegmentObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
  if (from.has_tracesegmentid()) {
    _internal_mutable_tracesegmentid()->::UniqueId::MergeFrom(from._internal_tracesegmentid());
  }
  if (from.applicationid() != 0) {
    _internal_set_applicationid(from._internal_applicationid());
  }
  if (from.applicationinstanceid() != 0) {
    _internal_set_applicationinstanceid(from._internal_applicationinstanceid());
  }
  if (from.issizelimited() != 0) {
    _internal_set_issizelimited(from._internal_issizelimited());
  }
}

void TraceSegmentObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TraceSegmentObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceSegmentObject::CopyFrom(const TraceSegmentObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TraceSegmentObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceSegmentObject::IsInitialized() const {
  return true;
}

void TraceSegmentObject::InternalSwap(TraceSegmentObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  spans_.InternalSwap(&other->spans_);
  swap(tracesegmentid_, other->tracesegmentid_);
  swap(applicationid_, other->applicationid_);
  swap(applicationinstanceid_, other->applicationinstanceid_);
  swap(issizelimited_, other->issizelimited_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceSegmentObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TraceSegmentReference::InitAsDefaultInstance() {
  ::_TraceSegmentReference_default_instance_._instance.get_mutable()->parenttracesegmentid_ = const_cast< ::UniqueId*>(
      ::UniqueId::internal_default_instance());
}
class TraceSegmentReference::_Internal {
 public:
  static const ::UniqueId& parenttracesegmentid(const TraceSegmentReference* msg);
};

const ::UniqueId&
TraceSegmentReference::_Internal::parenttracesegmentid(const TraceSegmentReference* msg) {
  return *msg->parenttracesegmentid_;
}
void TraceSegmentReference::clear_parenttracesegmentid() {
  if (GetArenaNoVirtual() == nullptr && parenttracesegmentid_ != nullptr) {
    delete parenttracesegmentid_;
  }
  parenttracesegmentid_ = nullptr;
}
TraceSegmentReference::TraceSegmentReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TraceSegmentReference)
}
TraceSegmentReference::TraceSegmentReference(const TraceSegmentReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  networkaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_networkaddress().empty()) {
    networkaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.networkaddress_);
  }
  entryservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entryservicename().empty()) {
    entryservicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entryservicename_);
  }
  parentservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parentservicename().empty()) {
    parentservicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parentservicename_);
  }
  if (from._internal_has_parenttracesegmentid()) {
    parenttracesegmentid_ = new ::UniqueId(*from.parenttracesegmentid_);
  } else {
    parenttracesegmentid_ = nullptr;
  }
  ::memcpy(&reftype_, &from.reftype_,
    static_cast<size_t>(reinterpret_cast<char*>(&parentserviceid_) -
    reinterpret_cast<char*>(&reftype_)) + sizeof(parentserviceid_));
  // @@protoc_insertion_point(copy_constructor:TraceSegmentReference)
}

void TraceSegmentReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceSegmentReference_language_2dagent_2fTraceSegmentService_2eproto.base);
  networkaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&parenttracesegmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentserviceid_) -
      reinterpret_cast<char*>(&parenttracesegmentid_)) + sizeof(parentserviceid_));
}

TraceSegmentReference::~TraceSegmentReference() {
  // @@protoc_insertion_point(destructor:TraceSegmentReference)
  SharedDtor();
}

void TraceSegmentReference::SharedDtor() {
  networkaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryservicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentservicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parenttracesegmentid_;
}

void TraceSegmentReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceSegmentReference& TraceSegmentReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceSegmentReference_language_2dagent_2fTraceSegmentService_2eproto.base);
  return *internal_default_instance();
}


void TraceSegmentReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TraceSegmentReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryservicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentservicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && parenttracesegmentid_ != nullptr) {
    delete parenttracesegmentid_;
  }
  parenttracesegmentid_ = nullptr;
  ::memset(&reftype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentserviceid_) -
      reinterpret_cast<char*>(&reftype_)) + sizeof(parentserviceid_));
  _internal_metadata_.Clear();
}

const char* TraceSegmentReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RefType refType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_reftype(static_cast<::RefType>(val));
        } else goto handle_unusual;
        continue;
      // .UniqueId parentTraceSegmentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parenttracesegmentid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parentSpanId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parentspanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parentApplicationInstanceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parentapplicationinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string networkAddress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_networkaddress(), ptr, ctx, "TraceSegmentReference.networkAddress");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 networkAddressId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          networkaddressid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 entryApplicationInstanceId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          entryapplicationinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entryServiceName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_entryservicename(), ptr, ctx, "TraceSegmentReference.entryServiceName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 entryServiceId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          entryserviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parentServiceName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_parentservicename(), ptr, ctx, "TraceSegmentReference.parentServiceName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parentServiceId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          parentserviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceSegmentReference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TraceSegmentReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RefType refType = 1;
  if (this->reftype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reftype(), target);
  }

  // .UniqueId parentTraceSegmentId = 2;
  if (this->has_parenttracesegmentid()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::parenttracesegmentid(this), target, stream);
  }

  // int32 parentSpanId = 3;
  if (this->parentspanid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_parentspanid(), target);
  }

  // int32 parentApplicationInstanceId = 4;
  if (this->parentapplicationinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_parentapplicationinstanceid(), target);
  }

  // string networkAddress = 5;
  if (this->networkaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_networkaddress().data(), static_cast<int>(this->_internal_networkaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TraceSegmentReference.networkAddress");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_networkaddress(), target);
  }

  // int32 networkAddressId = 6;
  if (this->networkaddressid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_networkaddressid(), target);
  }

  // int32 entryApplicationInstanceId = 7;
  if (this->entryapplicationinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_entryapplicationinstanceid(), target);
  }

  // string entryServiceName = 8;
  if (this->entryservicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entryservicename().data(), static_cast<int>(this->_internal_entryservicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TraceSegmentReference.entryServiceName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_entryservicename(), target);
  }

  // int32 entryServiceId = 9;
  if (this->entryserviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_entryserviceid(), target);
  }

  // string parentServiceName = 10;
  if (this->parentservicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentservicename().data(), static_cast<int>(this->_internal_parentservicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TraceSegmentReference.parentServiceName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_parentservicename(), target);
  }

  // int32 parentServiceId = 11;
  if (this->parentserviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_parentserviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TraceSegmentReference)
  return target;
}

size_t TraceSegmentReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TraceSegmentReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string networkAddress = 5;
  if (this->networkaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_networkaddress());
  }

  // string entryServiceName = 8;
  if (this->entryservicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entryservicename());
  }

  // string parentServiceName = 10;
  if (this->parentservicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentservicename());
  }

  // .UniqueId parentTraceSegmentId = 2;
  if (this->has_parenttracesegmentid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parenttracesegmentid_);
  }

  // .RefType refType = 1;
  if (this->reftype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reftype());
  }

  // int32 parentSpanId = 3;
  if (this->parentspanid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parentspanid());
  }

  // int32 parentApplicationInstanceId = 4;
  if (this->parentapplicationinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parentapplicationinstanceid());
  }

  // int32 networkAddressId = 6;
  if (this->networkaddressid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_networkaddressid());
  }

  // int32 entryApplicationInstanceId = 7;
  if (this->entryapplicationinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entryapplicationinstanceid());
  }

  // int32 entryServiceId = 9;
  if (this->entryserviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entryserviceid());
  }

  // int32 parentServiceId = 11;
  if (this->parentserviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parentserviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceSegmentReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TraceSegmentReference)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceSegmentReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceSegmentReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TraceSegmentReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TraceSegmentReference)
    MergeFrom(*source);
  }
}

void TraceSegmentReference::MergeFrom(const TraceSegmentReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TraceSegmentReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkaddress().size() > 0) {

    networkaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.networkaddress_);
  }
  if (from.entryservicename().size() > 0) {

    entryservicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entryservicename_);
  }
  if (from.parentservicename().size() > 0) {

    parentservicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parentservicename_);
  }
  if (from.has_parenttracesegmentid()) {
    _internal_mutable_parenttracesegmentid()->::UniqueId::MergeFrom(from._internal_parenttracesegmentid());
  }
  if (from.reftype() != 0) {
    _internal_set_reftype(from._internal_reftype());
  }
  if (from.parentspanid() != 0) {
    _internal_set_parentspanid(from._internal_parentspanid());
  }
  if (from.parentapplicationinstanceid() != 0) {
    _internal_set_parentapplicationinstanceid(from._internal_parentapplicationinstanceid());
  }
  if (from.networkaddressid() != 0) {
    _internal_set_networkaddressid(from._internal_networkaddressid());
  }
  if (from.entryapplicationinstanceid() != 0) {
    _internal_set_entryapplicationinstanceid(from._internal_entryapplicationinstanceid());
  }
  if (from.entryserviceid() != 0) {
    _internal_set_entryserviceid(from._internal_entryserviceid());
  }
  if (from.parentserviceid() != 0) {
    _internal_set_parentserviceid(from._internal_parentserviceid());
  }
}

void TraceSegmentReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TraceSegmentReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceSegmentReference::CopyFrom(const TraceSegmentReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TraceSegmentReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceSegmentReference::IsInitialized() const {
  return true;
}

void TraceSegmentReference::InternalSwap(TraceSegmentReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  networkaddress_.Swap(&other->networkaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entryservicename_.Swap(&other->entryservicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parentservicename_.Swap(&other->parentservicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(parenttracesegmentid_, other->parenttracesegmentid_);
  swap(reftype_, other->reftype_);
  swap(parentspanid_, other->parentspanid_);
  swap(parentapplicationinstanceid_, other->parentapplicationinstanceid_);
  swap(networkaddressid_, other->networkaddressid_);
  swap(entryapplicationinstanceid_, other->entryapplicationinstanceid_);
  swap(entryserviceid_, other->entryserviceid_);
  swap(parentserviceid_, other->parentserviceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceSegmentReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpanObject::InitAsDefaultInstance() {
}
class SpanObject::_Internal {
 public:
};

void SpanObject::clear_tags() {
  tags_.Clear();
}
SpanObject::SpanObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpanObject)
}
SpanObject::SpanObject(const SpanObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      refs_(from.refs_),
      tags_(from.tags_),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operationname().empty()) {
    operationname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operationname_);
  }
  peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer().empty()) {
    peer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_);
  }
  component_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_component().empty()) {
    component_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  ::memcpy(&spanid_, &from.spanid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iserror_) -
    reinterpret_cast<char*>(&spanid_)) + sizeof(iserror_));
  // @@protoc_insertion_point(copy_constructor:SpanObject)
}

void SpanObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpanObject_language_2dagent_2fTraceSegmentService_2eproto.base);
  operationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spanid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iserror_) -
      reinterpret_cast<char*>(&spanid_)) + sizeof(iserror_));
}

SpanObject::~SpanObject() {
  // @@protoc_insertion_point(destructor:SpanObject)
  SharedDtor();
}

void SpanObject::SharedDtor() {
  operationname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpanObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpanObject& SpanObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpanObject_language_2dagent_2fTraceSegmentService_2eproto.base);
  return *internal_default_instance();
}


void SpanObject::Clear() {
// @@protoc_insertion_point(message_clear_start:SpanObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refs_.Clear();
  tags_.Clear();
  logs_.Clear();
  operationname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spanid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iserror_) -
      reinterpret_cast<char*>(&spanid_)) + sizeof(iserror_));
  _internal_metadata_.Clear();
}

const char* SpanObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 spanId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parentSpanId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parentspanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TraceSegmentReference refs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 operationNameId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          operationnameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operationName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_operationname(), ptr, ctx, "SpanObject.operationName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 peerId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          peerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_peer(), ptr, ctx, "SpanObject.peer");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpanType spanType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_spantype(static_cast<::SpanType>(val));
        } else goto handle_unusual;
        continue;
      // .SpanLayer spanLayer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_spanlayer(static_cast<::SpanLayer>(val));
        } else goto handle_unusual;
        continue;
      // int32 componentId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          componentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string component = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_component(), ptr, ctx, "SpanObject.component");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isError = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          iserror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KeyWithStringValue tags = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LogMessage logs = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpanObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spanId = 1;
  if (this->spanid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_spanid(), target);
  }

  // int32 parentSpanId = 2;
  if (this->parentspanid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parentspanid(), target);
  }

  // int64 startTime = 3;
  if (this->starttime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_starttime(), target);
  }

  // int64 endTime = 4;
  if (this->endtime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_endtime(), target);
  }

  // repeated .TraceSegmentReference refs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_refs(i), target, stream);
  }

  // int32 operationNameId = 6;
  if (this->operationnameid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_operationnameid(), target);
  }

  // string operationName = 7;
  if (this->operationname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operationname().data(), static_cast<int>(this->_internal_operationname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpanObject.operationName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_operationname(), target);
  }

  // int32 peerId = 8;
  if (this->peerid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_peerid(), target);
  }

  // string peer = 9;
  if (this->peer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer().data(), static_cast<int>(this->_internal_peer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpanObject.peer");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_peer(), target);
  }

  // .SpanType spanType = 10;
  if (this->spantype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_spantype(), target);
  }

  // .SpanLayer spanLayer = 11;
  if (this->spanlayer() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_spanlayer(), target);
  }

  // int32 componentId = 12;
  if (this->componentid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_componentid(), target);
  }

  // string component = 13;
  if (this->component().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component().data(), static_cast<int>(this->_internal_component().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpanObject.component");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_component(), target);
  }

  // bool isError = 14;
  if (this->iserror() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_iserror(), target);
  }

  // repeated .KeyWithStringValue tags = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(15, this->_internal_tags(i), target, stream);
  }

  // repeated .LogMessage logs = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(16, this->_internal_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpanObject)
  return target;
}

size_t SpanObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpanObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TraceSegmentReference refs = 5;
  total_size += 1UL * this->_internal_refs_size();
  for (const auto& msg : this->refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KeyWithStringValue tags = 15;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogMessage logs = 16;
  total_size += 2UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string operationName = 7;
  if (this->operationname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operationname());
  }

  // string peer = 9;
  if (this->peer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer());
  }

  // string component = 13;
  if (this->component().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component());
  }

  // int32 spanId = 1;
  if (this->spanid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spanid());
  }

  // int32 parentSpanId = 2;
  if (this->parentspanid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parentspanid());
  }

  // int64 startTime = 3;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_starttime());
  }

  // int64 endTime = 4;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endtime());
  }

  // int32 operationNameId = 6;
  if (this->operationnameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operationnameid());
  }

  // int32 peerId = 8;
  if (this->peerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peerid());
  }

  // .SpanType spanType = 10;
  if (this->spantype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spantype());
  }

  // .SpanLayer spanLayer = 11;
  if (this->spanlayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spanlayer());
  }

  // int32 componentId = 12;
  if (this->componentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_componentid());
  }

  // bool isError = 14;
  if (this->iserror() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpanObject)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpanObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpanObject)
    MergeFrom(*source);
  }
}

void SpanObject::MergeFrom(const SpanObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpanObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refs_.MergeFrom(from.refs_);
  tags_.MergeFrom(from.tags_);
  logs_.MergeFrom(from.logs_);
  if (from.operationname().size() > 0) {

    operationname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operationname_);
  }
  if (from.peer().size() > 0) {

    peer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_);
  }
  if (from.component().size() > 0) {

    component_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  if (from.spanid() != 0) {
    _internal_set_spanid(from._internal_spanid());
  }
  if (from.parentspanid() != 0) {
    _internal_set_parentspanid(from._internal_parentspanid());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.operationnameid() != 0) {
    _internal_set_operationnameid(from._internal_operationnameid());
  }
  if (from.peerid() != 0) {
    _internal_set_peerid(from._internal_peerid());
  }
  if (from.spantype() != 0) {
    _internal_set_spantype(from._internal_spantype());
  }
  if (from.spanlayer() != 0) {
    _internal_set_spanlayer(from._internal_spanlayer());
  }
  if (from.componentid() != 0) {
    _internal_set_componentid(from._internal_componentid());
  }
  if (from.iserror() != 0) {
    _internal_set_iserror(from._internal_iserror());
  }
}

void SpanObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanObject::CopyFrom(const SpanObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanObject::IsInitialized() const {
  return true;
}

void SpanObject::InternalSwap(SpanObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  refs_.InternalSwap(&other->refs_);
  tags_.InternalSwap(&other->tags_);
  logs_.InternalSwap(&other->logs_);
  operationname_.Swap(&other->operationname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_.Swap(&other->peer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  component_.Swap(&other->component_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(spanid_, other->spanid_);
  swap(parentspanid_, other->parentspanid_);
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(operationnameid_, other->operationnameid_);
  swap(peerid_, other->peerid_);
  swap(spantype_, other->spantype_);
  swap(spanlayer_, other->spanlayer_);
  swap(componentid_, other->componentid_);
  swap(iserror_, other->iserror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogMessage::InitAsDefaultInstance() {
}
class LogMessage::_Internal {
 public:
};

void LogMessage::clear_data() {
  data_.Clear();
}
LogMessage::LogMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:LogMessage)
}

void LogMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogMessage_language_2dagent_2fTraceSegmentService_2eproto.base);
  time_ = PROTOBUF_LONGLONG(0);
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:LogMessage)
  SharedDtor();
}

void LogMessage::SharedDtor() {
}

void LogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMessage& LogMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogMessage_language_2dagent_2fTraceSegmentService_2eproto.base);
  return *internal_default_instance();
}


void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KeyWithStringValue data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // repeated .KeyWithStringValue data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KeyWithStringValue data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogMessage)
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void LogMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TraceSegmentObject* Arena::CreateMaybeMessage< ::TraceSegmentObject >(Arena* arena) {
  return Arena::CreateInternal< ::TraceSegmentObject >(arena);
}
template<> PROTOBUF_NOINLINE ::TraceSegmentReference* Arena::CreateMaybeMessage< ::TraceSegmentReference >(Arena* arena) {
  return Arena::CreateInternal< ::TraceSegmentReference >(arena);
}
template<> PROTOBUF_NOINLINE ::SpanObject* Arena::CreateMaybeMessage< ::SpanObject >(Arena* arena) {
  return Arena::CreateInternal< ::SpanObject >(arena);
}
template<> PROTOBUF_NOINLINE ::LogMessage* Arena::CreateMaybeMessage< ::LogMessage >(Arena* arena) {
  return Arena::CreateInternal< ::LogMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
