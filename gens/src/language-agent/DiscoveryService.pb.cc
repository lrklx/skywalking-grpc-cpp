// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent/DiscoveryService.proto

#include "language-agent/DiscoveryService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fDiscoveryService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OSInfo_language_2dagent_2fDiscoveryService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fDiscoveryService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceNameElement_language_2dagent_2fDiscoveryService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fDiscoveryService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceNameMappingElement_language_2dagent_2fDiscoveryService_2eproto;
class ApplicationInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationInstance> _instance;
} _ApplicationInstance_default_instance_;
class ApplicationInstanceMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationInstanceMapping> _instance;
} _ApplicationInstanceMapping_default_instance_;
class ApplicationInstanceRecoverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationInstanceRecover> _instance;
} _ApplicationInstanceRecover_default_instance_;
class ApplicationInstanceHeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationInstanceHeartbeat> _instance;
} _ApplicationInstanceHeartbeat_default_instance_;
class OSInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OSInfo> _instance;
} _OSInfo_default_instance_;
class ServiceNameCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceNameCollection> _instance;
} _ServiceNameCollection_default_instance_;
class ServiceNameMappingCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceNameMappingCollection> _instance;
} _ServiceNameMappingCollection_default_instance_;
class ServiceNameMappingElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceNameMappingElement> _instance;
} _ServiceNameMappingElement_default_instance_;
class ServiceNameElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceNameElement> _instance;
} _ServiceNameElement_default_instance_;
static void InitDefaultsscc_info_ApplicationInstance_language_2dagent_2fDiscoveryService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ApplicationInstance_default_instance_;
    new (ptr) ::ApplicationInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ApplicationInstance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplicationInstance_language_2dagent_2fDiscoveryService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApplicationInstance_language_2dagent_2fDiscoveryService_2eproto}, {
      &scc_info_OSInfo_language_2dagent_2fDiscoveryService_2eproto.base,}};

static void InitDefaultsscc_info_ApplicationInstanceHeartbeat_language_2dagent_2fDiscoveryService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ApplicationInstanceHeartbeat_default_instance_;
    new (ptr) ::ApplicationInstanceHeartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ApplicationInstanceHeartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationInstanceHeartbeat_language_2dagent_2fDiscoveryService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplicationInstanceHeartbeat_language_2dagent_2fDiscoveryService_2eproto}, {}};

static void InitDefaultsscc_info_ApplicationInstanceMapping_language_2dagent_2fDiscoveryService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ApplicationInstanceMapping_default_instance_;
    new (ptr) ::ApplicationInstanceMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ApplicationInstanceMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationInstanceMapping_language_2dagent_2fDiscoveryService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplicationInstanceMapping_language_2dagent_2fDiscoveryService_2eproto}, {}};

static void InitDefaultsscc_info_ApplicationInstanceRecover_language_2dagent_2fDiscoveryService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ApplicationInstanceRecover_default_instance_;
    new (ptr) ::ApplicationInstanceRecover();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ApplicationInstanceRecover::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplicationInstanceRecover_language_2dagent_2fDiscoveryService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApplicationInstanceRecover_language_2dagent_2fDiscoveryService_2eproto}, {
      &scc_info_OSInfo_language_2dagent_2fDiscoveryService_2eproto.base,}};

static void InitDefaultsscc_info_OSInfo_language_2dagent_2fDiscoveryService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OSInfo_default_instance_;
    new (ptr) ::OSInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OSInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OSInfo_language_2dagent_2fDiscoveryService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OSInfo_language_2dagent_2fDiscoveryService_2eproto}, {}};

static void InitDefaultsscc_info_ServiceNameCollection_language_2dagent_2fDiscoveryService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceNameCollection_default_instance_;
    new (ptr) ::ServiceNameCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceNameCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceNameCollection_language_2dagent_2fDiscoveryService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceNameCollection_language_2dagent_2fDiscoveryService_2eproto}, {
      &scc_info_ServiceNameElement_language_2dagent_2fDiscoveryService_2eproto.base,}};

static void InitDefaultsscc_info_ServiceNameElement_language_2dagent_2fDiscoveryService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceNameElement_default_instance_;
    new (ptr) ::ServiceNameElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceNameElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceNameElement_language_2dagent_2fDiscoveryService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceNameElement_language_2dagent_2fDiscoveryService_2eproto}, {}};

static void InitDefaultsscc_info_ServiceNameMappingCollection_language_2dagent_2fDiscoveryService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceNameMappingCollection_default_instance_;
    new (ptr) ::ServiceNameMappingCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceNameMappingCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceNameMappingCollection_language_2dagent_2fDiscoveryService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceNameMappingCollection_language_2dagent_2fDiscoveryService_2eproto}, {
      &scc_info_ServiceNameMappingElement_language_2dagent_2fDiscoveryService_2eproto.base,}};

static void InitDefaultsscc_info_ServiceNameMappingElement_language_2dagent_2fDiscoveryService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceNameMappingElement_default_instance_;
    new (ptr) ::ServiceNameMappingElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceNameMappingElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceNameMappingElement_language_2dagent_2fDiscoveryService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceNameMappingElement_language_2dagent_2fDiscoveryService_2eproto}, {
      &scc_info_ServiceNameElement_language_2dagent_2fDiscoveryService_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_language_2dagent_2fDiscoveryService_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_language_2dagent_2fDiscoveryService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_language_2dagent_2fDiscoveryService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_language_2dagent_2fDiscoveryService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ApplicationInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ApplicationInstance, applicationid_),
  PROTOBUF_FIELD_OFFSET(::ApplicationInstance, agentuuid_),
  PROTOBUF_FIELD_OFFSET(::ApplicationInstance, registertime_),
  PROTOBUF_FIELD_OFFSET(::ApplicationInstance, osinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceMapping, applicationid_),
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceMapping, applicationinstanceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceRecover, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceRecover, applicationid_),
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceRecover, applicationinstanceid_),
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceRecover, registertime_),
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceRecover, osinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceHeartbeat, applicationinstanceid_),
  PROTOBUF_FIELD_OFFSET(::ApplicationInstanceHeartbeat, heartbeattime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OSInfo, osname_),
  PROTOBUF_FIELD_OFFSET(::OSInfo, hostname_),
  PROTOBUF_FIELD_OFFSET(::OSInfo, processno_),
  PROTOBUF_FIELD_OFFSET(::OSInfo, ipv4s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceNameCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceNameCollection, elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceNameMappingCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceNameMappingCollection, elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceNameMappingElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceNameMappingElement, serviceid_),
  PROTOBUF_FIELD_OFFSET(::ServiceNameMappingElement, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceNameElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceNameElement, servicename_),
  PROTOBUF_FIELD_OFFSET(::ServiceNameElement, applicationid_),
  PROTOBUF_FIELD_OFFSET(::ServiceNameElement, srcspantype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ApplicationInstance)},
  { 9, -1, sizeof(::ApplicationInstanceMapping)},
  { 16, -1, sizeof(::ApplicationInstanceRecover)},
  { 25, -1, sizeof(::ApplicationInstanceHeartbeat)},
  { 32, -1, sizeof(::OSInfo)},
  { 41, -1, sizeof(::ServiceNameCollection)},
  { 47, -1, sizeof(::ServiceNameMappingCollection)},
  { 53, -1, sizeof(::ServiceNameMappingElement)},
  { 60, -1, sizeof(::ServiceNameElement)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ApplicationInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ApplicationInstanceMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ApplicationInstanceRecover_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ApplicationInstanceHeartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OSInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceNameCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceNameMappingCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceNameMappingElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceNameElement_default_instance_),
};

const char descriptor_table_protodef_language_2dagent_2fDiscoveryService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%language-agent/DiscoveryService.proto\032"
  "\037language-agent/Downstream.proto\032\031common"
  "/trace-common.proto\"n\n\023ApplicationInstan"
  "ce\022\025\n\rapplicationId\030\001 \001(\005\022\021\n\tagentUUID\030\002"
  " \001(\t\022\024\n\014registerTime\030\003 \001(\003\022\027\n\006osinfo\030\004 \001"
  "(\0132\007.OSInfo\"R\n\032ApplicationInstanceMappin"
  "g\022\025\n\rapplicationId\030\001 \001(\005\022\035\n\025applicationI"
  "nstanceId\030\002 \001(\005\"\201\001\n\032ApplicationInstanceR"
  "ecover\022\025\n\rapplicationId\030\001 \001(\005\022\035\n\025applica"
  "tionInstanceId\030\002 \001(\005\022\024\n\014registerTime\030\003 \001"
  "(\003\022\027\n\006osinfo\030\004 \001(\0132\007.OSInfo\"T\n\034Applicati"
  "onInstanceHeartbeat\022\035\n\025applicationInstan"
  "ceId\030\001 \001(\005\022\025\n\rheartbeatTime\030\002 \001(\003\"L\n\006OSI"
  "nfo\022\016\n\006osName\030\001 \001(\t\022\020\n\010hostname\030\002 \001(\t\022\021\n"
  "\tprocessNo\030\003 \001(\005\022\r\n\005ipv4s\030\004 \003(\t\">\n\025Servi"
  "ceNameCollection\022%\n\010elements\030\001 \003(\0132\023.Ser"
  "viceNameElement\"L\n\034ServiceNameMappingCol"
  "lection\022,\n\010elements\030\001 \003(\0132\032.ServiceNameM"
  "appingElement\"T\n\031ServiceNameMappingEleme"
  "nt\022\021\n\tserviceId\030\001 \001(\005\022$\n\007element\030\002 \001(\0132\023"
  ".ServiceNameElement\"`\n\022ServiceNameElemen"
  "t\022\023\n\013serviceName\030\001 \001(\t\022\025\n\rapplicationId\030"
  "\002 \001(\005\022\036\n\013srcSpanType\030\003 \001(\0162\t.SpanType2\236\001"
  "\n\030InstanceDiscoveryService\022G\n\020registerIn"
  "stance\022\024.ApplicationInstance\032\033.Applicati"
  "onInstanceMapping\"\000\0229\n\theartbeat\022\035.Appli"
  "cationInstanceHeartbeat\032\013.Downstream\"\0002c"
  "\n\033ServiceNameDiscoveryService\022D\n\tdiscove"
  "ry\022\026.ServiceNameCollection\032\035.ServiceName"
  "MappingCollection\"\000BQ\n0org.apache.skywal"
  "king.apm.network.language.agentP\001\252\002\032SkyW"
  "alking.NetworkProtocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_language_2dagent_2fDiscoveryService_2eproto_deps[2] = {
  &::descriptor_table_common_2ftrace_2dcommon_2eproto,
  &::descriptor_table_language_2dagent_2fDownstream_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_language_2dagent_2fDiscoveryService_2eproto_sccs[9] = {
  &scc_info_ApplicationInstance_language_2dagent_2fDiscoveryService_2eproto.base,
  &scc_info_ApplicationInstanceHeartbeat_language_2dagent_2fDiscoveryService_2eproto.base,
  &scc_info_ApplicationInstanceMapping_language_2dagent_2fDiscoveryService_2eproto.base,
  &scc_info_ApplicationInstanceRecover_language_2dagent_2fDiscoveryService_2eproto.base,
  &scc_info_OSInfo_language_2dagent_2fDiscoveryService_2eproto.base,
  &scc_info_ServiceNameCollection_language_2dagent_2fDiscoveryService_2eproto.base,
  &scc_info_ServiceNameElement_language_2dagent_2fDiscoveryService_2eproto.base,
  &scc_info_ServiceNameMappingCollection_language_2dagent_2fDiscoveryService_2eproto.base,
  &scc_info_ServiceNameMappingElement_language_2dagent_2fDiscoveryService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_language_2dagent_2fDiscoveryService_2eproto_once;
static bool descriptor_table_language_2dagent_2fDiscoveryService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2fDiscoveryService_2eproto = {
  &descriptor_table_language_2dagent_2fDiscoveryService_2eproto_initialized, descriptor_table_protodef_language_2dagent_2fDiscoveryService_2eproto, "language-agent/DiscoveryService.proto", 1270,
  &descriptor_table_language_2dagent_2fDiscoveryService_2eproto_once, descriptor_table_language_2dagent_2fDiscoveryService_2eproto_sccs, descriptor_table_language_2dagent_2fDiscoveryService_2eproto_deps, 9, 2,
  schemas, file_default_instances, TableStruct_language_2dagent_2fDiscoveryService_2eproto::offsets,
  file_level_metadata_language_2dagent_2fDiscoveryService_2eproto, 9, file_level_enum_descriptors_language_2dagent_2fDiscoveryService_2eproto, file_level_service_descriptors_language_2dagent_2fDiscoveryService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_language_2dagent_2fDiscoveryService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_language_2dagent_2fDiscoveryService_2eproto), true);

// ===================================================================

void ApplicationInstance::InitAsDefaultInstance() {
  ::_ApplicationInstance_default_instance_._instance.get_mutable()->osinfo_ = const_cast< ::OSInfo*>(
      ::OSInfo::internal_default_instance());
}
class ApplicationInstance::_Internal {
 public:
  static const ::OSInfo& osinfo(const ApplicationInstance* msg);
};

const ::OSInfo&
ApplicationInstance::_Internal::osinfo(const ApplicationInstance* msg) {
  return *msg->osinfo_;
}
ApplicationInstance::ApplicationInstance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ApplicationInstance)
}
ApplicationInstance::ApplicationInstance(const ApplicationInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  agentuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agentuuid().empty()) {
    agentuuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.agentuuid_);
  }
  if (from._internal_has_osinfo()) {
    osinfo_ = new ::OSInfo(*from.osinfo_);
  } else {
    osinfo_ = nullptr;
  }
  ::memcpy(&registertime_, &from.registertime_,
    static_cast<size_t>(reinterpret_cast<char*>(&applicationid_) -
    reinterpret_cast<char*>(&registertime_)) + sizeof(applicationid_));
  // @@protoc_insertion_point(copy_constructor:ApplicationInstance)
}

void ApplicationInstance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplicationInstance_language_2dagent_2fDiscoveryService_2eproto.base);
  agentuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&osinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applicationid_) -
      reinterpret_cast<char*>(&osinfo_)) + sizeof(applicationid_));
}

ApplicationInstance::~ApplicationInstance() {
  // @@protoc_insertion_point(destructor:ApplicationInstance)
  SharedDtor();
}

void ApplicationInstance::SharedDtor() {
  agentuuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete osinfo_;
}

void ApplicationInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationInstance& ApplicationInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationInstance_language_2dagent_2fDiscoveryService_2eproto.base);
  return *internal_default_instance();
}


void ApplicationInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:ApplicationInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agentuuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && osinfo_ != nullptr) {
    delete osinfo_;
  }
  osinfo_ = nullptr;
  ::memset(&registertime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applicationid_) -
      reinterpret_cast<char*>(&registertime_)) + sizeof(applicationid_));
  _internal_metadata_.Clear();
}

const char* ApplicationInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 applicationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string agentUUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_agentuuid(), ptr, ctx, "ApplicationInstance.agentUUID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 registerTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          registertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OSInfo osinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_osinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationInstance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ApplicationInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 applicationId = 1;
  if (this->applicationid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_applicationid(), target);
  }

  // string agentUUID = 2;
  if (this->agentuuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agentuuid().data(), static_cast<int>(this->_internal_agentuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ApplicationInstance.agentUUID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_agentuuid(), target);
  }

  // int64 registerTime = 3;
  if (this->registertime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_registertime(), target);
  }

  // .OSInfo osinfo = 4;
  if (this->has_osinfo()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::osinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ApplicationInstance)
  return target;
}

size_t ApplicationInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ApplicationInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agentUUID = 2;
  if (this->agentuuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agentuuid());
  }

  // .OSInfo osinfo = 4;
  if (this->has_osinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osinfo_);
  }

  // int64 registerTime = 3;
  if (this->registertime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_registertime());
  }

  // int32 applicationId = 1;
  if (this->applicationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applicationid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ApplicationInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ApplicationInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ApplicationInstance)
    MergeFrom(*source);
  }
}

void ApplicationInstance::MergeFrom(const ApplicationInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ApplicationInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.agentuuid().size() > 0) {

    agentuuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.agentuuid_);
  }
  if (from.has_osinfo()) {
    _internal_mutable_osinfo()->::OSInfo::MergeFrom(from._internal_osinfo());
  }
  if (from.registertime() != 0) {
    _internal_set_registertime(from._internal_registertime());
  }
  if (from.applicationid() != 0) {
    _internal_set_applicationid(from._internal_applicationid());
  }
}

void ApplicationInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ApplicationInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationInstance::CopyFrom(const ApplicationInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ApplicationInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationInstance::IsInitialized() const {
  return true;
}

void ApplicationInstance::InternalSwap(ApplicationInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  agentuuid_.Swap(&other->agentuuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(osinfo_, other->osinfo_);
  swap(registertime_, other->registertime_);
  swap(applicationid_, other->applicationid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplicationInstanceMapping::InitAsDefaultInstance() {
}
class ApplicationInstanceMapping::_Internal {
 public:
};

ApplicationInstanceMapping::ApplicationInstanceMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ApplicationInstanceMapping)
}
ApplicationInstanceMapping::ApplicationInstanceMapping(const ApplicationInstanceMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&applicationid_, &from.applicationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&applicationinstanceid_) -
    reinterpret_cast<char*>(&applicationid_)) + sizeof(applicationinstanceid_));
  // @@protoc_insertion_point(copy_constructor:ApplicationInstanceMapping)
}

void ApplicationInstanceMapping::SharedCtor() {
  ::memset(&applicationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applicationinstanceid_) -
      reinterpret_cast<char*>(&applicationid_)) + sizeof(applicationinstanceid_));
}

ApplicationInstanceMapping::~ApplicationInstanceMapping() {
  // @@protoc_insertion_point(destructor:ApplicationInstanceMapping)
  SharedDtor();
}

void ApplicationInstanceMapping::SharedDtor() {
}

void ApplicationInstanceMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationInstanceMapping& ApplicationInstanceMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationInstanceMapping_language_2dagent_2fDiscoveryService_2eproto.base);
  return *internal_default_instance();
}


void ApplicationInstanceMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ApplicationInstanceMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&applicationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applicationinstanceid_) -
      reinterpret_cast<char*>(&applicationid_)) + sizeof(applicationinstanceid_));
  _internal_metadata_.Clear();
}

const char* ApplicationInstanceMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 applicationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 applicationInstanceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          applicationinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationInstanceMapping::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ApplicationInstanceMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 applicationId = 1;
  if (this->applicationid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_applicationid(), target);
  }

  // int32 applicationInstanceId = 2;
  if (this->applicationinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_applicationinstanceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ApplicationInstanceMapping)
  return target;
}

size_t ApplicationInstanceMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ApplicationInstanceMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 applicationId = 1;
  if (this->applicationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applicationid());
  }

  // int32 applicationInstanceId = 2;
  if (this->applicationinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applicationinstanceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationInstanceMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ApplicationInstanceMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationInstanceMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationInstanceMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ApplicationInstanceMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ApplicationInstanceMapping)
    MergeFrom(*source);
  }
}

void ApplicationInstanceMapping::MergeFrom(const ApplicationInstanceMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ApplicationInstanceMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.applicationid() != 0) {
    _internal_set_applicationid(from._internal_applicationid());
  }
  if (from.applicationinstanceid() != 0) {
    _internal_set_applicationinstanceid(from._internal_applicationinstanceid());
  }
}

void ApplicationInstanceMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ApplicationInstanceMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationInstanceMapping::CopyFrom(const ApplicationInstanceMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ApplicationInstanceMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationInstanceMapping::IsInitialized() const {
  return true;
}

void ApplicationInstanceMapping::InternalSwap(ApplicationInstanceMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(applicationid_, other->applicationid_);
  swap(applicationinstanceid_, other->applicationinstanceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationInstanceMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplicationInstanceRecover::InitAsDefaultInstance() {
  ::_ApplicationInstanceRecover_default_instance_._instance.get_mutable()->osinfo_ = const_cast< ::OSInfo*>(
      ::OSInfo::internal_default_instance());
}
class ApplicationInstanceRecover::_Internal {
 public:
  static const ::OSInfo& osinfo(const ApplicationInstanceRecover* msg);
};

const ::OSInfo&
ApplicationInstanceRecover::_Internal::osinfo(const ApplicationInstanceRecover* msg) {
  return *msg->osinfo_;
}
ApplicationInstanceRecover::ApplicationInstanceRecover()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ApplicationInstanceRecover)
}
ApplicationInstanceRecover::ApplicationInstanceRecover(const ApplicationInstanceRecover& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_osinfo()) {
    osinfo_ = new ::OSInfo(*from.osinfo_);
  } else {
    osinfo_ = nullptr;
  }
  ::memcpy(&applicationid_, &from.applicationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&registertime_) -
    reinterpret_cast<char*>(&applicationid_)) + sizeof(registertime_));
  // @@protoc_insertion_point(copy_constructor:ApplicationInstanceRecover)
}

void ApplicationInstanceRecover::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplicationInstanceRecover_language_2dagent_2fDiscoveryService_2eproto.base);
  ::memset(&osinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&registertime_) -
      reinterpret_cast<char*>(&osinfo_)) + sizeof(registertime_));
}

ApplicationInstanceRecover::~ApplicationInstanceRecover() {
  // @@protoc_insertion_point(destructor:ApplicationInstanceRecover)
  SharedDtor();
}

void ApplicationInstanceRecover::SharedDtor() {
  if (this != internal_default_instance()) delete osinfo_;
}

void ApplicationInstanceRecover::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationInstanceRecover& ApplicationInstanceRecover::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationInstanceRecover_language_2dagent_2fDiscoveryService_2eproto.base);
  return *internal_default_instance();
}


void ApplicationInstanceRecover::Clear() {
// @@protoc_insertion_point(message_clear_start:ApplicationInstanceRecover)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && osinfo_ != nullptr) {
    delete osinfo_;
  }
  osinfo_ = nullptr;
  ::memset(&applicationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&registertime_) -
      reinterpret_cast<char*>(&applicationid_)) + sizeof(registertime_));
  _internal_metadata_.Clear();
}

const char* ApplicationInstanceRecover::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 applicationId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 applicationInstanceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          applicationinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 registerTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          registertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OSInfo osinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_osinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationInstanceRecover::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ApplicationInstanceRecover)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 applicationId = 1;
  if (this->applicationid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_applicationid(), target);
  }

  // int32 applicationInstanceId = 2;
  if (this->applicationinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_applicationinstanceid(), target);
  }

  // int64 registerTime = 3;
  if (this->registertime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_registertime(), target);
  }

  // .OSInfo osinfo = 4;
  if (this->has_osinfo()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::osinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ApplicationInstanceRecover)
  return target;
}

size_t ApplicationInstanceRecover::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ApplicationInstanceRecover)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OSInfo osinfo = 4;
  if (this->has_osinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *osinfo_);
  }

  // int32 applicationId = 1;
  if (this->applicationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applicationid());
  }

  // int32 applicationInstanceId = 2;
  if (this->applicationinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applicationinstanceid());
  }

  // int64 registerTime = 3;
  if (this->registertime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_registertime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationInstanceRecover::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ApplicationInstanceRecover)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationInstanceRecover* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationInstanceRecover>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ApplicationInstanceRecover)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ApplicationInstanceRecover)
    MergeFrom(*source);
  }
}

void ApplicationInstanceRecover::MergeFrom(const ApplicationInstanceRecover& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ApplicationInstanceRecover)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_osinfo()) {
    _internal_mutable_osinfo()->::OSInfo::MergeFrom(from._internal_osinfo());
  }
  if (from.applicationid() != 0) {
    _internal_set_applicationid(from._internal_applicationid());
  }
  if (from.applicationinstanceid() != 0) {
    _internal_set_applicationinstanceid(from._internal_applicationinstanceid());
  }
  if (from.registertime() != 0) {
    _internal_set_registertime(from._internal_registertime());
  }
}

void ApplicationInstanceRecover::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ApplicationInstanceRecover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationInstanceRecover::CopyFrom(const ApplicationInstanceRecover& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ApplicationInstanceRecover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationInstanceRecover::IsInitialized() const {
  return true;
}

void ApplicationInstanceRecover::InternalSwap(ApplicationInstanceRecover* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(osinfo_, other->osinfo_);
  swap(applicationid_, other->applicationid_);
  swap(applicationinstanceid_, other->applicationinstanceid_);
  swap(registertime_, other->registertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationInstanceRecover::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplicationInstanceHeartbeat::InitAsDefaultInstance() {
}
class ApplicationInstanceHeartbeat::_Internal {
 public:
};

ApplicationInstanceHeartbeat::ApplicationInstanceHeartbeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ApplicationInstanceHeartbeat)
}
ApplicationInstanceHeartbeat::ApplicationInstanceHeartbeat(const ApplicationInstanceHeartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heartbeattime_, &from.heartbeattime_,
    static_cast<size_t>(reinterpret_cast<char*>(&applicationinstanceid_) -
    reinterpret_cast<char*>(&heartbeattime_)) + sizeof(applicationinstanceid_));
  // @@protoc_insertion_point(copy_constructor:ApplicationInstanceHeartbeat)
}

void ApplicationInstanceHeartbeat::SharedCtor() {
  ::memset(&heartbeattime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applicationinstanceid_) -
      reinterpret_cast<char*>(&heartbeattime_)) + sizeof(applicationinstanceid_));
}

ApplicationInstanceHeartbeat::~ApplicationInstanceHeartbeat() {
  // @@protoc_insertion_point(destructor:ApplicationInstanceHeartbeat)
  SharedDtor();
}

void ApplicationInstanceHeartbeat::SharedDtor() {
}

void ApplicationInstanceHeartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationInstanceHeartbeat& ApplicationInstanceHeartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationInstanceHeartbeat_language_2dagent_2fDiscoveryService_2eproto.base);
  return *internal_default_instance();
}


void ApplicationInstanceHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:ApplicationInstanceHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heartbeattime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applicationinstanceid_) -
      reinterpret_cast<char*>(&heartbeattime_)) + sizeof(applicationinstanceid_));
  _internal_metadata_.Clear();
}

const char* ApplicationInstanceHeartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 applicationInstanceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          applicationinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 heartbeatTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          heartbeattime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationInstanceHeartbeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ApplicationInstanceHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 applicationInstanceId = 1;
  if (this->applicationinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_applicationinstanceid(), target);
  }

  // int64 heartbeatTime = 2;
  if (this->heartbeattime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_heartbeattime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ApplicationInstanceHeartbeat)
  return target;
}

size_t ApplicationInstanceHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ApplicationInstanceHeartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 heartbeatTime = 2;
  if (this->heartbeattime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_heartbeattime());
  }

  // int32 applicationInstanceId = 1;
  if (this->applicationinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applicationinstanceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationInstanceHeartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ApplicationInstanceHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationInstanceHeartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationInstanceHeartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ApplicationInstanceHeartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ApplicationInstanceHeartbeat)
    MergeFrom(*source);
  }
}

void ApplicationInstanceHeartbeat::MergeFrom(const ApplicationInstanceHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ApplicationInstanceHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.heartbeattime() != 0) {
    _internal_set_heartbeattime(from._internal_heartbeattime());
  }
  if (from.applicationinstanceid() != 0) {
    _internal_set_applicationinstanceid(from._internal_applicationinstanceid());
  }
}

void ApplicationInstanceHeartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ApplicationInstanceHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationInstanceHeartbeat::CopyFrom(const ApplicationInstanceHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ApplicationInstanceHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationInstanceHeartbeat::IsInitialized() const {
  return true;
}

void ApplicationInstanceHeartbeat::InternalSwap(ApplicationInstanceHeartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(heartbeattime_, other->heartbeattime_);
  swap(applicationinstanceid_, other->applicationinstanceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationInstanceHeartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OSInfo::InitAsDefaultInstance() {
}
class OSInfo::_Internal {
 public:
};

OSInfo::OSInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OSInfo)
}
OSInfo::OSInfo(const OSInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ipv4s_(from.ipv4s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  osname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_osname().empty()) {
    osname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.osname_);
  }
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  processno_ = from.processno_;
  // @@protoc_insertion_point(copy_constructor:OSInfo)
}

void OSInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OSInfo_language_2dagent_2fDiscoveryService_2eproto.base);
  osname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processno_ = 0;
}

OSInfo::~OSInfo() {
  // @@protoc_insertion_point(destructor:OSInfo)
  SharedDtor();
}

void OSInfo::SharedDtor() {
  osname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OSInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OSInfo& OSInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OSInfo_language_2dagent_2fDiscoveryService_2eproto.base);
  return *internal_default_instance();
}


void OSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OSInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipv4s_.Clear();
  osname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processno_ = 0;
  _internal_metadata_.Clear();
}

const char* OSInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string osName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_osname(), ptr, ctx, "OSInfo.osName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_hostname(), ptr, ctx, "OSInfo.hostname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 processNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          processno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ipv4s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_ipv4s(), ptr, ctx, "OSInfo.ipv4s");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OSInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string osName = 1;
  if (this->osname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_osname().data(), static_cast<int>(this->_internal_osname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OSInfo.osName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_osname(), target);
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OSInfo.hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // int32 processNo = 3;
  if (this->processno() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_processno(), target);
  }

  // repeated string ipv4s = 4;
  for (int i = 0, n = this->_internal_ipv4s_size(); i < n; i++) {
    const auto& s = this->_internal_ipv4s(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OSInfo.ipv4s");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSInfo)
  return target;
}

size_t OSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ipv4s = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ipv4s_.size());
  for (int i = 0, n = ipv4s_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ipv4s_.Get(i));
  }

  // string osName = 1;
  if (this->osname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_osname());
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // int32 processNo = 3;
  if (this->processno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_processno());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OSInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OSInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OSInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OSInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OSInfo)
    MergeFrom(*source);
  }
}

void OSInfo::MergeFrom(const OSInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ipv4s_.MergeFrom(from.ipv4s_);
  if (from.osname().size() > 0) {

    osname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.osname_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.processno() != 0) {
    _internal_set_processno(from._internal_processno());
  }
}

void OSInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OSInfo::CopyFrom(const OSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OSInfo::IsInitialized() const {
  return true;
}

void OSInfo::InternalSwap(OSInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ipv4s_.InternalSwap(&other->ipv4s_);
  osname_.Swap(&other->osname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(processno_, other->processno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OSInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceNameCollection::InitAsDefaultInstance() {
}
class ServiceNameCollection::_Internal {
 public:
};

ServiceNameCollection::ServiceNameCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceNameCollection)
}
ServiceNameCollection::ServiceNameCollection(const ServiceNameCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServiceNameCollection)
}

void ServiceNameCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceNameCollection_language_2dagent_2fDiscoveryService_2eproto.base);
}

ServiceNameCollection::~ServiceNameCollection() {
  // @@protoc_insertion_point(destructor:ServiceNameCollection)
  SharedDtor();
}

void ServiceNameCollection::SharedDtor() {
}

void ServiceNameCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceNameCollection& ServiceNameCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceNameCollection_language_2dagent_2fDiscoveryService_2eproto.base);
  return *internal_default_instance();
}


void ServiceNameCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceNameCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

const char* ServiceNameCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ServiceNameElement elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceNameCollection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceNameCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServiceNameElement elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceNameCollection)
  return target;
}

size_t ServiceNameCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceNameCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServiceNameElement elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceNameCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceNameCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceNameCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceNameCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceNameCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceNameCollection)
    MergeFrom(*source);
  }
}

void ServiceNameCollection::MergeFrom(const ServiceNameCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceNameCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void ServiceNameCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceNameCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceNameCollection::CopyFrom(const ServiceNameCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceNameCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceNameCollection::IsInitialized() const {
  return true;
}

void ServiceNameCollection::InternalSwap(ServiceNameCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceNameCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceNameMappingCollection::InitAsDefaultInstance() {
}
class ServiceNameMappingCollection::_Internal {
 public:
};

ServiceNameMappingCollection::ServiceNameMappingCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceNameMappingCollection)
}
ServiceNameMappingCollection::ServiceNameMappingCollection(const ServiceNameMappingCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServiceNameMappingCollection)
}

void ServiceNameMappingCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceNameMappingCollection_language_2dagent_2fDiscoveryService_2eproto.base);
}

ServiceNameMappingCollection::~ServiceNameMappingCollection() {
  // @@protoc_insertion_point(destructor:ServiceNameMappingCollection)
  SharedDtor();
}

void ServiceNameMappingCollection::SharedDtor() {
}

void ServiceNameMappingCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceNameMappingCollection& ServiceNameMappingCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceNameMappingCollection_language_2dagent_2fDiscoveryService_2eproto.base);
  return *internal_default_instance();
}


void ServiceNameMappingCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceNameMappingCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

const char* ServiceNameMappingCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ServiceNameMappingElement elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceNameMappingCollection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceNameMappingCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServiceNameMappingElement elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceNameMappingCollection)
  return target;
}

size_t ServiceNameMappingCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceNameMappingCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServiceNameMappingElement elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceNameMappingCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceNameMappingCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceNameMappingCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceNameMappingCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceNameMappingCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceNameMappingCollection)
    MergeFrom(*source);
  }
}

void ServiceNameMappingCollection::MergeFrom(const ServiceNameMappingCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceNameMappingCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void ServiceNameMappingCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceNameMappingCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceNameMappingCollection::CopyFrom(const ServiceNameMappingCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceNameMappingCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceNameMappingCollection::IsInitialized() const {
  return true;
}

void ServiceNameMappingCollection::InternalSwap(ServiceNameMappingCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceNameMappingCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceNameMappingElement::InitAsDefaultInstance() {
  ::_ServiceNameMappingElement_default_instance_._instance.get_mutable()->element_ = const_cast< ::ServiceNameElement*>(
      ::ServiceNameElement::internal_default_instance());
}
class ServiceNameMappingElement::_Internal {
 public:
  static const ::ServiceNameElement& element(const ServiceNameMappingElement* msg);
};

const ::ServiceNameElement&
ServiceNameMappingElement::_Internal::element(const ServiceNameMappingElement* msg) {
  return *msg->element_;
}
ServiceNameMappingElement::ServiceNameMappingElement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceNameMappingElement)
}
ServiceNameMappingElement::ServiceNameMappingElement(const ServiceNameMappingElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_element()) {
    element_ = new ::ServiceNameElement(*from.element_);
  } else {
    element_ = nullptr;
  }
  serviceid_ = from.serviceid_;
  // @@protoc_insertion_point(copy_constructor:ServiceNameMappingElement)
}

void ServiceNameMappingElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceNameMappingElement_language_2dagent_2fDiscoveryService_2eproto.base);
  ::memset(&element_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serviceid_) -
      reinterpret_cast<char*>(&element_)) + sizeof(serviceid_));
}

ServiceNameMappingElement::~ServiceNameMappingElement() {
  // @@protoc_insertion_point(destructor:ServiceNameMappingElement)
  SharedDtor();
}

void ServiceNameMappingElement::SharedDtor() {
  if (this != internal_default_instance()) delete element_;
}

void ServiceNameMappingElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceNameMappingElement& ServiceNameMappingElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceNameMappingElement_language_2dagent_2fDiscoveryService_2eproto.base);
  return *internal_default_instance();
}


void ServiceNameMappingElement::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceNameMappingElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && element_ != nullptr) {
    delete element_;
  }
  element_ = nullptr;
  serviceid_ = 0;
  _internal_metadata_.Clear();
}

const char* ServiceNameMappingElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServiceNameElement element = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_element(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceNameMappingElement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceNameMappingElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serviceid(), target);
  }

  // .ServiceNameElement element = 2;
  if (this->has_element()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::element(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceNameMappingElement)
  return target;
}

size_t ServiceNameMappingElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceNameMappingElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServiceNameElement element = 2;
  if (this->has_element()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *element_);
  }

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceNameMappingElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceNameMappingElement)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceNameMappingElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceNameMappingElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceNameMappingElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceNameMappingElement)
    MergeFrom(*source);
  }
}

void ServiceNameMappingElement::MergeFrom(const ServiceNameMappingElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceNameMappingElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_element()) {
    _internal_mutable_element()->::ServiceNameElement::MergeFrom(from._internal_element());
  }
  if (from.serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
}

void ServiceNameMappingElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceNameMappingElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceNameMappingElement::CopyFrom(const ServiceNameMappingElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceNameMappingElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceNameMappingElement::IsInitialized() const {
  return true;
}

void ServiceNameMappingElement::InternalSwap(ServiceNameMappingElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(element_, other->element_);
  swap(serviceid_, other->serviceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceNameMappingElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceNameElement::InitAsDefaultInstance() {
}
class ServiceNameElement::_Internal {
 public:
};

ServiceNameElement::ServiceNameElement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceNameElement)
}
ServiceNameElement::ServiceNameElement(const ServiceNameElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.servicename_);
  }
  ::memcpy(&applicationid_, &from.applicationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&srcspantype_) -
    reinterpret_cast<char*>(&applicationid_)) + sizeof(srcspantype_));
  // @@protoc_insertion_point(copy_constructor:ServiceNameElement)
}

void ServiceNameElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceNameElement_language_2dagent_2fDiscoveryService_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srcspantype_) -
      reinterpret_cast<char*>(&applicationid_)) + sizeof(srcspantype_));
}

ServiceNameElement::~ServiceNameElement() {
  // @@protoc_insertion_point(destructor:ServiceNameElement)
  SharedDtor();
}

void ServiceNameElement::SharedDtor() {
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceNameElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceNameElement& ServiceNameElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceNameElement_language_2dagent_2fDiscoveryService_2eproto.base);
  return *internal_default_instance();
}


void ServiceNameElement::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceNameElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicationid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srcspantype_) -
      reinterpret_cast<char*>(&applicationid_)) + sizeof(srcspantype_));
  _internal_metadata_.Clear();
}

const char* ServiceNameElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_servicename(), ptr, ctx, "ServiceNameElement.serviceName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 applicationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          applicationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpanType srcSpanType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_srcspantype(static_cast<::SpanType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceNameElement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceNameElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceNameElement.serviceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  // int32 applicationId = 2;
  if (this->applicationid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_applicationid(), target);
  }

  // .SpanType srcSpanType = 3;
  if (this->srcspantype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_srcspantype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceNameElement)
  return target;
}

size_t ServiceNameElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceNameElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // int32 applicationId = 2;
  if (this->applicationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_applicationid());
  }

  // .SpanType srcSpanType = 3;
  if (this->srcspantype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_srcspantype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceNameElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceNameElement)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceNameElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceNameElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceNameElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceNameElement)
    MergeFrom(*source);
  }
}

void ServiceNameElement::MergeFrom(const ServiceNameElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceNameElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicename().size() > 0) {

    servicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.servicename_);
  }
  if (from.applicationid() != 0) {
    _internal_set_applicationid(from._internal_applicationid());
  }
  if (from.srcspantype() != 0) {
    _internal_set_srcspantype(from._internal_srcspantype());
  }
}

void ServiceNameElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceNameElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceNameElement::CopyFrom(const ServiceNameElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceNameElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceNameElement::IsInitialized() const {
  return true;
}

void ServiceNameElement::InternalSwap(ServiceNameElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(applicationid_, other->applicationid_);
  swap(srcspantype_, other->srcspantype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceNameElement::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ApplicationInstance* Arena::CreateMaybeMessage< ::ApplicationInstance >(Arena* arena) {
  return Arena::CreateInternal< ::ApplicationInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::ApplicationInstanceMapping* Arena::CreateMaybeMessage< ::ApplicationInstanceMapping >(Arena* arena) {
  return Arena::CreateInternal< ::ApplicationInstanceMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::ApplicationInstanceRecover* Arena::CreateMaybeMessage< ::ApplicationInstanceRecover >(Arena* arena) {
  return Arena::CreateInternal< ::ApplicationInstanceRecover >(arena);
}
template<> PROTOBUF_NOINLINE ::ApplicationInstanceHeartbeat* Arena::CreateMaybeMessage< ::ApplicationInstanceHeartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::ApplicationInstanceHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::OSInfo* Arena::CreateMaybeMessage< ::OSInfo >(Arena* arena) {
  return Arena::CreateInternal< ::OSInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceNameCollection* Arena::CreateMaybeMessage< ::ServiceNameCollection >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceNameCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceNameMappingCollection* Arena::CreateMaybeMessage< ::ServiceNameMappingCollection >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceNameMappingCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceNameMappingElement* Arena::CreateMaybeMessage< ::ServiceNameMappingElement >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceNameMappingElement >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceNameElement* Arena::CreateMaybeMessage< ::ServiceNameElement >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceNameElement >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
