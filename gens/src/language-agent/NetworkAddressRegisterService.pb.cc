// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent/NetworkAddressRegisterService.proto

#include "language-agent/NetworkAddressRegisterService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fKeyWithIntegerValue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyWithIntegerValue_language_2dagent_2fKeyWithIntegerValue_2eproto;
class NetworkAddressesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkAddresses> _instance;
} _NetworkAddresses_default_instance_;
class NetworkAddressMappingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkAddressMappings> _instance;
} _NetworkAddressMappings_default_instance_;
static void InitDefaultsscc_info_NetworkAddressMappings_language_2dagent_2fNetworkAddressRegisterService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetworkAddressMappings_default_instance_;
    new (ptr) ::NetworkAddressMappings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetworkAddressMappings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkAddressMappings_language_2dagent_2fNetworkAddressRegisterService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetworkAddressMappings_language_2dagent_2fNetworkAddressRegisterService_2eproto}, {
      &scc_info_KeyWithIntegerValue_language_2dagent_2fKeyWithIntegerValue_2eproto.base,}};

static void InitDefaultsscc_info_NetworkAddresses_language_2dagent_2fNetworkAddressRegisterService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetworkAddresses_default_instance_;
    new (ptr) ::NetworkAddresses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetworkAddresses::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkAddresses_language_2dagent_2fNetworkAddressRegisterService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkAddresses_language_2dagent_2fNetworkAddressRegisterService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_language_2dagent_2fNetworkAddressRegisterService_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_language_2dagent_2fNetworkAddressRegisterService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_language_2dagent_2fNetworkAddressRegisterService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_language_2dagent_2fNetworkAddressRegisterService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkAddresses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetworkAddresses, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetworkAddressMappings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetworkAddressMappings, addressids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NetworkAddresses)},
  { 6, -1, sizeof(::NetworkAddressMappings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetworkAddresses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetworkAddressMappings_default_instance_),
};

const char descriptor_table_protodef_language_2dagent_2fNetworkAddressRegisterService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2language-agent/NetworkAddressRegisterS"
  "ervice.proto\032(language-agent/KeyWithInte"
  "gerValue.proto\"%\n\020NetworkAddresses\022\021\n\tad"
  "dresses\030\001 \003(\t\"B\n\026NetworkAddressMappings\022"
  "(\n\naddressIds\030\001 \003(\0132\024.KeyWithIntegerValu"
  "e2^\n\035NetworkAddressRegisterService\022=\n\rba"
  "tchRegister\022\021.NetworkAddresses\032\027.Network"
  "AddressMappings\"\000BQ\n0org.apache.skywalki"
  "ng.apm.network.language.agentP\001\252\002\032SkyWal"
  "king.NetworkProtocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto_deps[1] = {
  &::descriptor_table_language_2dagent_2fKeyWithIntegerValue_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto_sccs[2] = {
  &scc_info_NetworkAddressMappings_language_2dagent_2fNetworkAddressRegisterService_2eproto.base,
  &scc_info_NetworkAddresses_language_2dagent_2fNetworkAddressRegisterService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto_once;
static bool descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto = {
  &descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto_initialized, descriptor_table_protodef_language_2dagent_2fNetworkAddressRegisterService_2eproto, "language-agent/NetworkAddressRegisterService.proto", 388,
  &descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto_once, descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto_sccs, descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_language_2dagent_2fNetworkAddressRegisterService_2eproto::offsets,
  file_level_metadata_language_2dagent_2fNetworkAddressRegisterService_2eproto, 2, file_level_enum_descriptors_language_2dagent_2fNetworkAddressRegisterService_2eproto, file_level_service_descriptors_language_2dagent_2fNetworkAddressRegisterService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_language_2dagent_2fNetworkAddressRegisterService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto), true);

// ===================================================================

void NetworkAddresses::InitAsDefaultInstance() {
}
class NetworkAddresses::_Internal {
 public:
};

NetworkAddresses::NetworkAddresses()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetworkAddresses)
}
NetworkAddresses::NetworkAddresses(const NetworkAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetworkAddresses)
}

void NetworkAddresses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkAddresses_language_2dagent_2fNetworkAddressRegisterService_2eproto.base);
}

NetworkAddresses::~NetworkAddresses() {
  // @@protoc_insertion_point(destructor:NetworkAddresses)
  SharedDtor();
}

void NetworkAddresses::SharedDtor() {
}

void NetworkAddresses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkAddresses& NetworkAddresses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkAddresses_language_2dagent_2fNetworkAddressRegisterService_2eproto.base);
  return *internal_default_instance();
}


void NetworkAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  _internal_metadata_.Clear();
}

const char* NetworkAddresses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_addresses(), ptr, ctx, "NetworkAddresses.addresses");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkAddresses::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addresses = 1;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetworkAddresses.addresses");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkAddresses)
  return target;
}

size_t NetworkAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkAddresses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkAddresses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkAddresses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkAddresses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkAddresses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkAddresses)
    MergeFrom(*source);
  }
}

void NetworkAddresses::MergeFrom(const NetworkAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
}

void NetworkAddresses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkAddresses::CopyFrom(const NetworkAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkAddresses::IsInitialized() const {
  return true;
}

void NetworkAddresses::InternalSwap(NetworkAddresses* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkAddresses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkAddressMappings::InitAsDefaultInstance() {
}
class NetworkAddressMappings::_Internal {
 public:
};

void NetworkAddressMappings::clear_addressids() {
  addressids_.Clear();
}
NetworkAddressMappings::NetworkAddressMappings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetworkAddressMappings)
}
NetworkAddressMappings::NetworkAddressMappings(const NetworkAddressMappings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addressids_(from.addressids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetworkAddressMappings)
}

void NetworkAddressMappings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkAddressMappings_language_2dagent_2fNetworkAddressRegisterService_2eproto.base);
}

NetworkAddressMappings::~NetworkAddressMappings() {
  // @@protoc_insertion_point(destructor:NetworkAddressMappings)
  SharedDtor();
}

void NetworkAddressMappings::SharedDtor() {
}

void NetworkAddressMappings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkAddressMappings& NetworkAddressMappings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkAddressMappings_language_2dagent_2fNetworkAddressRegisterService_2eproto.base);
  return *internal_default_instance();
}


void NetworkAddressMappings::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkAddressMappings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addressids_.Clear();
  _internal_metadata_.Clear();
}

const char* NetworkAddressMappings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KeyWithIntegerValue addressIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addressids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkAddressMappings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkAddressMappings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KeyWithIntegerValue addressIds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addressids_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_addressids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkAddressMappings)
  return target;
}

size_t NetworkAddressMappings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkAddressMappings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KeyWithIntegerValue addressIds = 1;
  total_size += 1UL * this->_internal_addressids_size();
  for (const auto& msg : this->addressids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkAddressMappings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkAddressMappings)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkAddressMappings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkAddressMappings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkAddressMappings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkAddressMappings)
    MergeFrom(*source);
  }
}

void NetworkAddressMappings::MergeFrom(const NetworkAddressMappings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkAddressMappings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addressids_.MergeFrom(from.addressids_);
}

void NetworkAddressMappings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkAddressMappings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkAddressMappings::CopyFrom(const NetworkAddressMappings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkAddressMappings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkAddressMappings::IsInitialized() const {
  return true;
}

void NetworkAddressMappings::InternalSwap(NetworkAddressMappings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addressids_.InternalSwap(&other->addressids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkAddressMappings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetworkAddresses* Arena::CreateMaybeMessage< ::NetworkAddresses >(Arena* arena) {
  return Arena::CreateInternal< ::NetworkAddresses >(arena);
}
template<> PROTOBUF_NOINLINE ::NetworkAddressMappings* Arena::CreateMaybeMessage< ::NetworkAddressMappings >(Arena* arena) {
  return Arena::CreateInternal< ::NetworkAddressMappings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
