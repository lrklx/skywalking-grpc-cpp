// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent/DiscoveryService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fDiscoveryService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fDiscoveryService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "language-agent/Downstream.pb.h"
#include "common/trace-common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fDiscoveryService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_language_2dagent_2fDiscoveryService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2fDiscoveryService_2eproto;
class ApplicationInstance;
class ApplicationInstanceDefaultTypeInternal;
extern ApplicationInstanceDefaultTypeInternal _ApplicationInstance_default_instance_;
class ApplicationInstanceHeartbeat;
class ApplicationInstanceHeartbeatDefaultTypeInternal;
extern ApplicationInstanceHeartbeatDefaultTypeInternal _ApplicationInstanceHeartbeat_default_instance_;
class ApplicationInstanceMapping;
class ApplicationInstanceMappingDefaultTypeInternal;
extern ApplicationInstanceMappingDefaultTypeInternal _ApplicationInstanceMapping_default_instance_;
class ApplicationInstanceRecover;
class ApplicationInstanceRecoverDefaultTypeInternal;
extern ApplicationInstanceRecoverDefaultTypeInternal _ApplicationInstanceRecover_default_instance_;
class OSInfo;
class OSInfoDefaultTypeInternal;
extern OSInfoDefaultTypeInternal _OSInfo_default_instance_;
class ServiceNameCollection;
class ServiceNameCollectionDefaultTypeInternal;
extern ServiceNameCollectionDefaultTypeInternal _ServiceNameCollection_default_instance_;
class ServiceNameElement;
class ServiceNameElementDefaultTypeInternal;
extern ServiceNameElementDefaultTypeInternal _ServiceNameElement_default_instance_;
class ServiceNameMappingCollection;
class ServiceNameMappingCollectionDefaultTypeInternal;
extern ServiceNameMappingCollectionDefaultTypeInternal _ServiceNameMappingCollection_default_instance_;
class ServiceNameMappingElement;
class ServiceNameMappingElementDefaultTypeInternal;
extern ServiceNameMappingElementDefaultTypeInternal _ServiceNameMappingElement_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ApplicationInstance* Arena::CreateMaybeMessage<::ApplicationInstance>(Arena*);
template<> ::ApplicationInstanceHeartbeat* Arena::CreateMaybeMessage<::ApplicationInstanceHeartbeat>(Arena*);
template<> ::ApplicationInstanceMapping* Arena::CreateMaybeMessage<::ApplicationInstanceMapping>(Arena*);
template<> ::ApplicationInstanceRecover* Arena::CreateMaybeMessage<::ApplicationInstanceRecover>(Arena*);
template<> ::OSInfo* Arena::CreateMaybeMessage<::OSInfo>(Arena*);
template<> ::ServiceNameCollection* Arena::CreateMaybeMessage<::ServiceNameCollection>(Arena*);
template<> ::ServiceNameElement* Arena::CreateMaybeMessage<::ServiceNameElement>(Arena*);
template<> ::ServiceNameMappingCollection* Arena::CreateMaybeMessage<::ServiceNameMappingCollection>(Arena*);
template<> ::ServiceNameMappingElement* Arena::CreateMaybeMessage<::ServiceNameMappingElement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ApplicationInstance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ApplicationInstance) */ {
 public:
  ApplicationInstance();
  virtual ~ApplicationInstance();

  ApplicationInstance(const ApplicationInstance& from);
  ApplicationInstance(ApplicationInstance&& from) noexcept
    : ApplicationInstance() {
    *this = ::std::move(from);
  }

  inline ApplicationInstance& operator=(const ApplicationInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationInstance& operator=(ApplicationInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationInstance* internal_default_instance() {
    return reinterpret_cast<const ApplicationInstance*>(
               &_ApplicationInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApplicationInstance& a, ApplicationInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationInstance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationInstance* New() const final {
    return CreateMaybeMessage<ApplicationInstance>(nullptr);
  }

  ApplicationInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationInstance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationInstance& from);
  void MergeFrom(const ApplicationInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ApplicationInstance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fDiscoveryService_2eproto);
    return ::descriptor_table_language_2dagent_2fDiscoveryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentUUIDFieldNumber = 2,
    kOsinfoFieldNumber = 4,
    kRegisterTimeFieldNumber = 3,
    kApplicationIdFieldNumber = 1,
  };
  // string agentUUID = 2;
  void clear_agentuuid();
  const std::string& agentuuid() const;
  void set_agentuuid(const std::string& value);
  void set_agentuuid(std::string&& value);
  void set_agentuuid(const char* value);
  void set_agentuuid(const char* value, size_t size);
  std::string* mutable_agentuuid();
  std::string* release_agentuuid();
  void set_allocated_agentuuid(std::string* agentuuid);
  private:
  const std::string& _internal_agentuuid() const;
  void _internal_set_agentuuid(const std::string& value);
  std::string* _internal_mutable_agentuuid();
  public:

  // .OSInfo osinfo = 4;
  bool has_osinfo() const;
  private:
  bool _internal_has_osinfo() const;
  public:
  void clear_osinfo();
  const ::OSInfo& osinfo() const;
  ::OSInfo* release_osinfo();
  ::OSInfo* mutable_osinfo();
  void set_allocated_osinfo(::OSInfo* osinfo);
  private:
  const ::OSInfo& _internal_osinfo() const;
  ::OSInfo* _internal_mutable_osinfo();
  public:

  // int64 registerTime = 3;
  void clear_registertime();
  ::PROTOBUF_NAMESPACE_ID::int64 registertime() const;
  void set_registertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_registertime() const;
  void _internal_set_registertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 applicationId = 1;
  void clear_applicationid();
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid() const;
  void set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_applicationid() const;
  void _internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ApplicationInstance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agentuuid_;
  ::OSInfo* osinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 registertime_;
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fDiscoveryService_2eproto;
};
// -------------------------------------------------------------------

class ApplicationInstanceMapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ApplicationInstanceMapping) */ {
 public:
  ApplicationInstanceMapping();
  virtual ~ApplicationInstanceMapping();

  ApplicationInstanceMapping(const ApplicationInstanceMapping& from);
  ApplicationInstanceMapping(ApplicationInstanceMapping&& from) noexcept
    : ApplicationInstanceMapping() {
    *this = ::std::move(from);
  }

  inline ApplicationInstanceMapping& operator=(const ApplicationInstanceMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationInstanceMapping& operator=(ApplicationInstanceMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationInstanceMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationInstanceMapping* internal_default_instance() {
    return reinterpret_cast<const ApplicationInstanceMapping*>(
               &_ApplicationInstanceMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApplicationInstanceMapping& a, ApplicationInstanceMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationInstanceMapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationInstanceMapping* New() const final {
    return CreateMaybeMessage<ApplicationInstanceMapping>(nullptr);
  }

  ApplicationInstanceMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationInstanceMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationInstanceMapping& from);
  void MergeFrom(const ApplicationInstanceMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationInstanceMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ApplicationInstanceMapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fDiscoveryService_2eproto);
    return ::descriptor_table_language_2dagent_2fDiscoveryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kApplicationInstanceIdFieldNumber = 2,
  };
  // int32 applicationId = 1;
  void clear_applicationid();
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid() const;
  void set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_applicationid() const;
  void _internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 applicationInstanceId = 2;
  void clear_applicationinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 applicationinstanceid() const;
  void set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_applicationinstanceid() const;
  void _internal_set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ApplicationInstanceMapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid_;
  ::PROTOBUF_NAMESPACE_ID::int32 applicationinstanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fDiscoveryService_2eproto;
};
// -------------------------------------------------------------------

class ApplicationInstanceRecover :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ApplicationInstanceRecover) */ {
 public:
  ApplicationInstanceRecover();
  virtual ~ApplicationInstanceRecover();

  ApplicationInstanceRecover(const ApplicationInstanceRecover& from);
  ApplicationInstanceRecover(ApplicationInstanceRecover&& from) noexcept
    : ApplicationInstanceRecover() {
    *this = ::std::move(from);
  }

  inline ApplicationInstanceRecover& operator=(const ApplicationInstanceRecover& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationInstanceRecover& operator=(ApplicationInstanceRecover&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationInstanceRecover& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationInstanceRecover* internal_default_instance() {
    return reinterpret_cast<const ApplicationInstanceRecover*>(
               &_ApplicationInstanceRecover_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ApplicationInstanceRecover& a, ApplicationInstanceRecover& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationInstanceRecover* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationInstanceRecover* New() const final {
    return CreateMaybeMessage<ApplicationInstanceRecover>(nullptr);
  }

  ApplicationInstanceRecover* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationInstanceRecover>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationInstanceRecover& from);
  void MergeFrom(const ApplicationInstanceRecover& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationInstanceRecover* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ApplicationInstanceRecover";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fDiscoveryService_2eproto);
    return ::descriptor_table_language_2dagent_2fDiscoveryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsinfoFieldNumber = 4,
    kApplicationIdFieldNumber = 1,
    kApplicationInstanceIdFieldNumber = 2,
    kRegisterTimeFieldNumber = 3,
  };
  // .OSInfo osinfo = 4;
  bool has_osinfo() const;
  private:
  bool _internal_has_osinfo() const;
  public:
  void clear_osinfo();
  const ::OSInfo& osinfo() const;
  ::OSInfo* release_osinfo();
  ::OSInfo* mutable_osinfo();
  void set_allocated_osinfo(::OSInfo* osinfo);
  private:
  const ::OSInfo& _internal_osinfo() const;
  ::OSInfo* _internal_mutable_osinfo();
  public:

  // int32 applicationId = 1;
  void clear_applicationid();
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid() const;
  void set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_applicationid() const;
  void _internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 applicationInstanceId = 2;
  void clear_applicationinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 applicationinstanceid() const;
  void set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_applicationinstanceid() const;
  void _internal_set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 registerTime = 3;
  void clear_registertime();
  ::PROTOBUF_NAMESPACE_ID::int64 registertime() const;
  void set_registertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_registertime() const;
  void _internal_set_registertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ApplicationInstanceRecover)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OSInfo* osinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid_;
  ::PROTOBUF_NAMESPACE_ID::int32 applicationinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::int64 registertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fDiscoveryService_2eproto;
};
// -------------------------------------------------------------------

class ApplicationInstanceHeartbeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ApplicationInstanceHeartbeat) */ {
 public:
  ApplicationInstanceHeartbeat();
  virtual ~ApplicationInstanceHeartbeat();

  ApplicationInstanceHeartbeat(const ApplicationInstanceHeartbeat& from);
  ApplicationInstanceHeartbeat(ApplicationInstanceHeartbeat&& from) noexcept
    : ApplicationInstanceHeartbeat() {
    *this = ::std::move(from);
  }

  inline ApplicationInstanceHeartbeat& operator=(const ApplicationInstanceHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationInstanceHeartbeat& operator=(ApplicationInstanceHeartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationInstanceHeartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationInstanceHeartbeat* internal_default_instance() {
    return reinterpret_cast<const ApplicationInstanceHeartbeat*>(
               &_ApplicationInstanceHeartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ApplicationInstanceHeartbeat& a, ApplicationInstanceHeartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationInstanceHeartbeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationInstanceHeartbeat* New() const final {
    return CreateMaybeMessage<ApplicationInstanceHeartbeat>(nullptr);
  }

  ApplicationInstanceHeartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationInstanceHeartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationInstanceHeartbeat& from);
  void MergeFrom(const ApplicationInstanceHeartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationInstanceHeartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ApplicationInstanceHeartbeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fDiscoveryService_2eproto);
    return ::descriptor_table_language_2dagent_2fDiscoveryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatTimeFieldNumber = 2,
    kApplicationInstanceIdFieldNumber = 1,
  };
  // int64 heartbeatTime = 2;
  void clear_heartbeattime();
  ::PROTOBUF_NAMESPACE_ID::int64 heartbeattime() const;
  void set_heartbeattime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_heartbeattime() const;
  void _internal_set_heartbeattime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 applicationInstanceId = 1;
  void clear_applicationinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 applicationinstanceid() const;
  void set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_applicationinstanceid() const;
  void _internal_set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ApplicationInstanceHeartbeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 heartbeattime_;
  ::PROTOBUF_NAMESPACE_ID::int32 applicationinstanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fDiscoveryService_2eproto;
};
// -------------------------------------------------------------------

class OSInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OSInfo) */ {
 public:
  OSInfo();
  virtual ~OSInfo();

  OSInfo(const OSInfo& from);
  OSInfo(OSInfo&& from) noexcept
    : OSInfo() {
    *this = ::std::move(from);
  }

  inline OSInfo& operator=(const OSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OSInfo& operator=(OSInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OSInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OSInfo* internal_default_instance() {
    return reinterpret_cast<const OSInfo*>(
               &_OSInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OSInfo& a, OSInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OSInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OSInfo* New() const final {
    return CreateMaybeMessage<OSInfo>(nullptr);
  }

  OSInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OSInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OSInfo& from);
  void MergeFrom(const OSInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OSInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OSInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fDiscoveryService_2eproto);
    return ::descriptor_table_language_2dagent_2fDiscoveryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpv4SFieldNumber = 4,
    kOsNameFieldNumber = 1,
    kHostnameFieldNumber = 2,
    kProcessNoFieldNumber = 3,
  };
  // repeated string ipv4s = 4;
  int ipv4s_size() const;
  private:
  int _internal_ipv4s_size() const;
  public:
  void clear_ipv4s();
  const std::string& ipv4s(int index) const;
  std::string* mutable_ipv4s(int index);
  void set_ipv4s(int index, const std::string& value);
  void set_ipv4s(int index, std::string&& value);
  void set_ipv4s(int index, const char* value);
  void set_ipv4s(int index, const char* value, size_t size);
  std::string* add_ipv4s();
  void add_ipv4s(const std::string& value);
  void add_ipv4s(std::string&& value);
  void add_ipv4s(const char* value);
  void add_ipv4s(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ipv4s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ipv4s();
  private:
  const std::string& _internal_ipv4s(int index) const;
  std::string* _internal_add_ipv4s();
  public:

  // string osName = 1;
  void clear_osname();
  const std::string& osname() const;
  void set_osname(const std::string& value);
  void set_osname(std::string&& value);
  void set_osname(const char* value);
  void set_osname(const char* value, size_t size);
  std::string* mutable_osname();
  std::string* release_osname();
  void set_allocated_osname(std::string* osname);
  private:
  const std::string& _internal_osname() const;
  void _internal_set_osname(const std::string& value);
  std::string* _internal_mutable_osname();
  public:

  // string hostname = 2;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // int32 processNo = 3;
  void clear_processno();
  ::PROTOBUF_NAMESPACE_ID::int32 processno() const;
  void set_processno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processno() const;
  void _internal_set_processno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OSInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ipv4s_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::int32 processno_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fDiscoveryService_2eproto;
};
// -------------------------------------------------------------------

class ServiceNameCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceNameCollection) */ {
 public:
  ServiceNameCollection();
  virtual ~ServiceNameCollection();

  ServiceNameCollection(const ServiceNameCollection& from);
  ServiceNameCollection(ServiceNameCollection&& from) noexcept
    : ServiceNameCollection() {
    *this = ::std::move(from);
  }

  inline ServiceNameCollection& operator=(const ServiceNameCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceNameCollection& operator=(ServiceNameCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceNameCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceNameCollection* internal_default_instance() {
    return reinterpret_cast<const ServiceNameCollection*>(
               &_ServiceNameCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServiceNameCollection& a, ServiceNameCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceNameCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceNameCollection* New() const final {
    return CreateMaybeMessage<ServiceNameCollection>(nullptr);
  }

  ServiceNameCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceNameCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceNameCollection& from);
  void MergeFrom(const ServiceNameCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceNameCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceNameCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fDiscoveryService_2eproto);
    return ::descriptor_table_language_2dagent_2fDiscoveryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .ServiceNameElement elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::ServiceNameElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameElement >*
      mutable_elements();
  private:
  const ::ServiceNameElement& _internal_elements(int index) const;
  ::ServiceNameElement* _internal_add_elements();
  public:
  const ::ServiceNameElement& elements(int index) const;
  ::ServiceNameElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ServiceNameCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameElement > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fDiscoveryService_2eproto;
};
// -------------------------------------------------------------------

class ServiceNameMappingCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceNameMappingCollection) */ {
 public:
  ServiceNameMappingCollection();
  virtual ~ServiceNameMappingCollection();

  ServiceNameMappingCollection(const ServiceNameMappingCollection& from);
  ServiceNameMappingCollection(ServiceNameMappingCollection&& from) noexcept
    : ServiceNameMappingCollection() {
    *this = ::std::move(from);
  }

  inline ServiceNameMappingCollection& operator=(const ServiceNameMappingCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceNameMappingCollection& operator=(ServiceNameMappingCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceNameMappingCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceNameMappingCollection* internal_default_instance() {
    return reinterpret_cast<const ServiceNameMappingCollection*>(
               &_ServiceNameMappingCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServiceNameMappingCollection& a, ServiceNameMappingCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceNameMappingCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceNameMappingCollection* New() const final {
    return CreateMaybeMessage<ServiceNameMappingCollection>(nullptr);
  }

  ServiceNameMappingCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceNameMappingCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceNameMappingCollection& from);
  void MergeFrom(const ServiceNameMappingCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceNameMappingCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceNameMappingCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fDiscoveryService_2eproto);
    return ::descriptor_table_language_2dagent_2fDiscoveryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .ServiceNameMappingElement elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::ServiceNameMappingElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameMappingElement >*
      mutable_elements();
  private:
  const ::ServiceNameMappingElement& _internal_elements(int index) const;
  ::ServiceNameMappingElement* _internal_add_elements();
  public:
  const ::ServiceNameMappingElement& elements(int index) const;
  ::ServiceNameMappingElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameMappingElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ServiceNameMappingCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameMappingElement > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fDiscoveryService_2eproto;
};
// -------------------------------------------------------------------

class ServiceNameMappingElement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceNameMappingElement) */ {
 public:
  ServiceNameMappingElement();
  virtual ~ServiceNameMappingElement();

  ServiceNameMappingElement(const ServiceNameMappingElement& from);
  ServiceNameMappingElement(ServiceNameMappingElement&& from) noexcept
    : ServiceNameMappingElement() {
    *this = ::std::move(from);
  }

  inline ServiceNameMappingElement& operator=(const ServiceNameMappingElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceNameMappingElement& operator=(ServiceNameMappingElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceNameMappingElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceNameMappingElement* internal_default_instance() {
    return reinterpret_cast<const ServiceNameMappingElement*>(
               &_ServiceNameMappingElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServiceNameMappingElement& a, ServiceNameMappingElement& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceNameMappingElement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceNameMappingElement* New() const final {
    return CreateMaybeMessage<ServiceNameMappingElement>(nullptr);
  }

  ServiceNameMappingElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceNameMappingElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceNameMappingElement& from);
  void MergeFrom(const ServiceNameMappingElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceNameMappingElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceNameMappingElement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fDiscoveryService_2eproto);
    return ::descriptor_table_language_2dagent_2fDiscoveryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kServiceIdFieldNumber = 1,
  };
  // .ServiceNameElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::ServiceNameElement& element() const;
  ::ServiceNameElement* release_element();
  ::ServiceNameElement* mutable_element();
  void set_allocated_element(::ServiceNameElement* element);
  private:
  const ::ServiceNameElement& _internal_element() const;
  ::ServiceNameElement* _internal_mutable_element();
  public:

  // int32 serviceId = 1;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceNameMappingElement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ServiceNameElement* element_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fDiscoveryService_2eproto;
};
// -------------------------------------------------------------------

class ServiceNameElement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceNameElement) */ {
 public:
  ServiceNameElement();
  virtual ~ServiceNameElement();

  ServiceNameElement(const ServiceNameElement& from);
  ServiceNameElement(ServiceNameElement&& from) noexcept
    : ServiceNameElement() {
    *this = ::std::move(from);
  }

  inline ServiceNameElement& operator=(const ServiceNameElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceNameElement& operator=(ServiceNameElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceNameElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceNameElement* internal_default_instance() {
    return reinterpret_cast<const ServiceNameElement*>(
               &_ServiceNameElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServiceNameElement& a, ServiceNameElement& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceNameElement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceNameElement* New() const final {
    return CreateMaybeMessage<ServiceNameElement>(nullptr);
  }

  ServiceNameElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceNameElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceNameElement& from);
  void MergeFrom(const ServiceNameElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceNameElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceNameElement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fDiscoveryService_2eproto);
    return ::descriptor_table_language_2dagent_2fDiscoveryService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kApplicationIdFieldNumber = 2,
    kSrcSpanTypeFieldNumber = 3,
  };
  // string serviceName = 1;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // int32 applicationId = 2;
  void clear_applicationid();
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid() const;
  void set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_applicationid() const;
  void _internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .SpanType srcSpanType = 3;
  void clear_srcspantype();
  ::SpanType srcspantype() const;
  void set_srcspantype(::SpanType value);
  private:
  ::SpanType _internal_srcspantype() const;
  void _internal_set_srcspantype(::SpanType value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceNameElement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid_;
  int srcspantype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fDiscoveryService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApplicationInstance

// int32 applicationId = 1;
inline void ApplicationInstance::clear_applicationid() {
  applicationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstance::_internal_applicationid() const {
  return applicationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstance::applicationid() const {
  // @@protoc_insertion_point(field_get:ApplicationInstance.applicationId)
  return _internal_applicationid();
}
inline void ApplicationInstance::_internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  applicationid_ = value;
}
inline void ApplicationInstance::set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:ApplicationInstance.applicationId)
}

// string agentUUID = 2;
inline void ApplicationInstance::clear_agentuuid() {
  agentuuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ApplicationInstance::agentuuid() const {
  // @@protoc_insertion_point(field_get:ApplicationInstance.agentUUID)
  return _internal_agentuuid();
}
inline void ApplicationInstance::set_agentuuid(const std::string& value) {
  _internal_set_agentuuid(value);
  // @@protoc_insertion_point(field_set:ApplicationInstance.agentUUID)
}
inline std::string* ApplicationInstance::mutable_agentuuid() {
  // @@protoc_insertion_point(field_mutable:ApplicationInstance.agentUUID)
  return _internal_mutable_agentuuid();
}
inline const std::string& ApplicationInstance::_internal_agentuuid() const {
  return agentuuid_.GetNoArena();
}
inline void ApplicationInstance::_internal_set_agentuuid(const std::string& value) {
  
  agentuuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ApplicationInstance::set_agentuuid(std::string&& value) {
  
  agentuuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ApplicationInstance.agentUUID)
}
inline void ApplicationInstance::set_agentuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agentuuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ApplicationInstance.agentUUID)
}
inline void ApplicationInstance::set_agentuuid(const char* value, size_t size) {
  
  agentuuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ApplicationInstance.agentUUID)
}
inline std::string* ApplicationInstance::_internal_mutable_agentuuid() {
  
  return agentuuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInstance::release_agentuuid() {
  // @@protoc_insertion_point(field_release:ApplicationInstance.agentUUID)
  
  return agentuuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInstance::set_allocated_agentuuid(std::string* agentuuid) {
  if (agentuuid != nullptr) {
    
  } else {
    
  }
  agentuuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agentuuid);
  // @@protoc_insertion_point(field_set_allocated:ApplicationInstance.agentUUID)
}

// int64 registerTime = 3;
inline void ApplicationInstance::clear_registertime() {
  registertime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApplicationInstance::_internal_registertime() const {
  return registertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApplicationInstance::registertime() const {
  // @@protoc_insertion_point(field_get:ApplicationInstance.registerTime)
  return _internal_registertime();
}
inline void ApplicationInstance::_internal_set_registertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  registertime_ = value;
}
inline void ApplicationInstance::set_registertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_registertime(value);
  // @@protoc_insertion_point(field_set:ApplicationInstance.registerTime)
}

// .OSInfo osinfo = 4;
inline bool ApplicationInstance::_internal_has_osinfo() const {
  return this != internal_default_instance() && osinfo_ != nullptr;
}
inline bool ApplicationInstance::has_osinfo() const {
  return _internal_has_osinfo();
}
inline void ApplicationInstance::clear_osinfo() {
  if (GetArenaNoVirtual() == nullptr && osinfo_ != nullptr) {
    delete osinfo_;
  }
  osinfo_ = nullptr;
}
inline const ::OSInfo& ApplicationInstance::_internal_osinfo() const {
  const ::OSInfo* p = osinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OSInfo*>(
      &::_OSInfo_default_instance_);
}
inline const ::OSInfo& ApplicationInstance::osinfo() const {
  // @@protoc_insertion_point(field_get:ApplicationInstance.osinfo)
  return _internal_osinfo();
}
inline ::OSInfo* ApplicationInstance::release_osinfo() {
  // @@protoc_insertion_point(field_release:ApplicationInstance.osinfo)
  
  ::OSInfo* temp = osinfo_;
  osinfo_ = nullptr;
  return temp;
}
inline ::OSInfo* ApplicationInstance::_internal_mutable_osinfo() {
  
  if (osinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::OSInfo>(GetArenaNoVirtual());
    osinfo_ = p;
  }
  return osinfo_;
}
inline ::OSInfo* ApplicationInstance::mutable_osinfo() {
  // @@protoc_insertion_point(field_mutable:ApplicationInstance.osinfo)
  return _internal_mutable_osinfo();
}
inline void ApplicationInstance::set_allocated_osinfo(::OSInfo* osinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete osinfo_;
  }
  if (osinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      osinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osinfo, submessage_arena);
    }
    
  } else {
    
  }
  osinfo_ = osinfo;
  // @@protoc_insertion_point(field_set_allocated:ApplicationInstance.osinfo)
}

// -------------------------------------------------------------------

// ApplicationInstanceMapping

// int32 applicationId = 1;
inline void ApplicationInstanceMapping::clear_applicationid() {
  applicationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceMapping::_internal_applicationid() const {
  return applicationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceMapping::applicationid() const {
  // @@protoc_insertion_point(field_get:ApplicationInstanceMapping.applicationId)
  return _internal_applicationid();
}
inline void ApplicationInstanceMapping::_internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  applicationid_ = value;
}
inline void ApplicationInstanceMapping::set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:ApplicationInstanceMapping.applicationId)
}

// int32 applicationInstanceId = 2;
inline void ApplicationInstanceMapping::clear_applicationinstanceid() {
  applicationinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceMapping::_internal_applicationinstanceid() const {
  return applicationinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceMapping::applicationinstanceid() const {
  // @@protoc_insertion_point(field_get:ApplicationInstanceMapping.applicationInstanceId)
  return _internal_applicationinstanceid();
}
inline void ApplicationInstanceMapping::_internal_set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  applicationinstanceid_ = value;
}
inline void ApplicationInstanceMapping::set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_applicationinstanceid(value);
  // @@protoc_insertion_point(field_set:ApplicationInstanceMapping.applicationInstanceId)
}

// -------------------------------------------------------------------

// ApplicationInstanceRecover

// int32 applicationId = 1;
inline void ApplicationInstanceRecover::clear_applicationid() {
  applicationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceRecover::_internal_applicationid() const {
  return applicationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceRecover::applicationid() const {
  // @@protoc_insertion_point(field_get:ApplicationInstanceRecover.applicationId)
  return _internal_applicationid();
}
inline void ApplicationInstanceRecover::_internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  applicationid_ = value;
}
inline void ApplicationInstanceRecover::set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:ApplicationInstanceRecover.applicationId)
}

// int32 applicationInstanceId = 2;
inline void ApplicationInstanceRecover::clear_applicationinstanceid() {
  applicationinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceRecover::_internal_applicationinstanceid() const {
  return applicationinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceRecover::applicationinstanceid() const {
  // @@protoc_insertion_point(field_get:ApplicationInstanceRecover.applicationInstanceId)
  return _internal_applicationinstanceid();
}
inline void ApplicationInstanceRecover::_internal_set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  applicationinstanceid_ = value;
}
inline void ApplicationInstanceRecover::set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_applicationinstanceid(value);
  // @@protoc_insertion_point(field_set:ApplicationInstanceRecover.applicationInstanceId)
}

// int64 registerTime = 3;
inline void ApplicationInstanceRecover::clear_registertime() {
  registertime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApplicationInstanceRecover::_internal_registertime() const {
  return registertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApplicationInstanceRecover::registertime() const {
  // @@protoc_insertion_point(field_get:ApplicationInstanceRecover.registerTime)
  return _internal_registertime();
}
inline void ApplicationInstanceRecover::_internal_set_registertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  registertime_ = value;
}
inline void ApplicationInstanceRecover::set_registertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_registertime(value);
  // @@protoc_insertion_point(field_set:ApplicationInstanceRecover.registerTime)
}

// .OSInfo osinfo = 4;
inline bool ApplicationInstanceRecover::_internal_has_osinfo() const {
  return this != internal_default_instance() && osinfo_ != nullptr;
}
inline bool ApplicationInstanceRecover::has_osinfo() const {
  return _internal_has_osinfo();
}
inline void ApplicationInstanceRecover::clear_osinfo() {
  if (GetArenaNoVirtual() == nullptr && osinfo_ != nullptr) {
    delete osinfo_;
  }
  osinfo_ = nullptr;
}
inline const ::OSInfo& ApplicationInstanceRecover::_internal_osinfo() const {
  const ::OSInfo* p = osinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OSInfo*>(
      &::_OSInfo_default_instance_);
}
inline const ::OSInfo& ApplicationInstanceRecover::osinfo() const {
  // @@protoc_insertion_point(field_get:ApplicationInstanceRecover.osinfo)
  return _internal_osinfo();
}
inline ::OSInfo* ApplicationInstanceRecover::release_osinfo() {
  // @@protoc_insertion_point(field_release:ApplicationInstanceRecover.osinfo)
  
  ::OSInfo* temp = osinfo_;
  osinfo_ = nullptr;
  return temp;
}
inline ::OSInfo* ApplicationInstanceRecover::_internal_mutable_osinfo() {
  
  if (osinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::OSInfo>(GetArenaNoVirtual());
    osinfo_ = p;
  }
  return osinfo_;
}
inline ::OSInfo* ApplicationInstanceRecover::mutable_osinfo() {
  // @@protoc_insertion_point(field_mutable:ApplicationInstanceRecover.osinfo)
  return _internal_mutable_osinfo();
}
inline void ApplicationInstanceRecover::set_allocated_osinfo(::OSInfo* osinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete osinfo_;
  }
  if (osinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      osinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osinfo, submessage_arena);
    }
    
  } else {
    
  }
  osinfo_ = osinfo;
  // @@protoc_insertion_point(field_set_allocated:ApplicationInstanceRecover.osinfo)
}

// -------------------------------------------------------------------

// ApplicationInstanceHeartbeat

// int32 applicationInstanceId = 1;
inline void ApplicationInstanceHeartbeat::clear_applicationinstanceid() {
  applicationinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceHeartbeat::_internal_applicationinstanceid() const {
  return applicationinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInstanceHeartbeat::applicationinstanceid() const {
  // @@protoc_insertion_point(field_get:ApplicationInstanceHeartbeat.applicationInstanceId)
  return _internal_applicationinstanceid();
}
inline void ApplicationInstanceHeartbeat::_internal_set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  applicationinstanceid_ = value;
}
inline void ApplicationInstanceHeartbeat::set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_applicationinstanceid(value);
  // @@protoc_insertion_point(field_set:ApplicationInstanceHeartbeat.applicationInstanceId)
}

// int64 heartbeatTime = 2;
inline void ApplicationInstanceHeartbeat::clear_heartbeattime() {
  heartbeattime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApplicationInstanceHeartbeat::_internal_heartbeattime() const {
  return heartbeattime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApplicationInstanceHeartbeat::heartbeattime() const {
  // @@protoc_insertion_point(field_get:ApplicationInstanceHeartbeat.heartbeatTime)
  return _internal_heartbeattime();
}
inline void ApplicationInstanceHeartbeat::_internal_set_heartbeattime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  heartbeattime_ = value;
}
inline void ApplicationInstanceHeartbeat::set_heartbeattime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_heartbeattime(value);
  // @@protoc_insertion_point(field_set:ApplicationInstanceHeartbeat.heartbeatTime)
}

// -------------------------------------------------------------------

// OSInfo

// string osName = 1;
inline void OSInfo::clear_osname() {
  osname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OSInfo::osname() const {
  // @@protoc_insertion_point(field_get:OSInfo.osName)
  return _internal_osname();
}
inline void OSInfo::set_osname(const std::string& value) {
  _internal_set_osname(value);
  // @@protoc_insertion_point(field_set:OSInfo.osName)
}
inline std::string* OSInfo::mutable_osname() {
  // @@protoc_insertion_point(field_mutable:OSInfo.osName)
  return _internal_mutable_osname();
}
inline const std::string& OSInfo::_internal_osname() const {
  return osname_.GetNoArena();
}
inline void OSInfo::_internal_set_osname(const std::string& value) {
  
  osname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OSInfo::set_osname(std::string&& value) {
  
  osname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSInfo.osName)
}
inline void OSInfo::set_osname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSInfo.osName)
}
inline void OSInfo::set_osname(const char* value, size_t size) {
  
  osname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSInfo.osName)
}
inline std::string* OSInfo::_internal_mutable_osname() {
  
  return osname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OSInfo::release_osname() {
  // @@protoc_insertion_point(field_release:OSInfo.osName)
  
  return osname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OSInfo::set_allocated_osname(std::string* osname) {
  if (osname != nullptr) {
    
  } else {
    
  }
  osname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osname);
  // @@protoc_insertion_point(field_set_allocated:OSInfo.osName)
}

// string hostname = 2;
inline void OSInfo::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OSInfo::hostname() const {
  // @@protoc_insertion_point(field_get:OSInfo.hostname)
  return _internal_hostname();
}
inline void OSInfo::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:OSInfo.hostname)
}
inline std::string* OSInfo::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:OSInfo.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& OSInfo::_internal_hostname() const {
  return hostname_.GetNoArena();
}
inline void OSInfo::_internal_set_hostname(const std::string& value) {
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OSInfo::set_hostname(std::string&& value) {
  
  hostname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OSInfo.hostname)
}
inline void OSInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OSInfo.hostname)
}
inline void OSInfo::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OSInfo.hostname)
}
inline std::string* OSInfo::_internal_mutable_hostname() {
  
  return hostname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OSInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:OSInfo.hostname)
  
  return hostname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OSInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:OSInfo.hostname)
}

// int32 processNo = 3;
inline void OSInfo::clear_processno() {
  processno_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OSInfo::_internal_processno() const {
  return processno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OSInfo::processno() const {
  // @@protoc_insertion_point(field_get:OSInfo.processNo)
  return _internal_processno();
}
inline void OSInfo::_internal_set_processno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  processno_ = value;
}
inline void OSInfo::set_processno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processno(value);
  // @@protoc_insertion_point(field_set:OSInfo.processNo)
}

// repeated string ipv4s = 4;
inline int OSInfo::_internal_ipv4s_size() const {
  return ipv4s_.size();
}
inline int OSInfo::ipv4s_size() const {
  return _internal_ipv4s_size();
}
inline void OSInfo::clear_ipv4s() {
  ipv4s_.Clear();
}
inline std::string* OSInfo::add_ipv4s() {
  // @@protoc_insertion_point(field_add_mutable:OSInfo.ipv4s)
  return _internal_add_ipv4s();
}
inline const std::string& OSInfo::_internal_ipv4s(int index) const {
  return ipv4s_.Get(index);
}
inline const std::string& OSInfo::ipv4s(int index) const {
  // @@protoc_insertion_point(field_get:OSInfo.ipv4s)
  return _internal_ipv4s(index);
}
inline std::string* OSInfo::mutable_ipv4s(int index) {
  // @@protoc_insertion_point(field_mutable:OSInfo.ipv4s)
  return ipv4s_.Mutable(index);
}
inline void OSInfo::set_ipv4s(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OSInfo.ipv4s)
  ipv4s_.Mutable(index)->assign(value);
}
inline void OSInfo::set_ipv4s(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OSInfo.ipv4s)
  ipv4s_.Mutable(index)->assign(std::move(value));
}
inline void OSInfo::set_ipv4s(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ipv4s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OSInfo.ipv4s)
}
inline void OSInfo::set_ipv4s(int index, const char* value, size_t size) {
  ipv4s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OSInfo.ipv4s)
}
inline std::string* OSInfo::_internal_add_ipv4s() {
  return ipv4s_.Add();
}
inline void OSInfo::add_ipv4s(const std::string& value) {
  ipv4s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OSInfo.ipv4s)
}
inline void OSInfo::add_ipv4s(std::string&& value) {
  ipv4s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OSInfo.ipv4s)
}
inline void OSInfo::add_ipv4s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ipv4s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OSInfo.ipv4s)
}
inline void OSInfo::add_ipv4s(const char* value, size_t size) {
  ipv4s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OSInfo.ipv4s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OSInfo::ipv4s() const {
  // @@protoc_insertion_point(field_list:OSInfo.ipv4s)
  return ipv4s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OSInfo::mutable_ipv4s() {
  // @@protoc_insertion_point(field_mutable_list:OSInfo.ipv4s)
  return &ipv4s_;
}

// -------------------------------------------------------------------

// ServiceNameCollection

// repeated .ServiceNameElement elements = 1;
inline int ServiceNameCollection::_internal_elements_size() const {
  return elements_.size();
}
inline int ServiceNameCollection::elements_size() const {
  return _internal_elements_size();
}
inline void ServiceNameCollection::clear_elements() {
  elements_.Clear();
}
inline ::ServiceNameElement* ServiceNameCollection::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceNameCollection.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameElement >*
ServiceNameCollection::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ServiceNameCollection.elements)
  return &elements_;
}
inline const ::ServiceNameElement& ServiceNameCollection::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::ServiceNameElement& ServiceNameCollection::elements(int index) const {
  // @@protoc_insertion_point(field_get:ServiceNameCollection.elements)
  return _internal_elements(index);
}
inline ::ServiceNameElement* ServiceNameCollection::_internal_add_elements() {
  return elements_.Add();
}
inline ::ServiceNameElement* ServiceNameCollection::add_elements() {
  // @@protoc_insertion_point(field_add:ServiceNameCollection.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameElement >&
ServiceNameCollection::elements() const {
  // @@protoc_insertion_point(field_list:ServiceNameCollection.elements)
  return elements_;
}

// -------------------------------------------------------------------

// ServiceNameMappingCollection

// repeated .ServiceNameMappingElement elements = 1;
inline int ServiceNameMappingCollection::_internal_elements_size() const {
  return elements_.size();
}
inline int ServiceNameMappingCollection::elements_size() const {
  return _internal_elements_size();
}
inline void ServiceNameMappingCollection::clear_elements() {
  elements_.Clear();
}
inline ::ServiceNameMappingElement* ServiceNameMappingCollection::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceNameMappingCollection.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameMappingElement >*
ServiceNameMappingCollection::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ServiceNameMappingCollection.elements)
  return &elements_;
}
inline const ::ServiceNameMappingElement& ServiceNameMappingCollection::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::ServiceNameMappingElement& ServiceNameMappingCollection::elements(int index) const {
  // @@protoc_insertion_point(field_get:ServiceNameMappingCollection.elements)
  return _internal_elements(index);
}
inline ::ServiceNameMappingElement* ServiceNameMappingCollection::_internal_add_elements() {
  return elements_.Add();
}
inline ::ServiceNameMappingElement* ServiceNameMappingCollection::add_elements() {
  // @@protoc_insertion_point(field_add:ServiceNameMappingCollection.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceNameMappingElement >&
ServiceNameMappingCollection::elements() const {
  // @@protoc_insertion_point(field_list:ServiceNameMappingCollection.elements)
  return elements_;
}

// -------------------------------------------------------------------

// ServiceNameMappingElement

// int32 serviceId = 1;
inline void ServiceNameMappingElement::clear_serviceid() {
  serviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceNameMappingElement::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceNameMappingElement::serviceid() const {
  // @@protoc_insertion_point(field_get:ServiceNameMappingElement.serviceId)
  return _internal_serviceid();
}
inline void ServiceNameMappingElement::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceid_ = value;
}
inline void ServiceNameMappingElement::set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:ServiceNameMappingElement.serviceId)
}

// .ServiceNameElement element = 2;
inline bool ServiceNameMappingElement::_internal_has_element() const {
  return this != internal_default_instance() && element_ != nullptr;
}
inline bool ServiceNameMappingElement::has_element() const {
  return _internal_has_element();
}
inline void ServiceNameMappingElement::clear_element() {
  if (GetArenaNoVirtual() == nullptr && element_ != nullptr) {
    delete element_;
  }
  element_ = nullptr;
}
inline const ::ServiceNameElement& ServiceNameMappingElement::_internal_element() const {
  const ::ServiceNameElement* p = element_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ServiceNameElement*>(
      &::_ServiceNameElement_default_instance_);
}
inline const ::ServiceNameElement& ServiceNameMappingElement::element() const {
  // @@protoc_insertion_point(field_get:ServiceNameMappingElement.element)
  return _internal_element();
}
inline ::ServiceNameElement* ServiceNameMappingElement::release_element() {
  // @@protoc_insertion_point(field_release:ServiceNameMappingElement.element)
  
  ::ServiceNameElement* temp = element_;
  element_ = nullptr;
  return temp;
}
inline ::ServiceNameElement* ServiceNameMappingElement::_internal_mutable_element() {
  
  if (element_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServiceNameElement>(GetArenaNoVirtual());
    element_ = p;
  }
  return element_;
}
inline ::ServiceNameElement* ServiceNameMappingElement::mutable_element() {
  // @@protoc_insertion_point(field_mutable:ServiceNameMappingElement.element)
  return _internal_mutable_element();
}
inline void ServiceNameMappingElement::set_allocated_element(::ServiceNameElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    
  } else {
    
  }
  element_ = element;
  // @@protoc_insertion_point(field_set_allocated:ServiceNameMappingElement.element)
}

// -------------------------------------------------------------------

// ServiceNameElement

// string serviceName = 1;
inline void ServiceNameElement::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceNameElement::servicename() const {
  // @@protoc_insertion_point(field_get:ServiceNameElement.serviceName)
  return _internal_servicename();
}
inline void ServiceNameElement::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:ServiceNameElement.serviceName)
}
inline std::string* ServiceNameElement::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:ServiceNameElement.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& ServiceNameElement::_internal_servicename() const {
  return servicename_.GetNoArena();
}
inline void ServiceNameElement::_internal_set_servicename(const std::string& value) {
  
  servicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceNameElement::set_servicename(std::string&& value) {
  
  servicename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceNameElement.serviceName)
}
inline void ServiceNameElement::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceNameElement.serviceName)
}
inline void ServiceNameElement::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceNameElement.serviceName)
}
inline std::string* ServiceNameElement::_internal_mutable_servicename() {
  
  return servicename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceNameElement::release_servicename() {
  // @@protoc_insertion_point(field_release:ServiceNameElement.serviceName)
  
  return servicename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceNameElement::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:ServiceNameElement.serviceName)
}

// int32 applicationId = 2;
inline void ServiceNameElement::clear_applicationid() {
  applicationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceNameElement::_internal_applicationid() const {
  return applicationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceNameElement::applicationid() const {
  // @@protoc_insertion_point(field_get:ServiceNameElement.applicationId)
  return _internal_applicationid();
}
inline void ServiceNameElement::_internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  applicationid_ = value;
}
inline void ServiceNameElement::set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:ServiceNameElement.applicationId)
}

// .SpanType srcSpanType = 3;
inline void ServiceNameElement::clear_srcspantype() {
  srcspantype_ = 0;
}
inline ::SpanType ServiceNameElement::_internal_srcspantype() const {
  return static_cast< ::SpanType >(srcspantype_);
}
inline ::SpanType ServiceNameElement::srcspantype() const {
  // @@protoc_insertion_point(field_get:ServiceNameElement.srcSpanType)
  return _internal_srcspantype();
}
inline void ServiceNameElement::_internal_set_srcspantype(::SpanType value) {
  
  srcspantype_ = value;
}
inline void ServiceNameElement::set_srcspantype(::SpanType value) {
  _internal_set_srcspantype(value);
  // @@protoc_insertion_point(field_set:ServiceNameElement.srcSpanType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fDiscoveryService_2eproto
