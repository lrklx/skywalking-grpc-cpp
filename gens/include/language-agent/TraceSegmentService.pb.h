// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent/TraceSegmentService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fTraceSegmentService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fTraceSegmentService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "language-agent/Downstream.pb.h"
#include "language-agent/KeyWithStringValue.pb.h"
#include "common/trace-common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fTraceSegmentService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_language_2dagent_2fTraceSegmentService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2fTraceSegmentService_2eproto;
class LogMessage;
class LogMessageDefaultTypeInternal;
extern LogMessageDefaultTypeInternal _LogMessage_default_instance_;
class SpanObject;
class SpanObjectDefaultTypeInternal;
extern SpanObjectDefaultTypeInternal _SpanObject_default_instance_;
class TraceSegmentObject;
class TraceSegmentObjectDefaultTypeInternal;
extern TraceSegmentObjectDefaultTypeInternal _TraceSegmentObject_default_instance_;
class TraceSegmentReference;
class TraceSegmentReferenceDefaultTypeInternal;
extern TraceSegmentReferenceDefaultTypeInternal _TraceSegmentReference_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LogMessage* Arena::CreateMaybeMessage<::LogMessage>(Arena*);
template<> ::SpanObject* Arena::CreateMaybeMessage<::SpanObject>(Arena*);
template<> ::TraceSegmentObject* Arena::CreateMaybeMessage<::TraceSegmentObject>(Arena*);
template<> ::TraceSegmentReference* Arena::CreateMaybeMessage<::TraceSegmentReference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TraceSegmentObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TraceSegmentObject) */ {
 public:
  TraceSegmentObject();
  virtual ~TraceSegmentObject();

  TraceSegmentObject(const TraceSegmentObject& from);
  TraceSegmentObject(TraceSegmentObject&& from) noexcept
    : TraceSegmentObject() {
    *this = ::std::move(from);
  }

  inline TraceSegmentObject& operator=(const TraceSegmentObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceSegmentObject& operator=(TraceSegmentObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceSegmentObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceSegmentObject* internal_default_instance() {
    return reinterpret_cast<const TraceSegmentObject*>(
               &_TraceSegmentObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TraceSegmentObject& a, TraceSegmentObject& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceSegmentObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceSegmentObject* New() const final {
    return CreateMaybeMessage<TraceSegmentObject>(nullptr);
  }

  TraceSegmentObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceSegmentObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceSegmentObject& from);
  void MergeFrom(const TraceSegmentObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceSegmentObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TraceSegmentObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fTraceSegmentService_2eproto);
    return ::descriptor_table_language_2dagent_2fTraceSegmentService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpansFieldNumber = 2,
    kTraceSegmentIdFieldNumber = 1,
    kApplicationIdFieldNumber = 3,
    kApplicationInstanceIdFieldNumber = 4,
    kIsSizeLimitedFieldNumber = 5,
  };
  // repeated .SpanObject spans = 2;
  int spans_size() const;
  private:
  int _internal_spans_size() const;
  public:
  void clear_spans();
  ::SpanObject* mutable_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObject >*
      mutable_spans();
  private:
  const ::SpanObject& _internal_spans(int index) const;
  ::SpanObject* _internal_add_spans();
  public:
  const ::SpanObject& spans(int index) const;
  ::SpanObject* add_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObject >&
      spans() const;

  // .UniqueId traceSegmentId = 1;
  bool has_tracesegmentid() const;
  private:
  bool _internal_has_tracesegmentid() const;
  public:
  void clear_tracesegmentid();
  const ::UniqueId& tracesegmentid() const;
  ::UniqueId* release_tracesegmentid();
  ::UniqueId* mutable_tracesegmentid();
  void set_allocated_tracesegmentid(::UniqueId* tracesegmentid);
  private:
  const ::UniqueId& _internal_tracesegmentid() const;
  ::UniqueId* _internal_mutable_tracesegmentid();
  public:

  // int32 applicationId = 3;
  void clear_applicationid();
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid() const;
  void set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_applicationid() const;
  void _internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 applicationInstanceId = 4;
  void clear_applicationinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 applicationinstanceid() const;
  void set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_applicationinstanceid() const;
  void _internal_set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isSizeLimited = 5;
  void clear_issizelimited();
  bool issizelimited() const;
  void set_issizelimited(bool value);
  private:
  bool _internal_issizelimited() const;
  void _internal_set_issizelimited(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TraceSegmentObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObject > spans_;
  ::UniqueId* tracesegmentid_;
  ::PROTOBUF_NAMESPACE_ID::int32 applicationid_;
  ::PROTOBUF_NAMESPACE_ID::int32 applicationinstanceid_;
  bool issizelimited_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fTraceSegmentService_2eproto;
};
// -------------------------------------------------------------------

class TraceSegmentReference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TraceSegmentReference) */ {
 public:
  TraceSegmentReference();
  virtual ~TraceSegmentReference();

  TraceSegmentReference(const TraceSegmentReference& from);
  TraceSegmentReference(TraceSegmentReference&& from) noexcept
    : TraceSegmentReference() {
    *this = ::std::move(from);
  }

  inline TraceSegmentReference& operator=(const TraceSegmentReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceSegmentReference& operator=(TraceSegmentReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceSegmentReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceSegmentReference* internal_default_instance() {
    return reinterpret_cast<const TraceSegmentReference*>(
               &_TraceSegmentReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TraceSegmentReference& a, TraceSegmentReference& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceSegmentReference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceSegmentReference* New() const final {
    return CreateMaybeMessage<TraceSegmentReference>(nullptr);
  }

  TraceSegmentReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceSegmentReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceSegmentReference& from);
  void MergeFrom(const TraceSegmentReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceSegmentReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TraceSegmentReference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fTraceSegmentService_2eproto);
    return ::descriptor_table_language_2dagent_2fTraceSegmentService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkAddressFieldNumber = 5,
    kEntryServiceNameFieldNumber = 8,
    kParentServiceNameFieldNumber = 10,
    kParentTraceSegmentIdFieldNumber = 2,
    kRefTypeFieldNumber = 1,
    kParentSpanIdFieldNumber = 3,
    kParentApplicationInstanceIdFieldNumber = 4,
    kNetworkAddressIdFieldNumber = 6,
    kEntryApplicationInstanceIdFieldNumber = 7,
    kEntryServiceIdFieldNumber = 9,
    kParentServiceIdFieldNumber = 11,
  };
  // string networkAddress = 5;
  void clear_networkaddress();
  const std::string& networkaddress() const;
  void set_networkaddress(const std::string& value);
  void set_networkaddress(std::string&& value);
  void set_networkaddress(const char* value);
  void set_networkaddress(const char* value, size_t size);
  std::string* mutable_networkaddress();
  std::string* release_networkaddress();
  void set_allocated_networkaddress(std::string* networkaddress);
  private:
  const std::string& _internal_networkaddress() const;
  void _internal_set_networkaddress(const std::string& value);
  std::string* _internal_mutable_networkaddress();
  public:

  // string entryServiceName = 8;
  void clear_entryservicename();
  const std::string& entryservicename() const;
  void set_entryservicename(const std::string& value);
  void set_entryservicename(std::string&& value);
  void set_entryservicename(const char* value);
  void set_entryservicename(const char* value, size_t size);
  std::string* mutable_entryservicename();
  std::string* release_entryservicename();
  void set_allocated_entryservicename(std::string* entryservicename);
  private:
  const std::string& _internal_entryservicename() const;
  void _internal_set_entryservicename(const std::string& value);
  std::string* _internal_mutable_entryservicename();
  public:

  // string parentServiceName = 10;
  void clear_parentservicename();
  const std::string& parentservicename() const;
  void set_parentservicename(const std::string& value);
  void set_parentservicename(std::string&& value);
  void set_parentservicename(const char* value);
  void set_parentservicename(const char* value, size_t size);
  std::string* mutable_parentservicename();
  std::string* release_parentservicename();
  void set_allocated_parentservicename(std::string* parentservicename);
  private:
  const std::string& _internal_parentservicename() const;
  void _internal_set_parentservicename(const std::string& value);
  std::string* _internal_mutable_parentservicename();
  public:

  // .UniqueId parentTraceSegmentId = 2;
  bool has_parenttracesegmentid() const;
  private:
  bool _internal_has_parenttracesegmentid() const;
  public:
  void clear_parenttracesegmentid();
  const ::UniqueId& parenttracesegmentid() const;
  ::UniqueId* release_parenttracesegmentid();
  ::UniqueId* mutable_parenttracesegmentid();
  void set_allocated_parenttracesegmentid(::UniqueId* parenttracesegmentid);
  private:
  const ::UniqueId& _internal_parenttracesegmentid() const;
  ::UniqueId* _internal_mutable_parenttracesegmentid();
  public:

  // .RefType refType = 1;
  void clear_reftype();
  ::RefType reftype() const;
  void set_reftype(::RefType value);
  private:
  ::RefType _internal_reftype() const;
  void _internal_set_reftype(::RefType value);
  public:

  // int32 parentSpanId = 3;
  void clear_parentspanid();
  ::PROTOBUF_NAMESPACE_ID::int32 parentspanid() const;
  void set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parentspanid() const;
  void _internal_set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parentApplicationInstanceId = 4;
  void clear_parentapplicationinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 parentapplicationinstanceid() const;
  void set_parentapplicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parentapplicationinstanceid() const;
  void _internal_set_parentapplicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 networkAddressId = 6;
  void clear_networkaddressid();
  ::PROTOBUF_NAMESPACE_ID::int32 networkaddressid() const;
  void set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_networkaddressid() const;
  void _internal_set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 entryApplicationInstanceId = 7;
  void clear_entryapplicationinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 entryapplicationinstanceid() const;
  void set_entryapplicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entryapplicationinstanceid() const;
  void _internal_set_entryapplicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 entryServiceId = 9;
  void clear_entryserviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 entryserviceid() const;
  void set_entryserviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entryserviceid() const;
  void _internal_set_entryserviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parentServiceId = 11;
  void clear_parentserviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 parentserviceid() const;
  void set_parentserviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parentserviceid() const;
  void _internal_set_parentserviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TraceSegmentReference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networkaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entryservicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentservicename_;
  ::UniqueId* parenttracesegmentid_;
  int reftype_;
  ::PROTOBUF_NAMESPACE_ID::int32 parentspanid_;
  ::PROTOBUF_NAMESPACE_ID::int32 parentapplicationinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 networkaddressid_;
  ::PROTOBUF_NAMESPACE_ID::int32 entryapplicationinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 entryserviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 parentserviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fTraceSegmentService_2eproto;
};
// -------------------------------------------------------------------

class SpanObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SpanObject) */ {
 public:
  SpanObject();
  virtual ~SpanObject();

  SpanObject(const SpanObject& from);
  SpanObject(SpanObject&& from) noexcept
    : SpanObject() {
    *this = ::std::move(from);
  }

  inline SpanObject& operator=(const SpanObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanObject& operator=(SpanObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpanObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpanObject* internal_default_instance() {
    return reinterpret_cast<const SpanObject*>(
               &_SpanObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpanObject& a, SpanObject& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpanObject* New() const final {
    return CreateMaybeMessage<SpanObject>(nullptr);
  }

  SpanObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpanObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpanObject& from);
  void MergeFrom(const SpanObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SpanObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fTraceSegmentService_2eproto);
    return ::descriptor_table_language_2dagent_2fTraceSegmentService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefsFieldNumber = 5,
    kTagsFieldNumber = 15,
    kLogsFieldNumber = 16,
    kOperationNameFieldNumber = 7,
    kPeerFieldNumber = 9,
    kComponentFieldNumber = 13,
    kSpanIdFieldNumber = 1,
    kParentSpanIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kOperationNameIdFieldNumber = 6,
    kPeerIdFieldNumber = 8,
    kSpanTypeFieldNumber = 10,
    kSpanLayerFieldNumber = 11,
    kComponentIdFieldNumber = 12,
    kIsErrorFieldNumber = 14,
  };
  // repeated .TraceSegmentReference refs = 5;
  int refs_size() const;
  private:
  int _internal_refs_size() const;
  public:
  void clear_refs();
  ::TraceSegmentReference* mutable_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TraceSegmentReference >*
      mutable_refs();
  private:
  const ::TraceSegmentReference& _internal_refs(int index) const;
  ::TraceSegmentReference* _internal_add_refs();
  public:
  const ::TraceSegmentReference& refs(int index) const;
  ::TraceSegmentReference* add_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TraceSegmentReference >&
      refs() const;

  // repeated .KeyWithStringValue tags = 15;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::KeyWithStringValue* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue >*
      mutable_tags();
  private:
  const ::KeyWithStringValue& _internal_tags(int index) const;
  ::KeyWithStringValue* _internal_add_tags();
  public:
  const ::KeyWithStringValue& tags(int index) const;
  ::KeyWithStringValue* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue >&
      tags() const;

  // repeated .LogMessage logs = 16;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::LogMessage* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogMessage >*
      mutable_logs();
  private:
  const ::LogMessage& _internal_logs(int index) const;
  ::LogMessage* _internal_add_logs();
  public:
  const ::LogMessage& logs(int index) const;
  ::LogMessage* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogMessage >&
      logs() const;

  // string operationName = 7;
  void clear_operationname();
  const std::string& operationname() const;
  void set_operationname(const std::string& value);
  void set_operationname(std::string&& value);
  void set_operationname(const char* value);
  void set_operationname(const char* value, size_t size);
  std::string* mutable_operationname();
  std::string* release_operationname();
  void set_allocated_operationname(std::string* operationname);
  private:
  const std::string& _internal_operationname() const;
  void _internal_set_operationname(const std::string& value);
  std::string* _internal_mutable_operationname();
  public:

  // string peer = 9;
  void clear_peer();
  const std::string& peer() const;
  void set_peer(const std::string& value);
  void set_peer(std::string&& value);
  void set_peer(const char* value);
  void set_peer(const char* value, size_t size);
  std::string* mutable_peer();
  std::string* release_peer();
  void set_allocated_peer(std::string* peer);
  private:
  const std::string& _internal_peer() const;
  void _internal_set_peer(const std::string& value);
  std::string* _internal_mutable_peer();
  public:

  // string component = 13;
  void clear_component();
  const std::string& component() const;
  void set_component(const std::string& value);
  void set_component(std::string&& value);
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  std::string* mutable_component();
  std::string* release_component();
  void set_allocated_component(std::string* component);
  private:
  const std::string& _internal_component() const;
  void _internal_set_component(const std::string& value);
  std::string* _internal_mutable_component();
  public:

  // int32 spanId = 1;
  void clear_spanid();
  ::PROTOBUF_NAMESPACE_ID::int32 spanid() const;
  void set_spanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spanid() const;
  void _internal_set_spanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parentSpanId = 2;
  void clear_parentspanid();
  ::PROTOBUF_NAMESPACE_ID::int32 parentspanid() const;
  void set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parentspanid() const;
  void _internal_set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 startTime = 3;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTime = 4;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 operationNameId = 6;
  void clear_operationnameid();
  ::PROTOBUF_NAMESPACE_ID::int32 operationnameid() const;
  void set_operationnameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operationnameid() const;
  void _internal_set_operationnameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 peerId = 8;
  void clear_peerid();
  ::PROTOBUF_NAMESPACE_ID::int32 peerid() const;
  void set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peerid() const;
  void _internal_set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .SpanType spanType = 10;
  void clear_spantype();
  ::SpanType spantype() const;
  void set_spantype(::SpanType value);
  private:
  ::SpanType _internal_spantype() const;
  void _internal_set_spantype(::SpanType value);
  public:

  // .SpanLayer spanLayer = 11;
  void clear_spanlayer();
  ::SpanLayer spanlayer() const;
  void set_spanlayer(::SpanLayer value);
  private:
  ::SpanLayer _internal_spanlayer() const;
  void _internal_set_spanlayer(::SpanLayer value);
  public:

  // int32 componentId = 12;
  void clear_componentid();
  ::PROTOBUF_NAMESPACE_ID::int32 componentid() const;
  void set_componentid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_componentid() const;
  void _internal_set_componentid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isError = 14;
  void clear_iserror();
  bool iserror() const;
  void set_iserror(bool value);
  private:
  bool _internal_iserror() const;
  void _internal_set_iserror(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SpanObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TraceSegmentReference > refs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogMessage > logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operationname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_;
  ::PROTOBUF_NAMESPACE_ID::int32 spanid_;
  ::PROTOBUF_NAMESPACE_ID::int32 parentspanid_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 operationnameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 peerid_;
  int spantype_;
  int spanlayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 componentid_;
  bool iserror_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fTraceSegmentService_2eproto;
};
// -------------------------------------------------------------------

class LogMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogMessage) */ {
 public:
  LogMessage();
  virtual ~LogMessage();

  LogMessage(const LogMessage& from);
  LogMessage(LogMessage&& from) noexcept
    : LogMessage() {
    *this = ::std::move(from);
  }

  inline LogMessage& operator=(const LogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMessage& operator=(LogMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMessage* internal_default_instance() {
    return reinterpret_cast<const LogMessage*>(
               &_LogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogMessage& a, LogMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogMessage* New() const final {
    return CreateMaybeMessage<LogMessage>(nullptr);
  }

  LogMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogMessage& from);
  void MergeFrom(const LogMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fTraceSegmentService_2eproto);
    return ::descriptor_table_language_2dagent_2fTraceSegmentService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .KeyWithStringValue data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::KeyWithStringValue* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue >*
      mutable_data();
  private:
  const ::KeyWithStringValue& _internal_data(int index) const;
  ::KeyWithStringValue* _internal_add_data();
  public:
  const ::KeyWithStringValue& data(int index) const;
  ::KeyWithStringValue* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue >&
      data() const;

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:LogMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue > data_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fTraceSegmentService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceSegmentObject

// .UniqueId traceSegmentId = 1;
inline bool TraceSegmentObject::_internal_has_tracesegmentid() const {
  return this != internal_default_instance() && tracesegmentid_ != nullptr;
}
inline bool TraceSegmentObject::has_tracesegmentid() const {
  return _internal_has_tracesegmentid();
}
inline const ::UniqueId& TraceSegmentObject::_internal_tracesegmentid() const {
  const ::UniqueId* p = tracesegmentid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::UniqueId*>(
      &::_UniqueId_default_instance_);
}
inline const ::UniqueId& TraceSegmentObject::tracesegmentid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentObject.traceSegmentId)
  return _internal_tracesegmentid();
}
inline ::UniqueId* TraceSegmentObject::release_tracesegmentid() {
  // @@protoc_insertion_point(field_release:TraceSegmentObject.traceSegmentId)
  
  ::UniqueId* temp = tracesegmentid_;
  tracesegmentid_ = nullptr;
  return temp;
}
inline ::UniqueId* TraceSegmentObject::_internal_mutable_tracesegmentid() {
  
  if (tracesegmentid_ == nullptr) {
    auto* p = CreateMaybeMessage<::UniqueId>(GetArenaNoVirtual());
    tracesegmentid_ = p;
  }
  return tracesegmentid_;
}
inline ::UniqueId* TraceSegmentObject::mutable_tracesegmentid() {
  // @@protoc_insertion_point(field_mutable:TraceSegmentObject.traceSegmentId)
  return _internal_mutable_tracesegmentid();
}
inline void TraceSegmentObject::set_allocated_tracesegmentid(::UniqueId* tracesegmentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracesegmentid_);
  }
  if (tracesegmentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracesegmentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracesegmentid, submessage_arena);
    }
    
  } else {
    
  }
  tracesegmentid_ = tracesegmentid;
  // @@protoc_insertion_point(field_set_allocated:TraceSegmentObject.traceSegmentId)
}

// repeated .SpanObject spans = 2;
inline int TraceSegmentObject::_internal_spans_size() const {
  return spans_.size();
}
inline int TraceSegmentObject::spans_size() const {
  return _internal_spans_size();
}
inline void TraceSegmentObject::clear_spans() {
  spans_.Clear();
}
inline ::SpanObject* TraceSegmentObject::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:TraceSegmentObject.spans)
  return spans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObject >*
TraceSegmentObject::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:TraceSegmentObject.spans)
  return &spans_;
}
inline const ::SpanObject& TraceSegmentObject::_internal_spans(int index) const {
  return spans_.Get(index);
}
inline const ::SpanObject& TraceSegmentObject::spans(int index) const {
  // @@protoc_insertion_point(field_get:TraceSegmentObject.spans)
  return _internal_spans(index);
}
inline ::SpanObject* TraceSegmentObject::_internal_add_spans() {
  return spans_.Add();
}
inline ::SpanObject* TraceSegmentObject::add_spans() {
  // @@protoc_insertion_point(field_add:TraceSegmentObject.spans)
  return _internal_add_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObject >&
TraceSegmentObject::spans() const {
  // @@protoc_insertion_point(field_list:TraceSegmentObject.spans)
  return spans_;
}

// int32 applicationId = 3;
inline void TraceSegmentObject::clear_applicationid() {
  applicationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentObject::_internal_applicationid() const {
  return applicationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentObject::applicationid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentObject.applicationId)
  return _internal_applicationid();
}
inline void TraceSegmentObject::_internal_set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  applicationid_ = value;
}
inline void TraceSegmentObject::set_applicationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:TraceSegmentObject.applicationId)
}

// int32 applicationInstanceId = 4;
inline void TraceSegmentObject::clear_applicationinstanceid() {
  applicationinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentObject::_internal_applicationinstanceid() const {
  return applicationinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentObject::applicationinstanceid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentObject.applicationInstanceId)
  return _internal_applicationinstanceid();
}
inline void TraceSegmentObject::_internal_set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  applicationinstanceid_ = value;
}
inline void TraceSegmentObject::set_applicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_applicationinstanceid(value);
  // @@protoc_insertion_point(field_set:TraceSegmentObject.applicationInstanceId)
}

// bool isSizeLimited = 5;
inline void TraceSegmentObject::clear_issizelimited() {
  issizelimited_ = false;
}
inline bool TraceSegmentObject::_internal_issizelimited() const {
  return issizelimited_;
}
inline bool TraceSegmentObject::issizelimited() const {
  // @@protoc_insertion_point(field_get:TraceSegmentObject.isSizeLimited)
  return _internal_issizelimited();
}
inline void TraceSegmentObject::_internal_set_issizelimited(bool value) {
  
  issizelimited_ = value;
}
inline void TraceSegmentObject::set_issizelimited(bool value) {
  _internal_set_issizelimited(value);
  // @@protoc_insertion_point(field_set:TraceSegmentObject.isSizeLimited)
}

// -------------------------------------------------------------------

// TraceSegmentReference

// .RefType refType = 1;
inline void TraceSegmentReference::clear_reftype() {
  reftype_ = 0;
}
inline ::RefType TraceSegmentReference::_internal_reftype() const {
  return static_cast< ::RefType >(reftype_);
}
inline ::RefType TraceSegmentReference::reftype() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.refType)
  return _internal_reftype();
}
inline void TraceSegmentReference::_internal_set_reftype(::RefType value) {
  
  reftype_ = value;
}
inline void TraceSegmentReference::set_reftype(::RefType value) {
  _internal_set_reftype(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.refType)
}

// .UniqueId parentTraceSegmentId = 2;
inline bool TraceSegmentReference::_internal_has_parenttracesegmentid() const {
  return this != internal_default_instance() && parenttracesegmentid_ != nullptr;
}
inline bool TraceSegmentReference::has_parenttracesegmentid() const {
  return _internal_has_parenttracesegmentid();
}
inline const ::UniqueId& TraceSegmentReference::_internal_parenttracesegmentid() const {
  const ::UniqueId* p = parenttracesegmentid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::UniqueId*>(
      &::_UniqueId_default_instance_);
}
inline const ::UniqueId& TraceSegmentReference::parenttracesegmentid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.parentTraceSegmentId)
  return _internal_parenttracesegmentid();
}
inline ::UniqueId* TraceSegmentReference::release_parenttracesegmentid() {
  // @@protoc_insertion_point(field_release:TraceSegmentReference.parentTraceSegmentId)
  
  ::UniqueId* temp = parenttracesegmentid_;
  parenttracesegmentid_ = nullptr;
  return temp;
}
inline ::UniqueId* TraceSegmentReference::_internal_mutable_parenttracesegmentid() {
  
  if (parenttracesegmentid_ == nullptr) {
    auto* p = CreateMaybeMessage<::UniqueId>(GetArenaNoVirtual());
    parenttracesegmentid_ = p;
  }
  return parenttracesegmentid_;
}
inline ::UniqueId* TraceSegmentReference::mutable_parenttracesegmentid() {
  // @@protoc_insertion_point(field_mutable:TraceSegmentReference.parentTraceSegmentId)
  return _internal_mutable_parenttracesegmentid();
}
inline void TraceSegmentReference::set_allocated_parenttracesegmentid(::UniqueId* parenttracesegmentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parenttracesegmentid_);
  }
  if (parenttracesegmentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parenttracesegmentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parenttracesegmentid, submessage_arena);
    }
    
  } else {
    
  }
  parenttracesegmentid_ = parenttracesegmentid;
  // @@protoc_insertion_point(field_set_allocated:TraceSegmentReference.parentTraceSegmentId)
}

// int32 parentSpanId = 3;
inline void TraceSegmentReference::clear_parentspanid() {
  parentspanid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::_internal_parentspanid() const {
  return parentspanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::parentspanid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.parentSpanId)
  return _internal_parentspanid();
}
inline void TraceSegmentReference::_internal_set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parentspanid_ = value;
}
inline void TraceSegmentReference::set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parentspanid(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.parentSpanId)
}

// int32 parentApplicationInstanceId = 4;
inline void TraceSegmentReference::clear_parentapplicationinstanceid() {
  parentapplicationinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::_internal_parentapplicationinstanceid() const {
  return parentapplicationinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::parentapplicationinstanceid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.parentApplicationInstanceId)
  return _internal_parentapplicationinstanceid();
}
inline void TraceSegmentReference::_internal_set_parentapplicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parentapplicationinstanceid_ = value;
}
inline void TraceSegmentReference::set_parentapplicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parentapplicationinstanceid(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.parentApplicationInstanceId)
}

// string networkAddress = 5;
inline void TraceSegmentReference::clear_networkaddress() {
  networkaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TraceSegmentReference::networkaddress() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.networkAddress)
  return _internal_networkaddress();
}
inline void TraceSegmentReference::set_networkaddress(const std::string& value) {
  _internal_set_networkaddress(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.networkAddress)
}
inline std::string* TraceSegmentReference::mutable_networkaddress() {
  // @@protoc_insertion_point(field_mutable:TraceSegmentReference.networkAddress)
  return _internal_mutable_networkaddress();
}
inline const std::string& TraceSegmentReference::_internal_networkaddress() const {
  return networkaddress_.GetNoArena();
}
inline void TraceSegmentReference::_internal_set_networkaddress(const std::string& value) {
  
  networkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TraceSegmentReference::set_networkaddress(std::string&& value) {
  
  networkaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceSegmentReference.networkAddress)
}
inline void TraceSegmentReference::set_networkaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  networkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceSegmentReference.networkAddress)
}
inline void TraceSegmentReference::set_networkaddress(const char* value, size_t size) {
  
  networkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceSegmentReference.networkAddress)
}
inline std::string* TraceSegmentReference::_internal_mutable_networkaddress() {
  
  return networkaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceSegmentReference::release_networkaddress() {
  // @@protoc_insertion_point(field_release:TraceSegmentReference.networkAddress)
  
  return networkaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceSegmentReference::set_allocated_networkaddress(std::string* networkaddress) {
  if (networkaddress != nullptr) {
    
  } else {
    
  }
  networkaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networkaddress);
  // @@protoc_insertion_point(field_set_allocated:TraceSegmentReference.networkAddress)
}

// int32 networkAddressId = 6;
inline void TraceSegmentReference::clear_networkaddressid() {
  networkaddressid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::_internal_networkaddressid() const {
  return networkaddressid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::networkaddressid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.networkAddressId)
  return _internal_networkaddressid();
}
inline void TraceSegmentReference::_internal_set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  networkaddressid_ = value;
}
inline void TraceSegmentReference::set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_networkaddressid(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.networkAddressId)
}

// int32 entryApplicationInstanceId = 7;
inline void TraceSegmentReference::clear_entryapplicationinstanceid() {
  entryapplicationinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::_internal_entryapplicationinstanceid() const {
  return entryapplicationinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::entryapplicationinstanceid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.entryApplicationInstanceId)
  return _internal_entryapplicationinstanceid();
}
inline void TraceSegmentReference::_internal_set_entryapplicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entryapplicationinstanceid_ = value;
}
inline void TraceSegmentReference::set_entryapplicationinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entryapplicationinstanceid(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.entryApplicationInstanceId)
}

// string entryServiceName = 8;
inline void TraceSegmentReference::clear_entryservicename() {
  entryservicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TraceSegmentReference::entryservicename() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.entryServiceName)
  return _internal_entryservicename();
}
inline void TraceSegmentReference::set_entryservicename(const std::string& value) {
  _internal_set_entryservicename(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.entryServiceName)
}
inline std::string* TraceSegmentReference::mutable_entryservicename() {
  // @@protoc_insertion_point(field_mutable:TraceSegmentReference.entryServiceName)
  return _internal_mutable_entryservicename();
}
inline const std::string& TraceSegmentReference::_internal_entryservicename() const {
  return entryservicename_.GetNoArena();
}
inline void TraceSegmentReference::_internal_set_entryservicename(const std::string& value) {
  
  entryservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TraceSegmentReference::set_entryservicename(std::string&& value) {
  
  entryservicename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceSegmentReference.entryServiceName)
}
inline void TraceSegmentReference::set_entryservicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entryservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceSegmentReference.entryServiceName)
}
inline void TraceSegmentReference::set_entryservicename(const char* value, size_t size) {
  
  entryservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceSegmentReference.entryServiceName)
}
inline std::string* TraceSegmentReference::_internal_mutable_entryservicename() {
  
  return entryservicename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceSegmentReference::release_entryservicename() {
  // @@protoc_insertion_point(field_release:TraceSegmentReference.entryServiceName)
  
  return entryservicename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceSegmentReference::set_allocated_entryservicename(std::string* entryservicename) {
  if (entryservicename != nullptr) {
    
  } else {
    
  }
  entryservicename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entryservicename);
  // @@protoc_insertion_point(field_set_allocated:TraceSegmentReference.entryServiceName)
}

// int32 entryServiceId = 9;
inline void TraceSegmentReference::clear_entryserviceid() {
  entryserviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::_internal_entryserviceid() const {
  return entryserviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::entryserviceid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.entryServiceId)
  return _internal_entryserviceid();
}
inline void TraceSegmentReference::_internal_set_entryserviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entryserviceid_ = value;
}
inline void TraceSegmentReference::set_entryserviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entryserviceid(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.entryServiceId)
}

// string parentServiceName = 10;
inline void TraceSegmentReference::clear_parentservicename() {
  parentservicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TraceSegmentReference::parentservicename() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.parentServiceName)
  return _internal_parentservicename();
}
inline void TraceSegmentReference::set_parentservicename(const std::string& value) {
  _internal_set_parentservicename(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.parentServiceName)
}
inline std::string* TraceSegmentReference::mutable_parentservicename() {
  // @@protoc_insertion_point(field_mutable:TraceSegmentReference.parentServiceName)
  return _internal_mutable_parentservicename();
}
inline const std::string& TraceSegmentReference::_internal_parentservicename() const {
  return parentservicename_.GetNoArena();
}
inline void TraceSegmentReference::_internal_set_parentservicename(const std::string& value) {
  
  parentservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TraceSegmentReference::set_parentservicename(std::string&& value) {
  
  parentservicename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceSegmentReference.parentServiceName)
}
inline void TraceSegmentReference::set_parentservicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parentservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceSegmentReference.parentServiceName)
}
inline void TraceSegmentReference::set_parentservicename(const char* value, size_t size) {
  
  parentservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceSegmentReference.parentServiceName)
}
inline std::string* TraceSegmentReference::_internal_mutable_parentservicename() {
  
  return parentservicename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceSegmentReference::release_parentservicename() {
  // @@protoc_insertion_point(field_release:TraceSegmentReference.parentServiceName)
  
  return parentservicename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceSegmentReference::set_allocated_parentservicename(std::string* parentservicename) {
  if (parentservicename != nullptr) {
    
  } else {
    
  }
  parentservicename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentservicename);
  // @@protoc_insertion_point(field_set_allocated:TraceSegmentReference.parentServiceName)
}

// int32 parentServiceId = 11;
inline void TraceSegmentReference::clear_parentserviceid() {
  parentserviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::_internal_parentserviceid() const {
  return parentserviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceSegmentReference::parentserviceid() const {
  // @@protoc_insertion_point(field_get:TraceSegmentReference.parentServiceId)
  return _internal_parentserviceid();
}
inline void TraceSegmentReference::_internal_set_parentserviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parentserviceid_ = value;
}
inline void TraceSegmentReference::set_parentserviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parentserviceid(value);
  // @@protoc_insertion_point(field_set:TraceSegmentReference.parentServiceId)
}

// -------------------------------------------------------------------

// SpanObject

// int32 spanId = 1;
inline void SpanObject::clear_spanid() {
  spanid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::_internal_spanid() const {
  return spanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::spanid() const {
  // @@protoc_insertion_point(field_get:SpanObject.spanId)
  return _internal_spanid();
}
inline void SpanObject::_internal_set_spanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spanid_ = value;
}
inline void SpanObject::set_spanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spanid(value);
  // @@protoc_insertion_point(field_set:SpanObject.spanId)
}

// int32 parentSpanId = 2;
inline void SpanObject::clear_parentspanid() {
  parentspanid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::_internal_parentspanid() const {
  return parentspanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::parentspanid() const {
  // @@protoc_insertion_point(field_get:SpanObject.parentSpanId)
  return _internal_parentspanid();
}
inline void SpanObject::_internal_set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parentspanid_ = value;
}
inline void SpanObject::set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parentspanid(value);
  // @@protoc_insertion_point(field_set:SpanObject.parentSpanId)
}

// int64 startTime = 3;
inline void SpanObject::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpanObject::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpanObject::starttime() const {
  // @@protoc_insertion_point(field_get:SpanObject.startTime)
  return _internal_starttime();
}
inline void SpanObject::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void SpanObject::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:SpanObject.startTime)
}

// int64 endTime = 4;
inline void SpanObject::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpanObject::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpanObject::endtime() const {
  // @@protoc_insertion_point(field_get:SpanObject.endTime)
  return _internal_endtime();
}
inline void SpanObject::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endtime_ = value;
}
inline void SpanObject::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:SpanObject.endTime)
}

// repeated .TraceSegmentReference refs = 5;
inline int SpanObject::_internal_refs_size() const {
  return refs_.size();
}
inline int SpanObject::refs_size() const {
  return _internal_refs_size();
}
inline void SpanObject::clear_refs() {
  refs_.Clear();
}
inline ::TraceSegmentReference* SpanObject::mutable_refs(int index) {
  // @@protoc_insertion_point(field_mutable:SpanObject.refs)
  return refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TraceSegmentReference >*
SpanObject::mutable_refs() {
  // @@protoc_insertion_point(field_mutable_list:SpanObject.refs)
  return &refs_;
}
inline const ::TraceSegmentReference& SpanObject::_internal_refs(int index) const {
  return refs_.Get(index);
}
inline const ::TraceSegmentReference& SpanObject::refs(int index) const {
  // @@protoc_insertion_point(field_get:SpanObject.refs)
  return _internal_refs(index);
}
inline ::TraceSegmentReference* SpanObject::_internal_add_refs() {
  return refs_.Add();
}
inline ::TraceSegmentReference* SpanObject::add_refs() {
  // @@protoc_insertion_point(field_add:SpanObject.refs)
  return _internal_add_refs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TraceSegmentReference >&
SpanObject::refs() const {
  // @@protoc_insertion_point(field_list:SpanObject.refs)
  return refs_;
}

// int32 operationNameId = 6;
inline void SpanObject::clear_operationnameid() {
  operationnameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::_internal_operationnameid() const {
  return operationnameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::operationnameid() const {
  // @@protoc_insertion_point(field_get:SpanObject.operationNameId)
  return _internal_operationnameid();
}
inline void SpanObject::_internal_set_operationnameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operationnameid_ = value;
}
inline void SpanObject::set_operationnameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operationnameid(value);
  // @@protoc_insertion_point(field_set:SpanObject.operationNameId)
}

// string operationName = 7;
inline void SpanObject::clear_operationname() {
  operationname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpanObject::operationname() const {
  // @@protoc_insertion_point(field_get:SpanObject.operationName)
  return _internal_operationname();
}
inline void SpanObject::set_operationname(const std::string& value) {
  _internal_set_operationname(value);
  // @@protoc_insertion_point(field_set:SpanObject.operationName)
}
inline std::string* SpanObject::mutable_operationname() {
  // @@protoc_insertion_point(field_mutable:SpanObject.operationName)
  return _internal_mutable_operationname();
}
inline const std::string& SpanObject::_internal_operationname() const {
  return operationname_.GetNoArena();
}
inline void SpanObject::_internal_set_operationname(const std::string& value) {
  
  operationname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpanObject::set_operationname(std::string&& value) {
  
  operationname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SpanObject.operationName)
}
inline void SpanObject::set_operationname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operationname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpanObject.operationName)
}
inline void SpanObject::set_operationname(const char* value, size_t size) {
  
  operationname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpanObject.operationName)
}
inline std::string* SpanObject::_internal_mutable_operationname() {
  
  return operationname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpanObject::release_operationname() {
  // @@protoc_insertion_point(field_release:SpanObject.operationName)
  
  return operationname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpanObject::set_allocated_operationname(std::string* operationname) {
  if (operationname != nullptr) {
    
  } else {
    
  }
  operationname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operationname);
  // @@protoc_insertion_point(field_set_allocated:SpanObject.operationName)
}

// int32 peerId = 8;
inline void SpanObject::clear_peerid() {
  peerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::_internal_peerid() const {
  return peerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::peerid() const {
  // @@protoc_insertion_point(field_get:SpanObject.peerId)
  return _internal_peerid();
}
inline void SpanObject::_internal_set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  peerid_ = value;
}
inline void SpanObject::set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peerid(value);
  // @@protoc_insertion_point(field_set:SpanObject.peerId)
}

// string peer = 9;
inline void SpanObject::clear_peer() {
  peer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpanObject::peer() const {
  // @@protoc_insertion_point(field_get:SpanObject.peer)
  return _internal_peer();
}
inline void SpanObject::set_peer(const std::string& value) {
  _internal_set_peer(value);
  // @@protoc_insertion_point(field_set:SpanObject.peer)
}
inline std::string* SpanObject::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:SpanObject.peer)
  return _internal_mutable_peer();
}
inline const std::string& SpanObject::_internal_peer() const {
  return peer_.GetNoArena();
}
inline void SpanObject::_internal_set_peer(const std::string& value) {
  
  peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpanObject::set_peer(std::string&& value) {
  
  peer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SpanObject.peer)
}
inline void SpanObject::set_peer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpanObject.peer)
}
inline void SpanObject::set_peer(const char* value, size_t size) {
  
  peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpanObject.peer)
}
inline std::string* SpanObject::_internal_mutable_peer() {
  
  return peer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpanObject::release_peer() {
  // @@protoc_insertion_point(field_release:SpanObject.peer)
  
  return peer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpanObject::set_allocated_peer(std::string* peer) {
  if (peer != nullptr) {
    
  } else {
    
  }
  peer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer);
  // @@protoc_insertion_point(field_set_allocated:SpanObject.peer)
}

// .SpanType spanType = 10;
inline void SpanObject::clear_spantype() {
  spantype_ = 0;
}
inline ::SpanType SpanObject::_internal_spantype() const {
  return static_cast< ::SpanType >(spantype_);
}
inline ::SpanType SpanObject::spantype() const {
  // @@protoc_insertion_point(field_get:SpanObject.spanType)
  return _internal_spantype();
}
inline void SpanObject::_internal_set_spantype(::SpanType value) {
  
  spantype_ = value;
}
inline void SpanObject::set_spantype(::SpanType value) {
  _internal_set_spantype(value);
  // @@protoc_insertion_point(field_set:SpanObject.spanType)
}

// .SpanLayer spanLayer = 11;
inline void SpanObject::clear_spanlayer() {
  spanlayer_ = 0;
}
inline ::SpanLayer SpanObject::_internal_spanlayer() const {
  return static_cast< ::SpanLayer >(spanlayer_);
}
inline ::SpanLayer SpanObject::spanlayer() const {
  // @@protoc_insertion_point(field_get:SpanObject.spanLayer)
  return _internal_spanlayer();
}
inline void SpanObject::_internal_set_spanlayer(::SpanLayer value) {
  
  spanlayer_ = value;
}
inline void SpanObject::set_spanlayer(::SpanLayer value) {
  _internal_set_spanlayer(value);
  // @@protoc_insertion_point(field_set:SpanObject.spanLayer)
}

// int32 componentId = 12;
inline void SpanObject::clear_componentid() {
  componentid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::_internal_componentid() const {
  return componentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObject::componentid() const {
  // @@protoc_insertion_point(field_get:SpanObject.componentId)
  return _internal_componentid();
}
inline void SpanObject::_internal_set_componentid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  componentid_ = value;
}
inline void SpanObject::set_componentid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_componentid(value);
  // @@protoc_insertion_point(field_set:SpanObject.componentId)
}

// string component = 13;
inline void SpanObject::clear_component() {
  component_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpanObject::component() const {
  // @@protoc_insertion_point(field_get:SpanObject.component)
  return _internal_component();
}
inline void SpanObject::set_component(const std::string& value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:SpanObject.component)
}
inline std::string* SpanObject::mutable_component() {
  // @@protoc_insertion_point(field_mutable:SpanObject.component)
  return _internal_mutable_component();
}
inline const std::string& SpanObject::_internal_component() const {
  return component_.GetNoArena();
}
inline void SpanObject::_internal_set_component(const std::string& value) {
  
  component_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpanObject::set_component(std::string&& value) {
  
  component_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SpanObject.component)
}
inline void SpanObject::set_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpanObject.component)
}
inline void SpanObject::set_component(const char* value, size_t size) {
  
  component_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpanObject.component)
}
inline std::string* SpanObject::_internal_mutable_component() {
  
  return component_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpanObject::release_component() {
  // @@protoc_insertion_point(field_release:SpanObject.component)
  
  return component_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpanObject::set_allocated_component(std::string* component) {
  if (component != nullptr) {
    
  } else {
    
  }
  component_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:SpanObject.component)
}

// bool isError = 14;
inline void SpanObject::clear_iserror() {
  iserror_ = false;
}
inline bool SpanObject::_internal_iserror() const {
  return iserror_;
}
inline bool SpanObject::iserror() const {
  // @@protoc_insertion_point(field_get:SpanObject.isError)
  return _internal_iserror();
}
inline void SpanObject::_internal_set_iserror(bool value) {
  
  iserror_ = value;
}
inline void SpanObject::set_iserror(bool value) {
  _internal_set_iserror(value);
  // @@protoc_insertion_point(field_set:SpanObject.isError)
}

// repeated .KeyWithStringValue tags = 15;
inline int SpanObject::_internal_tags_size() const {
  return tags_.size();
}
inline int SpanObject::tags_size() const {
  return _internal_tags_size();
}
inline ::KeyWithStringValue* SpanObject::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:SpanObject.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue >*
SpanObject::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:SpanObject.tags)
  return &tags_;
}
inline const ::KeyWithStringValue& SpanObject::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::KeyWithStringValue& SpanObject::tags(int index) const {
  // @@protoc_insertion_point(field_get:SpanObject.tags)
  return _internal_tags(index);
}
inline ::KeyWithStringValue* SpanObject::_internal_add_tags() {
  return tags_.Add();
}
inline ::KeyWithStringValue* SpanObject::add_tags() {
  // @@protoc_insertion_point(field_add:SpanObject.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue >&
SpanObject::tags() const {
  // @@protoc_insertion_point(field_list:SpanObject.tags)
  return tags_;
}

// repeated .LogMessage logs = 16;
inline int SpanObject::_internal_logs_size() const {
  return logs_.size();
}
inline int SpanObject::logs_size() const {
  return _internal_logs_size();
}
inline void SpanObject::clear_logs() {
  logs_.Clear();
}
inline ::LogMessage* SpanObject::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:SpanObject.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogMessage >*
SpanObject::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:SpanObject.logs)
  return &logs_;
}
inline const ::LogMessage& SpanObject::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::LogMessage& SpanObject::logs(int index) const {
  // @@protoc_insertion_point(field_get:SpanObject.logs)
  return _internal_logs(index);
}
inline ::LogMessage* SpanObject::_internal_add_logs() {
  return logs_.Add();
}
inline ::LogMessage* SpanObject::add_logs() {
  // @@protoc_insertion_point(field_add:SpanObject.logs)
  return _internal_add_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogMessage >&
SpanObject::logs() const {
  // @@protoc_insertion_point(field_list:SpanObject.logs)
  return logs_;
}

// -------------------------------------------------------------------

// LogMessage

// int64 time = 1;
inline void LogMessage::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogMessage::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogMessage::time() const {
  // @@protoc_insertion_point(field_get:LogMessage.time)
  return _internal_time();
}
inline void LogMessage::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void LogMessage::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:LogMessage.time)
}

// repeated .KeyWithStringValue data = 2;
inline int LogMessage::_internal_data_size() const {
  return data_.size();
}
inline int LogMessage::data_size() const {
  return _internal_data_size();
}
inline ::KeyWithStringValue* LogMessage::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:LogMessage.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue >*
LogMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:LogMessage.data)
  return &data_;
}
inline const ::KeyWithStringValue& LogMessage::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::KeyWithStringValue& LogMessage::data(int index) const {
  // @@protoc_insertion_point(field_get:LogMessage.data)
  return _internal_data(index);
}
inline ::KeyWithStringValue* LogMessage::_internal_add_data() {
  return data_.Add();
}
inline ::KeyWithStringValue* LogMessage::add_data() {
  // @@protoc_insertion_point(field_add:LogMessage.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithStringValue >&
LogMessage::data() const {
  // @@protoc_insertion_point(field_list:LogMessage.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fTraceSegmentService_2eproto
