// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent/ApplicationRegisterService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fApplicationRegisterService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fApplicationRegisterService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "language-agent/KeyWithIntegerValue.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fApplicationRegisterService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_language_2dagent_2fApplicationRegisterService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2fApplicationRegisterService_2eproto;
class Application;
class ApplicationDefaultTypeInternal;
extern ApplicationDefaultTypeInternal _Application_default_instance_;
class ApplicationMapping;
class ApplicationMappingDefaultTypeInternal;
extern ApplicationMappingDefaultTypeInternal _ApplicationMapping_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Application* Arena::CreateMaybeMessage<::Application>(Arena*);
template<> ::ApplicationMapping* Arena::CreateMaybeMessage<::ApplicationMapping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Application :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Application) */ {
 public:
  Application();
  virtual ~Application();

  Application(const Application& from);
  Application(Application&& from) noexcept
    : Application() {
    *this = ::std::move(from);
  }

  inline Application& operator=(const Application& from) {
    CopyFrom(from);
    return *this;
  }
  inline Application& operator=(Application&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Application& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Application* internal_default_instance() {
    return reinterpret_cast<const Application*>(
               &_Application_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Application& a, Application& b) {
    a.Swap(&b);
  }
  inline void Swap(Application* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Application* New() const final {
    return CreateMaybeMessage<Application>(nullptr);
  }

  Application* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Application>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Application& from);
  void MergeFrom(const Application& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Application* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Application";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fApplicationRegisterService_2eproto);
    return ::descriptor_table_language_2dagent_2fApplicationRegisterService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationCodeFieldNumber = 1,
  };
  // string applicationCode = 1;
  void clear_applicationcode();
  const std::string& applicationcode() const;
  void set_applicationcode(const std::string& value);
  void set_applicationcode(std::string&& value);
  void set_applicationcode(const char* value);
  void set_applicationcode(const char* value, size_t size);
  std::string* mutable_applicationcode();
  std::string* release_applicationcode();
  void set_allocated_applicationcode(std::string* applicationcode);
  private:
  const std::string& _internal_applicationcode() const;
  void _internal_set_applicationcode(const std::string& value);
  std::string* _internal_mutable_applicationcode();
  public:

  // @@protoc_insertion_point(class_scope:Application)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fApplicationRegisterService_2eproto;
};
// -------------------------------------------------------------------

class ApplicationMapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ApplicationMapping) */ {
 public:
  ApplicationMapping();
  virtual ~ApplicationMapping();

  ApplicationMapping(const ApplicationMapping& from);
  ApplicationMapping(ApplicationMapping&& from) noexcept
    : ApplicationMapping() {
    *this = ::std::move(from);
  }

  inline ApplicationMapping& operator=(const ApplicationMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationMapping& operator=(ApplicationMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationMapping* internal_default_instance() {
    return reinterpret_cast<const ApplicationMapping*>(
               &_ApplicationMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApplicationMapping& a, ApplicationMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationMapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationMapping* New() const final {
    return CreateMaybeMessage<ApplicationMapping>(nullptr);
  }

  ApplicationMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationMapping& from);
  void MergeFrom(const ApplicationMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ApplicationMapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fApplicationRegisterService_2eproto);
    return ::descriptor_table_language_2dagent_2fApplicationRegisterService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationFieldNumber = 1,
  };
  // .KeyWithIntegerValue application = 1;
  bool has_application() const;
  private:
  bool _internal_has_application() const;
  public:
  void clear_application();
  const ::KeyWithIntegerValue& application() const;
  ::KeyWithIntegerValue* release_application();
  ::KeyWithIntegerValue* mutable_application();
  void set_allocated_application(::KeyWithIntegerValue* application);
  private:
  const ::KeyWithIntegerValue& _internal_application() const;
  ::KeyWithIntegerValue* _internal_mutable_application();
  public:

  // @@protoc_insertion_point(class_scope:ApplicationMapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::KeyWithIntegerValue* application_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fApplicationRegisterService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Application

// string applicationCode = 1;
inline void Application::clear_applicationcode() {
  applicationcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Application::applicationcode() const {
  // @@protoc_insertion_point(field_get:Application.applicationCode)
  return _internal_applicationcode();
}
inline void Application::set_applicationcode(const std::string& value) {
  _internal_set_applicationcode(value);
  // @@protoc_insertion_point(field_set:Application.applicationCode)
}
inline std::string* Application::mutable_applicationcode() {
  // @@protoc_insertion_point(field_mutable:Application.applicationCode)
  return _internal_mutable_applicationcode();
}
inline const std::string& Application::_internal_applicationcode() const {
  return applicationcode_.GetNoArena();
}
inline void Application::_internal_set_applicationcode(const std::string& value) {
  
  applicationcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Application::set_applicationcode(std::string&& value) {
  
  applicationcode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Application.applicationCode)
}
inline void Application::set_applicationcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicationcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Application.applicationCode)
}
inline void Application::set_applicationcode(const char* value, size_t size) {
  
  applicationcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Application.applicationCode)
}
inline std::string* Application::_internal_mutable_applicationcode() {
  
  return applicationcode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Application::release_applicationcode() {
  // @@protoc_insertion_point(field_release:Application.applicationCode)
  
  return applicationcode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_applicationcode(std::string* applicationcode) {
  if (applicationcode != nullptr) {
    
  } else {
    
  }
  applicationcode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationcode);
  // @@protoc_insertion_point(field_set_allocated:Application.applicationCode)
}

// -------------------------------------------------------------------

// ApplicationMapping

// .KeyWithIntegerValue application = 1;
inline bool ApplicationMapping::_internal_has_application() const {
  return this != internal_default_instance() && application_ != nullptr;
}
inline bool ApplicationMapping::has_application() const {
  return _internal_has_application();
}
inline const ::KeyWithIntegerValue& ApplicationMapping::_internal_application() const {
  const ::KeyWithIntegerValue* p = application_;
  return p != nullptr ? *p : *reinterpret_cast<const ::KeyWithIntegerValue*>(
      &::_KeyWithIntegerValue_default_instance_);
}
inline const ::KeyWithIntegerValue& ApplicationMapping::application() const {
  // @@protoc_insertion_point(field_get:ApplicationMapping.application)
  return _internal_application();
}
inline ::KeyWithIntegerValue* ApplicationMapping::release_application() {
  // @@protoc_insertion_point(field_release:ApplicationMapping.application)
  
  ::KeyWithIntegerValue* temp = application_;
  application_ = nullptr;
  return temp;
}
inline ::KeyWithIntegerValue* ApplicationMapping::_internal_mutable_application() {
  
  if (application_ == nullptr) {
    auto* p = CreateMaybeMessage<::KeyWithIntegerValue>(GetArenaNoVirtual());
    application_ = p;
  }
  return application_;
}
inline ::KeyWithIntegerValue* ApplicationMapping::mutable_application() {
  // @@protoc_insertion_point(field_mutable:ApplicationMapping.application)
  return _internal_mutable_application();
}
inline void ApplicationMapping::set_allocated_application(::KeyWithIntegerValue* application) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(application_);
  }
  if (application) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      application = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, application, submessage_arena);
    }
    
  } else {
    
  }
  application_ = application;
  // @@protoc_insertion_point(field_set_allocated:ApplicationMapping.application)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fApplicationRegisterService_2eproto
