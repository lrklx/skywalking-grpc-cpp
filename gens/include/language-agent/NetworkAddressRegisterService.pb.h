// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent/NetworkAddressRegisterService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fNetworkAddressRegisterService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fNetworkAddressRegisterService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "language-agent/KeyWithIntegerValue.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_language_2dagent_2fNetworkAddressRegisterService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_language_2dagent_2fNetworkAddressRegisterService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto;
class NetworkAddressMappings;
class NetworkAddressMappingsDefaultTypeInternal;
extern NetworkAddressMappingsDefaultTypeInternal _NetworkAddressMappings_default_instance_;
class NetworkAddresses;
class NetworkAddressesDefaultTypeInternal;
extern NetworkAddressesDefaultTypeInternal _NetworkAddresses_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NetworkAddressMappings* Arena::CreateMaybeMessage<::NetworkAddressMappings>(Arena*);
template<> ::NetworkAddresses* Arena::CreateMaybeMessage<::NetworkAddresses>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class NetworkAddresses :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkAddresses) */ {
 public:
  NetworkAddresses();
  virtual ~NetworkAddresses();

  NetworkAddresses(const NetworkAddresses& from);
  NetworkAddresses(NetworkAddresses&& from) noexcept
    : NetworkAddresses() {
    *this = ::std::move(from);
  }

  inline NetworkAddresses& operator=(const NetworkAddresses& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkAddresses& operator=(NetworkAddresses&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkAddresses& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkAddresses* internal_default_instance() {
    return reinterpret_cast<const NetworkAddresses*>(
               &_NetworkAddresses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkAddresses& a, NetworkAddresses& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkAddresses* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkAddresses* New() const final {
    return CreateMaybeMessage<NetworkAddresses>(nullptr);
  }

  NetworkAddresses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkAddresses>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkAddresses& from);
  void MergeFrom(const NetworkAddresses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkAddresses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkAddresses";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto);
    return ::descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // @@protoc_insertion_point(class_scope:NetworkAddresses)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fNetworkAddressRegisterService_2eproto;
};
// -------------------------------------------------------------------

class NetworkAddressMappings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetworkAddressMappings) */ {
 public:
  NetworkAddressMappings();
  virtual ~NetworkAddressMappings();

  NetworkAddressMappings(const NetworkAddressMappings& from);
  NetworkAddressMappings(NetworkAddressMappings&& from) noexcept
    : NetworkAddressMappings() {
    *this = ::std::move(from);
  }

  inline NetworkAddressMappings& operator=(const NetworkAddressMappings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkAddressMappings& operator=(NetworkAddressMappings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkAddressMappings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkAddressMappings* internal_default_instance() {
    return reinterpret_cast<const NetworkAddressMappings*>(
               &_NetworkAddressMappings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkAddressMappings& a, NetworkAddressMappings& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkAddressMappings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkAddressMappings* New() const final {
    return CreateMaybeMessage<NetworkAddressMappings>(nullptr);
  }

  NetworkAddressMappings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkAddressMappings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkAddressMappings& from);
  void MergeFrom(const NetworkAddressMappings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkAddressMappings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetworkAddressMappings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto);
    return ::descriptor_table_language_2dagent_2fNetworkAddressRegisterService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressIdsFieldNumber = 1,
  };
  // repeated .KeyWithIntegerValue addressIds = 1;
  int addressids_size() const;
  private:
  int _internal_addressids_size() const;
  public:
  void clear_addressids();
  ::KeyWithIntegerValue* mutable_addressids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithIntegerValue >*
      mutable_addressids();
  private:
  const ::KeyWithIntegerValue& _internal_addressids(int index) const;
  ::KeyWithIntegerValue* _internal_add_addressids();
  public:
  const ::KeyWithIntegerValue& addressids(int index) const;
  ::KeyWithIntegerValue* add_addressids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithIntegerValue >&
      addressids() const;

  // @@protoc_insertion_point(class_scope:NetworkAddressMappings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithIntegerValue > addressids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2fNetworkAddressRegisterService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkAddresses

// repeated string addresses = 1;
inline int NetworkAddresses::_internal_addresses_size() const {
  return addresses_.size();
}
inline int NetworkAddresses::addresses_size() const {
  return _internal_addresses_size();
}
inline void NetworkAddresses::clear_addresses() {
  addresses_.Clear();
}
inline std::string* NetworkAddresses::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:NetworkAddresses.addresses)
  return _internal_add_addresses();
}
inline const std::string& NetworkAddresses::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& NetworkAddresses::addresses(int index) const {
  // @@protoc_insertion_point(field_get:NetworkAddresses.addresses)
  return _internal_addresses(index);
}
inline std::string* NetworkAddresses::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkAddresses.addresses)
  return addresses_.Mutable(index);
}
inline void NetworkAddresses::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NetworkAddresses.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void NetworkAddresses::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NetworkAddresses.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void NetworkAddresses::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetworkAddresses.addresses)
}
inline void NetworkAddresses::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetworkAddresses.addresses)
}
inline std::string* NetworkAddresses::_internal_add_addresses() {
  return addresses_.Add();
}
inline void NetworkAddresses::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetworkAddresses.addresses)
}
inline void NetworkAddresses::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NetworkAddresses.addresses)
}
inline void NetworkAddresses::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetworkAddresses.addresses)
}
inline void NetworkAddresses::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetworkAddresses.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetworkAddresses::addresses() const {
  // @@protoc_insertion_point(field_list:NetworkAddresses.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetworkAddresses::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:NetworkAddresses.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// NetworkAddressMappings

// repeated .KeyWithIntegerValue addressIds = 1;
inline int NetworkAddressMappings::_internal_addressids_size() const {
  return addressids_.size();
}
inline int NetworkAddressMappings::addressids_size() const {
  return _internal_addressids_size();
}
inline ::KeyWithIntegerValue* NetworkAddressMappings::mutable_addressids(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkAddressMappings.addressIds)
  return addressids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithIntegerValue >*
NetworkAddressMappings::mutable_addressids() {
  // @@protoc_insertion_point(field_mutable_list:NetworkAddressMappings.addressIds)
  return &addressids_;
}
inline const ::KeyWithIntegerValue& NetworkAddressMappings::_internal_addressids(int index) const {
  return addressids_.Get(index);
}
inline const ::KeyWithIntegerValue& NetworkAddressMappings::addressids(int index) const {
  // @@protoc_insertion_point(field_get:NetworkAddressMappings.addressIds)
  return _internal_addressids(index);
}
inline ::KeyWithIntegerValue* NetworkAddressMappings::_internal_add_addressids() {
  return addressids_.Add();
}
inline ::KeyWithIntegerValue* NetworkAddressMappings::add_addressids() {
  // @@protoc_insertion_point(field_add:NetworkAddressMappings.addressIds)
  return _internal_add_addressids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyWithIntegerValue >&
NetworkAddressMappings::addressids() const {
  // @@protoc_insertion_point(field_list:NetworkAddressMappings.addressIds)
  return addressids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2fNetworkAddressRegisterService_2eproto
