// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent-v2/trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2dv2_2ftrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2dv2_2ftrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/common.pb.h"
#include "common/trace-common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_language_2dagent_2dv2_2ftrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_language_2dagent_2dv2_2ftrace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2dv2_2ftrace_2eproto;
class Log;
class LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class SegmentObject;
class SegmentObjectDefaultTypeInternal;
extern SegmentObjectDefaultTypeInternal _SegmentObject_default_instance_;
class SegmentReference;
class SegmentReferenceDefaultTypeInternal;
extern SegmentReferenceDefaultTypeInternal _SegmentReference_default_instance_;
class SpanObjectV2;
class SpanObjectV2DefaultTypeInternal;
extern SpanObjectV2DefaultTypeInternal _SpanObjectV2_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Log* Arena::CreateMaybeMessage<::Log>(Arena*);
template<> ::SegmentObject* Arena::CreateMaybeMessage<::SegmentObject>(Arena*);
template<> ::SegmentReference* Arena::CreateMaybeMessage<::SegmentReference>(Arena*);
template<> ::SpanObjectV2* Arena::CreateMaybeMessage<::SpanObjectV2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SegmentObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SegmentObject) */ {
 public:
  SegmentObject();
  virtual ~SegmentObject();

  SegmentObject(const SegmentObject& from);
  SegmentObject(SegmentObject&& from) noexcept
    : SegmentObject() {
    *this = ::std::move(from);
  }

  inline SegmentObject& operator=(const SegmentObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentObject& operator=(SegmentObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentObject* internal_default_instance() {
    return reinterpret_cast<const SegmentObject*>(
               &_SegmentObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SegmentObject& a, SegmentObject& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentObject* New() const final {
    return CreateMaybeMessage<SegmentObject>(nullptr);
  }

  SegmentObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentObject& from);
  void MergeFrom(const SegmentObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SegmentObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2dv2_2ftrace_2eproto);
    return ::descriptor_table_language_2dagent_2dv2_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpansFieldNumber = 2,
    kTraceSegmentIdFieldNumber = 1,
    kServiceIdFieldNumber = 3,
    kServiceInstanceIdFieldNumber = 4,
    kIsSizeLimitedFieldNumber = 5,
  };
  // repeated .SpanObjectV2 spans = 2;
  int spans_size() const;
  private:
  int _internal_spans_size() const;
  public:
  void clear_spans();
  ::SpanObjectV2* mutable_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObjectV2 >*
      mutable_spans();
  private:
  const ::SpanObjectV2& _internal_spans(int index) const;
  ::SpanObjectV2* _internal_add_spans();
  public:
  const ::SpanObjectV2& spans(int index) const;
  ::SpanObjectV2* add_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObjectV2 >&
      spans() const;

  // .UniqueId traceSegmentId = 1;
  bool has_tracesegmentid() const;
  private:
  bool _internal_has_tracesegmentid() const;
  public:
  void clear_tracesegmentid();
  const ::UniqueId& tracesegmentid() const;
  ::UniqueId* release_tracesegmentid();
  ::UniqueId* mutable_tracesegmentid();
  void set_allocated_tracesegmentid(::UniqueId* tracesegmentid);
  private:
  const ::UniqueId& _internal_tracesegmentid() const;
  ::UniqueId* _internal_mutable_tracesegmentid();
  public:

  // int32 serviceId = 3;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 serviceInstanceId = 4;
  void clear_serviceinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceinstanceid() const;
  void set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceinstanceid() const;
  void _internal_set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isSizeLimited = 5;
  void clear_issizelimited();
  bool issizelimited() const;
  void set_issizelimited(bool value);
  private:
  bool _internal_issizelimited() const;
  void _internal_set_issizelimited(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SegmentObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObjectV2 > spans_;
  ::UniqueId* tracesegmentid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceinstanceid_;
  bool issizelimited_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2dv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class SegmentReference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SegmentReference) */ {
 public:
  SegmentReference();
  virtual ~SegmentReference();

  SegmentReference(const SegmentReference& from);
  SegmentReference(SegmentReference&& from) noexcept
    : SegmentReference() {
    *this = ::std::move(from);
  }

  inline SegmentReference& operator=(const SegmentReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentReference& operator=(SegmentReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentReference* internal_default_instance() {
    return reinterpret_cast<const SegmentReference*>(
               &_SegmentReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SegmentReference& a, SegmentReference& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentReference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentReference* New() const final {
    return CreateMaybeMessage<SegmentReference>(nullptr);
  }

  SegmentReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentReference& from);
  void MergeFrom(const SegmentReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SegmentReference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2dv2_2ftrace_2eproto);
    return ::descriptor_table_language_2dagent_2dv2_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkAddressFieldNumber = 5,
    kEntryEndpointFieldNumber = 8,
    kParentEndpointFieldNumber = 10,
    kParentTraceSegmentIdFieldNumber = 2,
    kRefTypeFieldNumber = 1,
    kParentSpanIdFieldNumber = 3,
    kParentServiceInstanceIdFieldNumber = 4,
    kNetworkAddressIdFieldNumber = 6,
    kEntryServiceInstanceIdFieldNumber = 7,
    kEntryEndpointIdFieldNumber = 9,
    kParentEndpointIdFieldNumber = 11,
  };
  // string networkAddress = 5;
  void clear_networkaddress();
  const std::string& networkaddress() const;
  void set_networkaddress(const std::string& value);
  void set_networkaddress(std::string&& value);
  void set_networkaddress(const char* value);
  void set_networkaddress(const char* value, size_t size);
  std::string* mutable_networkaddress();
  std::string* release_networkaddress();
  void set_allocated_networkaddress(std::string* networkaddress);
  private:
  const std::string& _internal_networkaddress() const;
  void _internal_set_networkaddress(const std::string& value);
  std::string* _internal_mutable_networkaddress();
  public:

  // string entryEndpoint = 8;
  void clear_entryendpoint();
  const std::string& entryendpoint() const;
  void set_entryendpoint(const std::string& value);
  void set_entryendpoint(std::string&& value);
  void set_entryendpoint(const char* value);
  void set_entryendpoint(const char* value, size_t size);
  std::string* mutable_entryendpoint();
  std::string* release_entryendpoint();
  void set_allocated_entryendpoint(std::string* entryendpoint);
  private:
  const std::string& _internal_entryendpoint() const;
  void _internal_set_entryendpoint(const std::string& value);
  std::string* _internal_mutable_entryendpoint();
  public:

  // string parentEndpoint = 10;
  void clear_parentendpoint();
  const std::string& parentendpoint() const;
  void set_parentendpoint(const std::string& value);
  void set_parentendpoint(std::string&& value);
  void set_parentendpoint(const char* value);
  void set_parentendpoint(const char* value, size_t size);
  std::string* mutable_parentendpoint();
  std::string* release_parentendpoint();
  void set_allocated_parentendpoint(std::string* parentendpoint);
  private:
  const std::string& _internal_parentendpoint() const;
  void _internal_set_parentendpoint(const std::string& value);
  std::string* _internal_mutable_parentendpoint();
  public:

  // .UniqueId parentTraceSegmentId = 2;
  bool has_parenttracesegmentid() const;
  private:
  bool _internal_has_parenttracesegmentid() const;
  public:
  void clear_parenttracesegmentid();
  const ::UniqueId& parenttracesegmentid() const;
  ::UniqueId* release_parenttracesegmentid();
  ::UniqueId* mutable_parenttracesegmentid();
  void set_allocated_parenttracesegmentid(::UniqueId* parenttracesegmentid);
  private:
  const ::UniqueId& _internal_parenttracesegmentid() const;
  ::UniqueId* _internal_mutable_parenttracesegmentid();
  public:

  // .RefType refType = 1;
  void clear_reftype();
  ::RefType reftype() const;
  void set_reftype(::RefType value);
  private:
  ::RefType _internal_reftype() const;
  void _internal_set_reftype(::RefType value);
  public:

  // int32 parentSpanId = 3;
  void clear_parentspanid();
  ::PROTOBUF_NAMESPACE_ID::int32 parentspanid() const;
  void set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parentspanid() const;
  void _internal_set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parentServiceInstanceId = 4;
  void clear_parentserviceinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 parentserviceinstanceid() const;
  void set_parentserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parentserviceinstanceid() const;
  void _internal_set_parentserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 networkAddressId = 6;
  void clear_networkaddressid();
  ::PROTOBUF_NAMESPACE_ID::int32 networkaddressid() const;
  void set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_networkaddressid() const;
  void _internal_set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 entryServiceInstanceId = 7;
  void clear_entryserviceinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 entryserviceinstanceid() const;
  void set_entryserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entryserviceinstanceid() const;
  void _internal_set_entryserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 entryEndpointId = 9;
  void clear_entryendpointid();
  ::PROTOBUF_NAMESPACE_ID::int32 entryendpointid() const;
  void set_entryendpointid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entryendpointid() const;
  void _internal_set_entryendpointid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parentEndpointId = 11;
  void clear_parentendpointid();
  ::PROTOBUF_NAMESPACE_ID::int32 parentendpointid() const;
  void set_parentendpointid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parentendpointid() const;
  void _internal_set_parentendpointid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SegmentReference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networkaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entryendpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentendpoint_;
  ::UniqueId* parenttracesegmentid_;
  int reftype_;
  ::PROTOBUF_NAMESPACE_ID::int32 parentspanid_;
  ::PROTOBUF_NAMESPACE_ID::int32 parentserviceinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 networkaddressid_;
  ::PROTOBUF_NAMESPACE_ID::int32 entryserviceinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 entryendpointid_;
  ::PROTOBUF_NAMESPACE_ID::int32 parentendpointid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2dv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class SpanObjectV2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SpanObjectV2) */ {
 public:
  SpanObjectV2();
  virtual ~SpanObjectV2();

  SpanObjectV2(const SpanObjectV2& from);
  SpanObjectV2(SpanObjectV2&& from) noexcept
    : SpanObjectV2() {
    *this = ::std::move(from);
  }

  inline SpanObjectV2& operator=(const SpanObjectV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpanObjectV2& operator=(SpanObjectV2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpanObjectV2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpanObjectV2* internal_default_instance() {
    return reinterpret_cast<const SpanObjectV2*>(
               &_SpanObjectV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpanObjectV2& a, SpanObjectV2& b) {
    a.Swap(&b);
  }
  inline void Swap(SpanObjectV2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpanObjectV2* New() const final {
    return CreateMaybeMessage<SpanObjectV2>(nullptr);
  }

  SpanObjectV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpanObjectV2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpanObjectV2& from);
  void MergeFrom(const SpanObjectV2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpanObjectV2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SpanObjectV2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2dv2_2ftrace_2eproto);
    return ::descriptor_table_language_2dagent_2dv2_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefsFieldNumber = 5,
    kTagsFieldNumber = 15,
    kLogsFieldNumber = 16,
    kOperationNameFieldNumber = 7,
    kPeerFieldNumber = 9,
    kComponentFieldNumber = 13,
    kSpanIdFieldNumber = 1,
    kParentSpanIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kOperationNameIdFieldNumber = 6,
    kPeerIdFieldNumber = 8,
    kSpanTypeFieldNumber = 10,
    kSpanLayerFieldNumber = 11,
    kComponentIdFieldNumber = 12,
    kIsErrorFieldNumber = 14,
  };
  // repeated .SegmentReference refs = 5;
  int refs_size() const;
  private:
  int _internal_refs_size() const;
  public:
  void clear_refs();
  ::SegmentReference* mutable_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentReference >*
      mutable_refs();
  private:
  const ::SegmentReference& _internal_refs(int index) const;
  ::SegmentReference* _internal_add_refs();
  public:
  const ::SegmentReference& refs(int index) const;
  ::SegmentReference* add_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentReference >&
      refs() const;

  // repeated .KeyStringValuePair tags = 15;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::KeyStringValuePair* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
      mutable_tags();
  private:
  const ::KeyStringValuePair& _internal_tags(int index) const;
  ::KeyStringValuePair* _internal_add_tags();
  public:
  const ::KeyStringValuePair& tags(int index) const;
  ::KeyStringValuePair* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
      tags() const;

  // repeated .Log logs = 16;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::Log* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Log >*
      mutable_logs();
  private:
  const ::Log& _internal_logs(int index) const;
  ::Log* _internal_add_logs();
  public:
  const ::Log& logs(int index) const;
  ::Log* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Log >&
      logs() const;

  // string operationName = 7;
  void clear_operationname();
  const std::string& operationname() const;
  void set_operationname(const std::string& value);
  void set_operationname(std::string&& value);
  void set_operationname(const char* value);
  void set_operationname(const char* value, size_t size);
  std::string* mutable_operationname();
  std::string* release_operationname();
  void set_allocated_operationname(std::string* operationname);
  private:
  const std::string& _internal_operationname() const;
  void _internal_set_operationname(const std::string& value);
  std::string* _internal_mutable_operationname();
  public:

  // string peer = 9;
  void clear_peer();
  const std::string& peer() const;
  void set_peer(const std::string& value);
  void set_peer(std::string&& value);
  void set_peer(const char* value);
  void set_peer(const char* value, size_t size);
  std::string* mutable_peer();
  std::string* release_peer();
  void set_allocated_peer(std::string* peer);
  private:
  const std::string& _internal_peer() const;
  void _internal_set_peer(const std::string& value);
  std::string* _internal_mutable_peer();
  public:

  // string component = 13;
  void clear_component();
  const std::string& component() const;
  void set_component(const std::string& value);
  void set_component(std::string&& value);
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  std::string* mutable_component();
  std::string* release_component();
  void set_allocated_component(std::string* component);
  private:
  const std::string& _internal_component() const;
  void _internal_set_component(const std::string& value);
  std::string* _internal_mutable_component();
  public:

  // int32 spanId = 1;
  void clear_spanid();
  ::PROTOBUF_NAMESPACE_ID::int32 spanid() const;
  void set_spanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spanid() const;
  void _internal_set_spanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parentSpanId = 2;
  void clear_parentspanid();
  ::PROTOBUF_NAMESPACE_ID::int32 parentspanid() const;
  void set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parentspanid() const;
  void _internal_set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 startTime = 3;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTime = 4;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 operationNameId = 6;
  void clear_operationnameid();
  ::PROTOBUF_NAMESPACE_ID::int32 operationnameid() const;
  void set_operationnameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operationnameid() const;
  void _internal_set_operationnameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 peerId = 8;
  void clear_peerid();
  ::PROTOBUF_NAMESPACE_ID::int32 peerid() const;
  void set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peerid() const;
  void _internal_set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .SpanType spanType = 10;
  void clear_spantype();
  ::SpanType spantype() const;
  void set_spantype(::SpanType value);
  private:
  ::SpanType _internal_spantype() const;
  void _internal_set_spantype(::SpanType value);
  public:

  // .SpanLayer spanLayer = 11;
  void clear_spanlayer();
  ::SpanLayer spanlayer() const;
  void set_spanlayer(::SpanLayer value);
  private:
  ::SpanLayer _internal_spanlayer() const;
  void _internal_set_spanlayer(::SpanLayer value);
  public:

  // int32 componentId = 12;
  void clear_componentid();
  ::PROTOBUF_NAMESPACE_ID::int32 componentid() const;
  void set_componentid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_componentid() const;
  void _internal_set_componentid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isError = 14;
  void clear_iserror();
  bool iserror() const;
  void set_iserror(bool value);
  private:
  bool _internal_iserror() const;
  void _internal_set_iserror(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SpanObjectV2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentReference > refs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Log > logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operationname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_;
  ::PROTOBUF_NAMESPACE_ID::int32 spanid_;
  ::PROTOBUF_NAMESPACE_ID::int32 parentspanid_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 operationnameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 peerid_;
  int spantype_;
  int spanlayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 componentid_;
  bool iserror_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2dv2_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Log :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Log) */ {
 public:
  Log();
  virtual ~Log();

  Log(const Log& from);
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Log* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Log* New() const final {
    return CreateMaybeMessage<Log>(nullptr);
  }

  Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Log& from);
  void MergeFrom(const Log& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Log";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_language_2dagent_2dv2_2ftrace_2eproto);
    return ::descriptor_table_language_2dagent_2dv2_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .KeyStringValuePair data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::KeyStringValuePair* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
      mutable_data();
  private:
  const ::KeyStringValuePair& _internal_data(int index) const;
  ::KeyStringValuePair* _internal_add_data();
  public:
  const ::KeyStringValuePair& data(int index) const;
  ::KeyStringValuePair* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
      data() const;

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Log)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair > data_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_language_2dagent_2dv2_2ftrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SegmentObject

// .UniqueId traceSegmentId = 1;
inline bool SegmentObject::_internal_has_tracesegmentid() const {
  return this != internal_default_instance() && tracesegmentid_ != nullptr;
}
inline bool SegmentObject::has_tracesegmentid() const {
  return _internal_has_tracesegmentid();
}
inline const ::UniqueId& SegmentObject::_internal_tracesegmentid() const {
  const ::UniqueId* p = tracesegmentid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::UniqueId*>(
      &::_UniqueId_default_instance_);
}
inline const ::UniqueId& SegmentObject::tracesegmentid() const {
  // @@protoc_insertion_point(field_get:SegmentObject.traceSegmentId)
  return _internal_tracesegmentid();
}
inline ::UniqueId* SegmentObject::release_tracesegmentid() {
  // @@protoc_insertion_point(field_release:SegmentObject.traceSegmentId)
  
  ::UniqueId* temp = tracesegmentid_;
  tracesegmentid_ = nullptr;
  return temp;
}
inline ::UniqueId* SegmentObject::_internal_mutable_tracesegmentid() {
  
  if (tracesegmentid_ == nullptr) {
    auto* p = CreateMaybeMessage<::UniqueId>(GetArenaNoVirtual());
    tracesegmentid_ = p;
  }
  return tracesegmentid_;
}
inline ::UniqueId* SegmentObject::mutable_tracesegmentid() {
  // @@protoc_insertion_point(field_mutable:SegmentObject.traceSegmentId)
  return _internal_mutable_tracesegmentid();
}
inline void SegmentObject::set_allocated_tracesegmentid(::UniqueId* tracesegmentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracesegmentid_);
  }
  if (tracesegmentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracesegmentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracesegmentid, submessage_arena);
    }
    
  } else {
    
  }
  tracesegmentid_ = tracesegmentid;
  // @@protoc_insertion_point(field_set_allocated:SegmentObject.traceSegmentId)
}

// repeated .SpanObjectV2 spans = 2;
inline int SegmentObject::_internal_spans_size() const {
  return spans_.size();
}
inline int SegmentObject::spans_size() const {
  return _internal_spans_size();
}
inline void SegmentObject::clear_spans() {
  spans_.Clear();
}
inline ::SpanObjectV2* SegmentObject::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:SegmentObject.spans)
  return spans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObjectV2 >*
SegmentObject::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:SegmentObject.spans)
  return &spans_;
}
inline const ::SpanObjectV2& SegmentObject::_internal_spans(int index) const {
  return spans_.Get(index);
}
inline const ::SpanObjectV2& SegmentObject::spans(int index) const {
  // @@protoc_insertion_point(field_get:SegmentObject.spans)
  return _internal_spans(index);
}
inline ::SpanObjectV2* SegmentObject::_internal_add_spans() {
  return spans_.Add();
}
inline ::SpanObjectV2* SegmentObject::add_spans() {
  // @@protoc_insertion_point(field_add:SegmentObject.spans)
  return _internal_add_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SpanObjectV2 >&
SegmentObject::spans() const {
  // @@protoc_insertion_point(field_list:SegmentObject.spans)
  return spans_;
}

// int32 serviceId = 3;
inline void SegmentObject::clear_serviceid() {
  serviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentObject::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentObject::serviceid() const {
  // @@protoc_insertion_point(field_get:SegmentObject.serviceId)
  return _internal_serviceid();
}
inline void SegmentObject::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceid_ = value;
}
inline void SegmentObject::set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:SegmentObject.serviceId)
}

// int32 serviceInstanceId = 4;
inline void SegmentObject::clear_serviceinstanceid() {
  serviceinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentObject::_internal_serviceinstanceid() const {
  return serviceinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentObject::serviceinstanceid() const {
  // @@protoc_insertion_point(field_get:SegmentObject.serviceInstanceId)
  return _internal_serviceinstanceid();
}
inline void SegmentObject::_internal_set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceinstanceid_ = value;
}
inline void SegmentObject::set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceinstanceid(value);
  // @@protoc_insertion_point(field_set:SegmentObject.serviceInstanceId)
}

// bool isSizeLimited = 5;
inline void SegmentObject::clear_issizelimited() {
  issizelimited_ = false;
}
inline bool SegmentObject::_internal_issizelimited() const {
  return issizelimited_;
}
inline bool SegmentObject::issizelimited() const {
  // @@protoc_insertion_point(field_get:SegmentObject.isSizeLimited)
  return _internal_issizelimited();
}
inline void SegmentObject::_internal_set_issizelimited(bool value) {
  
  issizelimited_ = value;
}
inline void SegmentObject::set_issizelimited(bool value) {
  _internal_set_issizelimited(value);
  // @@protoc_insertion_point(field_set:SegmentObject.isSizeLimited)
}

// -------------------------------------------------------------------

// SegmentReference

// .RefType refType = 1;
inline void SegmentReference::clear_reftype() {
  reftype_ = 0;
}
inline ::RefType SegmentReference::_internal_reftype() const {
  return static_cast< ::RefType >(reftype_);
}
inline ::RefType SegmentReference::reftype() const {
  // @@protoc_insertion_point(field_get:SegmentReference.refType)
  return _internal_reftype();
}
inline void SegmentReference::_internal_set_reftype(::RefType value) {
  
  reftype_ = value;
}
inline void SegmentReference::set_reftype(::RefType value) {
  _internal_set_reftype(value);
  // @@protoc_insertion_point(field_set:SegmentReference.refType)
}

// .UniqueId parentTraceSegmentId = 2;
inline bool SegmentReference::_internal_has_parenttracesegmentid() const {
  return this != internal_default_instance() && parenttracesegmentid_ != nullptr;
}
inline bool SegmentReference::has_parenttracesegmentid() const {
  return _internal_has_parenttracesegmentid();
}
inline const ::UniqueId& SegmentReference::_internal_parenttracesegmentid() const {
  const ::UniqueId* p = parenttracesegmentid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::UniqueId*>(
      &::_UniqueId_default_instance_);
}
inline const ::UniqueId& SegmentReference::parenttracesegmentid() const {
  // @@protoc_insertion_point(field_get:SegmentReference.parentTraceSegmentId)
  return _internal_parenttracesegmentid();
}
inline ::UniqueId* SegmentReference::release_parenttracesegmentid() {
  // @@protoc_insertion_point(field_release:SegmentReference.parentTraceSegmentId)
  
  ::UniqueId* temp = parenttracesegmentid_;
  parenttracesegmentid_ = nullptr;
  return temp;
}
inline ::UniqueId* SegmentReference::_internal_mutable_parenttracesegmentid() {
  
  if (parenttracesegmentid_ == nullptr) {
    auto* p = CreateMaybeMessage<::UniqueId>(GetArenaNoVirtual());
    parenttracesegmentid_ = p;
  }
  return parenttracesegmentid_;
}
inline ::UniqueId* SegmentReference::mutable_parenttracesegmentid() {
  // @@protoc_insertion_point(field_mutable:SegmentReference.parentTraceSegmentId)
  return _internal_mutable_parenttracesegmentid();
}
inline void SegmentReference::set_allocated_parenttracesegmentid(::UniqueId* parenttracesegmentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parenttracesegmentid_);
  }
  if (parenttracesegmentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parenttracesegmentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parenttracesegmentid, submessage_arena);
    }
    
  } else {
    
  }
  parenttracesegmentid_ = parenttracesegmentid;
  // @@protoc_insertion_point(field_set_allocated:SegmentReference.parentTraceSegmentId)
}

// int32 parentSpanId = 3;
inline void SegmentReference::clear_parentspanid() {
  parentspanid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::_internal_parentspanid() const {
  return parentspanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::parentspanid() const {
  // @@protoc_insertion_point(field_get:SegmentReference.parentSpanId)
  return _internal_parentspanid();
}
inline void SegmentReference::_internal_set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parentspanid_ = value;
}
inline void SegmentReference::set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parentspanid(value);
  // @@protoc_insertion_point(field_set:SegmentReference.parentSpanId)
}

// int32 parentServiceInstanceId = 4;
inline void SegmentReference::clear_parentserviceinstanceid() {
  parentserviceinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::_internal_parentserviceinstanceid() const {
  return parentserviceinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::parentserviceinstanceid() const {
  // @@protoc_insertion_point(field_get:SegmentReference.parentServiceInstanceId)
  return _internal_parentserviceinstanceid();
}
inline void SegmentReference::_internal_set_parentserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parentserviceinstanceid_ = value;
}
inline void SegmentReference::set_parentserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parentserviceinstanceid(value);
  // @@protoc_insertion_point(field_set:SegmentReference.parentServiceInstanceId)
}

// string networkAddress = 5;
inline void SegmentReference::clear_networkaddress() {
  networkaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SegmentReference::networkaddress() const {
  // @@protoc_insertion_point(field_get:SegmentReference.networkAddress)
  return _internal_networkaddress();
}
inline void SegmentReference::set_networkaddress(const std::string& value) {
  _internal_set_networkaddress(value);
  // @@protoc_insertion_point(field_set:SegmentReference.networkAddress)
}
inline std::string* SegmentReference::mutable_networkaddress() {
  // @@protoc_insertion_point(field_mutable:SegmentReference.networkAddress)
  return _internal_mutable_networkaddress();
}
inline const std::string& SegmentReference::_internal_networkaddress() const {
  return networkaddress_.GetNoArena();
}
inline void SegmentReference::_internal_set_networkaddress(const std::string& value) {
  
  networkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SegmentReference::set_networkaddress(std::string&& value) {
  
  networkaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SegmentReference.networkAddress)
}
inline void SegmentReference::set_networkaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  networkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SegmentReference.networkAddress)
}
inline void SegmentReference::set_networkaddress(const char* value, size_t size) {
  
  networkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SegmentReference.networkAddress)
}
inline std::string* SegmentReference::_internal_mutable_networkaddress() {
  
  return networkaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SegmentReference::release_networkaddress() {
  // @@protoc_insertion_point(field_release:SegmentReference.networkAddress)
  
  return networkaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentReference::set_allocated_networkaddress(std::string* networkaddress) {
  if (networkaddress != nullptr) {
    
  } else {
    
  }
  networkaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networkaddress);
  // @@protoc_insertion_point(field_set_allocated:SegmentReference.networkAddress)
}

// int32 networkAddressId = 6;
inline void SegmentReference::clear_networkaddressid() {
  networkaddressid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::_internal_networkaddressid() const {
  return networkaddressid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::networkaddressid() const {
  // @@protoc_insertion_point(field_get:SegmentReference.networkAddressId)
  return _internal_networkaddressid();
}
inline void SegmentReference::_internal_set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  networkaddressid_ = value;
}
inline void SegmentReference::set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_networkaddressid(value);
  // @@protoc_insertion_point(field_set:SegmentReference.networkAddressId)
}

// int32 entryServiceInstanceId = 7;
inline void SegmentReference::clear_entryserviceinstanceid() {
  entryserviceinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::_internal_entryserviceinstanceid() const {
  return entryserviceinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::entryserviceinstanceid() const {
  // @@protoc_insertion_point(field_get:SegmentReference.entryServiceInstanceId)
  return _internal_entryserviceinstanceid();
}
inline void SegmentReference::_internal_set_entryserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entryserviceinstanceid_ = value;
}
inline void SegmentReference::set_entryserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entryserviceinstanceid(value);
  // @@protoc_insertion_point(field_set:SegmentReference.entryServiceInstanceId)
}

// string entryEndpoint = 8;
inline void SegmentReference::clear_entryendpoint() {
  entryendpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SegmentReference::entryendpoint() const {
  // @@protoc_insertion_point(field_get:SegmentReference.entryEndpoint)
  return _internal_entryendpoint();
}
inline void SegmentReference::set_entryendpoint(const std::string& value) {
  _internal_set_entryendpoint(value);
  // @@protoc_insertion_point(field_set:SegmentReference.entryEndpoint)
}
inline std::string* SegmentReference::mutable_entryendpoint() {
  // @@protoc_insertion_point(field_mutable:SegmentReference.entryEndpoint)
  return _internal_mutable_entryendpoint();
}
inline const std::string& SegmentReference::_internal_entryendpoint() const {
  return entryendpoint_.GetNoArena();
}
inline void SegmentReference::_internal_set_entryendpoint(const std::string& value) {
  
  entryendpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SegmentReference::set_entryendpoint(std::string&& value) {
  
  entryendpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SegmentReference.entryEndpoint)
}
inline void SegmentReference::set_entryendpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entryendpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SegmentReference.entryEndpoint)
}
inline void SegmentReference::set_entryendpoint(const char* value, size_t size) {
  
  entryendpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SegmentReference.entryEndpoint)
}
inline std::string* SegmentReference::_internal_mutable_entryendpoint() {
  
  return entryendpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SegmentReference::release_entryendpoint() {
  // @@protoc_insertion_point(field_release:SegmentReference.entryEndpoint)
  
  return entryendpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentReference::set_allocated_entryendpoint(std::string* entryendpoint) {
  if (entryendpoint != nullptr) {
    
  } else {
    
  }
  entryendpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entryendpoint);
  // @@protoc_insertion_point(field_set_allocated:SegmentReference.entryEndpoint)
}

// int32 entryEndpointId = 9;
inline void SegmentReference::clear_entryendpointid() {
  entryendpointid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::_internal_entryendpointid() const {
  return entryendpointid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::entryendpointid() const {
  // @@protoc_insertion_point(field_get:SegmentReference.entryEndpointId)
  return _internal_entryendpointid();
}
inline void SegmentReference::_internal_set_entryendpointid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entryendpointid_ = value;
}
inline void SegmentReference::set_entryendpointid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entryendpointid(value);
  // @@protoc_insertion_point(field_set:SegmentReference.entryEndpointId)
}

// string parentEndpoint = 10;
inline void SegmentReference::clear_parentendpoint() {
  parentendpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SegmentReference::parentendpoint() const {
  // @@protoc_insertion_point(field_get:SegmentReference.parentEndpoint)
  return _internal_parentendpoint();
}
inline void SegmentReference::set_parentendpoint(const std::string& value) {
  _internal_set_parentendpoint(value);
  // @@protoc_insertion_point(field_set:SegmentReference.parentEndpoint)
}
inline std::string* SegmentReference::mutable_parentendpoint() {
  // @@protoc_insertion_point(field_mutable:SegmentReference.parentEndpoint)
  return _internal_mutable_parentendpoint();
}
inline const std::string& SegmentReference::_internal_parentendpoint() const {
  return parentendpoint_.GetNoArena();
}
inline void SegmentReference::_internal_set_parentendpoint(const std::string& value) {
  
  parentendpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SegmentReference::set_parentendpoint(std::string&& value) {
  
  parentendpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SegmentReference.parentEndpoint)
}
inline void SegmentReference::set_parentendpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parentendpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SegmentReference.parentEndpoint)
}
inline void SegmentReference::set_parentendpoint(const char* value, size_t size) {
  
  parentendpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SegmentReference.parentEndpoint)
}
inline std::string* SegmentReference::_internal_mutable_parentendpoint() {
  
  return parentendpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SegmentReference::release_parentendpoint() {
  // @@protoc_insertion_point(field_release:SegmentReference.parentEndpoint)
  
  return parentendpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentReference::set_allocated_parentendpoint(std::string* parentendpoint) {
  if (parentendpoint != nullptr) {
    
  } else {
    
  }
  parentendpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentendpoint);
  // @@protoc_insertion_point(field_set_allocated:SegmentReference.parentEndpoint)
}

// int32 parentEndpointId = 11;
inline void SegmentReference::clear_parentendpointid() {
  parentendpointid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::_internal_parentendpointid() const {
  return parentendpointid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentReference::parentendpointid() const {
  // @@protoc_insertion_point(field_get:SegmentReference.parentEndpointId)
  return _internal_parentendpointid();
}
inline void SegmentReference::_internal_set_parentendpointid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parentendpointid_ = value;
}
inline void SegmentReference::set_parentendpointid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parentendpointid(value);
  // @@protoc_insertion_point(field_set:SegmentReference.parentEndpointId)
}

// -------------------------------------------------------------------

// SpanObjectV2

// int32 spanId = 1;
inline void SpanObjectV2::clear_spanid() {
  spanid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::_internal_spanid() const {
  return spanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::spanid() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.spanId)
  return _internal_spanid();
}
inline void SpanObjectV2::_internal_set_spanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spanid_ = value;
}
inline void SpanObjectV2::set_spanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spanid(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.spanId)
}

// int32 parentSpanId = 2;
inline void SpanObjectV2::clear_parentspanid() {
  parentspanid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::_internal_parentspanid() const {
  return parentspanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::parentspanid() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.parentSpanId)
  return _internal_parentspanid();
}
inline void SpanObjectV2::_internal_set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parentspanid_ = value;
}
inline void SpanObjectV2::set_parentspanid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parentspanid(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.parentSpanId)
}

// int64 startTime = 3;
inline void SpanObjectV2::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpanObjectV2::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpanObjectV2::starttime() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.startTime)
  return _internal_starttime();
}
inline void SpanObjectV2::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void SpanObjectV2::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.startTime)
}

// int64 endTime = 4;
inline void SpanObjectV2::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpanObjectV2::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SpanObjectV2::endtime() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.endTime)
  return _internal_endtime();
}
inline void SpanObjectV2::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endtime_ = value;
}
inline void SpanObjectV2::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.endTime)
}

// repeated .SegmentReference refs = 5;
inline int SpanObjectV2::_internal_refs_size() const {
  return refs_.size();
}
inline int SpanObjectV2::refs_size() const {
  return _internal_refs_size();
}
inline void SpanObjectV2::clear_refs() {
  refs_.Clear();
}
inline ::SegmentReference* SpanObjectV2::mutable_refs(int index) {
  // @@protoc_insertion_point(field_mutable:SpanObjectV2.refs)
  return refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentReference >*
SpanObjectV2::mutable_refs() {
  // @@protoc_insertion_point(field_mutable_list:SpanObjectV2.refs)
  return &refs_;
}
inline const ::SegmentReference& SpanObjectV2::_internal_refs(int index) const {
  return refs_.Get(index);
}
inline const ::SegmentReference& SpanObjectV2::refs(int index) const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.refs)
  return _internal_refs(index);
}
inline ::SegmentReference* SpanObjectV2::_internal_add_refs() {
  return refs_.Add();
}
inline ::SegmentReference* SpanObjectV2::add_refs() {
  // @@protoc_insertion_point(field_add:SpanObjectV2.refs)
  return _internal_add_refs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentReference >&
SpanObjectV2::refs() const {
  // @@protoc_insertion_point(field_list:SpanObjectV2.refs)
  return refs_;
}

// int32 operationNameId = 6;
inline void SpanObjectV2::clear_operationnameid() {
  operationnameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::_internal_operationnameid() const {
  return operationnameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::operationnameid() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.operationNameId)
  return _internal_operationnameid();
}
inline void SpanObjectV2::_internal_set_operationnameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operationnameid_ = value;
}
inline void SpanObjectV2::set_operationnameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operationnameid(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.operationNameId)
}

// string operationName = 7;
inline void SpanObjectV2::clear_operationname() {
  operationname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpanObjectV2::operationname() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.operationName)
  return _internal_operationname();
}
inline void SpanObjectV2::set_operationname(const std::string& value) {
  _internal_set_operationname(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.operationName)
}
inline std::string* SpanObjectV2::mutable_operationname() {
  // @@protoc_insertion_point(field_mutable:SpanObjectV2.operationName)
  return _internal_mutable_operationname();
}
inline const std::string& SpanObjectV2::_internal_operationname() const {
  return operationname_.GetNoArena();
}
inline void SpanObjectV2::_internal_set_operationname(const std::string& value) {
  
  operationname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpanObjectV2::set_operationname(std::string&& value) {
  
  operationname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SpanObjectV2.operationName)
}
inline void SpanObjectV2::set_operationname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operationname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpanObjectV2.operationName)
}
inline void SpanObjectV2::set_operationname(const char* value, size_t size) {
  
  operationname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpanObjectV2.operationName)
}
inline std::string* SpanObjectV2::_internal_mutable_operationname() {
  
  return operationname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpanObjectV2::release_operationname() {
  // @@protoc_insertion_point(field_release:SpanObjectV2.operationName)
  
  return operationname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpanObjectV2::set_allocated_operationname(std::string* operationname) {
  if (operationname != nullptr) {
    
  } else {
    
  }
  operationname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operationname);
  // @@protoc_insertion_point(field_set_allocated:SpanObjectV2.operationName)
}

// int32 peerId = 8;
inline void SpanObjectV2::clear_peerid() {
  peerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::_internal_peerid() const {
  return peerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::peerid() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.peerId)
  return _internal_peerid();
}
inline void SpanObjectV2::_internal_set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  peerid_ = value;
}
inline void SpanObjectV2::set_peerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peerid(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.peerId)
}

// string peer = 9;
inline void SpanObjectV2::clear_peer() {
  peer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpanObjectV2::peer() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.peer)
  return _internal_peer();
}
inline void SpanObjectV2::set_peer(const std::string& value) {
  _internal_set_peer(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.peer)
}
inline std::string* SpanObjectV2::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:SpanObjectV2.peer)
  return _internal_mutable_peer();
}
inline const std::string& SpanObjectV2::_internal_peer() const {
  return peer_.GetNoArena();
}
inline void SpanObjectV2::_internal_set_peer(const std::string& value) {
  
  peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpanObjectV2::set_peer(std::string&& value) {
  
  peer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SpanObjectV2.peer)
}
inline void SpanObjectV2::set_peer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpanObjectV2.peer)
}
inline void SpanObjectV2::set_peer(const char* value, size_t size) {
  
  peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpanObjectV2.peer)
}
inline std::string* SpanObjectV2::_internal_mutable_peer() {
  
  return peer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpanObjectV2::release_peer() {
  // @@protoc_insertion_point(field_release:SpanObjectV2.peer)
  
  return peer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpanObjectV2::set_allocated_peer(std::string* peer) {
  if (peer != nullptr) {
    
  } else {
    
  }
  peer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer);
  // @@protoc_insertion_point(field_set_allocated:SpanObjectV2.peer)
}

// .SpanType spanType = 10;
inline void SpanObjectV2::clear_spantype() {
  spantype_ = 0;
}
inline ::SpanType SpanObjectV2::_internal_spantype() const {
  return static_cast< ::SpanType >(spantype_);
}
inline ::SpanType SpanObjectV2::spantype() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.spanType)
  return _internal_spantype();
}
inline void SpanObjectV2::_internal_set_spantype(::SpanType value) {
  
  spantype_ = value;
}
inline void SpanObjectV2::set_spantype(::SpanType value) {
  _internal_set_spantype(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.spanType)
}

// .SpanLayer spanLayer = 11;
inline void SpanObjectV2::clear_spanlayer() {
  spanlayer_ = 0;
}
inline ::SpanLayer SpanObjectV2::_internal_spanlayer() const {
  return static_cast< ::SpanLayer >(spanlayer_);
}
inline ::SpanLayer SpanObjectV2::spanlayer() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.spanLayer)
  return _internal_spanlayer();
}
inline void SpanObjectV2::_internal_set_spanlayer(::SpanLayer value) {
  
  spanlayer_ = value;
}
inline void SpanObjectV2::set_spanlayer(::SpanLayer value) {
  _internal_set_spanlayer(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.spanLayer)
}

// int32 componentId = 12;
inline void SpanObjectV2::clear_componentid() {
  componentid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::_internal_componentid() const {
  return componentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpanObjectV2::componentid() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.componentId)
  return _internal_componentid();
}
inline void SpanObjectV2::_internal_set_componentid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  componentid_ = value;
}
inline void SpanObjectV2::set_componentid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_componentid(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.componentId)
}

// string component = 13;
inline void SpanObjectV2::clear_component() {
  component_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpanObjectV2::component() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.component)
  return _internal_component();
}
inline void SpanObjectV2::set_component(const std::string& value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.component)
}
inline std::string* SpanObjectV2::mutable_component() {
  // @@protoc_insertion_point(field_mutable:SpanObjectV2.component)
  return _internal_mutable_component();
}
inline const std::string& SpanObjectV2::_internal_component() const {
  return component_.GetNoArena();
}
inline void SpanObjectV2::_internal_set_component(const std::string& value) {
  
  component_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpanObjectV2::set_component(std::string&& value) {
  
  component_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SpanObjectV2.component)
}
inline void SpanObjectV2::set_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpanObjectV2.component)
}
inline void SpanObjectV2::set_component(const char* value, size_t size) {
  
  component_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpanObjectV2.component)
}
inline std::string* SpanObjectV2::_internal_mutable_component() {
  
  return component_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpanObjectV2::release_component() {
  // @@protoc_insertion_point(field_release:SpanObjectV2.component)
  
  return component_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpanObjectV2::set_allocated_component(std::string* component) {
  if (component != nullptr) {
    
  } else {
    
  }
  component_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:SpanObjectV2.component)
}

// bool isError = 14;
inline void SpanObjectV2::clear_iserror() {
  iserror_ = false;
}
inline bool SpanObjectV2::_internal_iserror() const {
  return iserror_;
}
inline bool SpanObjectV2::iserror() const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.isError)
  return _internal_iserror();
}
inline void SpanObjectV2::_internal_set_iserror(bool value) {
  
  iserror_ = value;
}
inline void SpanObjectV2::set_iserror(bool value) {
  _internal_set_iserror(value);
  // @@protoc_insertion_point(field_set:SpanObjectV2.isError)
}

// repeated .KeyStringValuePair tags = 15;
inline int SpanObjectV2::_internal_tags_size() const {
  return tags_.size();
}
inline int SpanObjectV2::tags_size() const {
  return _internal_tags_size();
}
inline ::KeyStringValuePair* SpanObjectV2::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:SpanObjectV2.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
SpanObjectV2::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:SpanObjectV2.tags)
  return &tags_;
}
inline const ::KeyStringValuePair& SpanObjectV2::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::KeyStringValuePair& SpanObjectV2::tags(int index) const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.tags)
  return _internal_tags(index);
}
inline ::KeyStringValuePair* SpanObjectV2::_internal_add_tags() {
  return tags_.Add();
}
inline ::KeyStringValuePair* SpanObjectV2::add_tags() {
  // @@protoc_insertion_point(field_add:SpanObjectV2.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
SpanObjectV2::tags() const {
  // @@protoc_insertion_point(field_list:SpanObjectV2.tags)
  return tags_;
}

// repeated .Log logs = 16;
inline int SpanObjectV2::_internal_logs_size() const {
  return logs_.size();
}
inline int SpanObjectV2::logs_size() const {
  return _internal_logs_size();
}
inline void SpanObjectV2::clear_logs() {
  logs_.Clear();
}
inline ::Log* SpanObjectV2::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:SpanObjectV2.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Log >*
SpanObjectV2::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:SpanObjectV2.logs)
  return &logs_;
}
inline const ::Log& SpanObjectV2::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::Log& SpanObjectV2::logs(int index) const {
  // @@protoc_insertion_point(field_get:SpanObjectV2.logs)
  return _internal_logs(index);
}
inline ::Log* SpanObjectV2::_internal_add_logs() {
  return logs_.Add();
}
inline ::Log* SpanObjectV2::add_logs() {
  // @@protoc_insertion_point(field_add:SpanObjectV2.logs)
  return _internal_add_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Log >&
SpanObjectV2::logs() const {
  // @@protoc_insertion_point(field_list:SpanObjectV2.logs)
  return logs_;
}

// -------------------------------------------------------------------

// Log

// int64 time = 1;
inline void Log::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::time() const {
  // @@protoc_insertion_point(field_get:Log.time)
  return _internal_time();
}
inline void Log::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void Log::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Log.time)
}

// repeated .KeyStringValuePair data = 2;
inline int Log::_internal_data_size() const {
  return data_.size();
}
inline int Log::data_size() const {
  return _internal_data_size();
}
inline ::KeyStringValuePair* Log::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Log.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
Log::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Log.data)
  return &data_;
}
inline const ::KeyStringValuePair& Log::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::KeyStringValuePair& Log::data(int index) const {
  // @@protoc_insertion_point(field_get:Log.data)
  return _internal_data(index);
}
inline ::KeyStringValuePair* Log::_internal_add_data() {
  return data_.Add();
}
inline ::KeyStringValuePair* Log::add_data() {
  // @@protoc_insertion_point(field_add:Log.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
Log::data() const {
  // @@protoc_insertion_point(field_list:Log.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_language_2dagent_2dv2_2ftrace_2eproto
