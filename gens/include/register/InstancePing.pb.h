// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register/InstancePing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_register_2fInstancePing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_register_2fInstancePing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_register_2fInstancePing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_register_2fInstancePing_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_register_2fInstancePing_2eproto;
class ServiceInstancePingPkg;
class ServiceInstancePingPkgDefaultTypeInternal;
extern ServiceInstancePingPkgDefaultTypeInternal _ServiceInstancePingPkg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ServiceInstancePingPkg* Arena::CreateMaybeMessage<::ServiceInstancePingPkg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ServiceInstancePingPkg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceInstancePingPkg) */ {
 public:
  ServiceInstancePingPkg();
  virtual ~ServiceInstancePingPkg();

  ServiceInstancePingPkg(const ServiceInstancePingPkg& from);
  ServiceInstancePingPkg(ServiceInstancePingPkg&& from) noexcept
    : ServiceInstancePingPkg() {
    *this = ::std::move(from);
  }

  inline ServiceInstancePingPkg& operator=(const ServiceInstancePingPkg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInstancePingPkg& operator=(ServiceInstancePingPkg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInstancePingPkg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInstancePingPkg* internal_default_instance() {
    return reinterpret_cast<const ServiceInstancePingPkg*>(
               &_ServiceInstancePingPkg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceInstancePingPkg& a, ServiceInstancePingPkg& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInstancePingPkg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInstancePingPkg* New() const final {
    return CreateMaybeMessage<ServiceInstancePingPkg>(nullptr);
  }

  ServiceInstancePingPkg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInstancePingPkg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInstancePingPkg& from);
  void MergeFrom(const ServiceInstancePingPkg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInstancePingPkg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceInstancePingPkg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fInstancePing_2eproto);
    return ::descriptor_table_register_2fInstancePing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInstanceUUIDFieldNumber = 3,
    kTimeFieldNumber = 2,
    kServiceInstanceIdFieldNumber = 1,
  };
  // string serviceInstanceUUID = 3;
  void clear_serviceinstanceuuid();
  const std::string& serviceinstanceuuid() const;
  void set_serviceinstanceuuid(const std::string& value);
  void set_serviceinstanceuuid(std::string&& value);
  void set_serviceinstanceuuid(const char* value);
  void set_serviceinstanceuuid(const char* value, size_t size);
  std::string* mutable_serviceinstanceuuid();
  std::string* release_serviceinstanceuuid();
  void set_allocated_serviceinstanceuuid(std::string* serviceinstanceuuid);
  private:
  const std::string& _internal_serviceinstanceuuid() const;
  void _internal_set_serviceinstanceuuid(const std::string& value);
  std::string* _internal_mutable_serviceinstanceuuid();
  public:

  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 serviceInstanceId = 1;
  void clear_serviceinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceinstanceid() const;
  void set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceinstanceid() const;
  void _internal_set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceInstancePingPkg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceinstanceuuid_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceinstanceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fInstancePing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceInstancePingPkg

// int32 serviceInstanceId = 1;
inline void ServiceInstancePingPkg::clear_serviceinstanceid() {
  serviceinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInstancePingPkg::_internal_serviceinstanceid() const {
  return serviceinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInstancePingPkg::serviceinstanceid() const {
  // @@protoc_insertion_point(field_get:ServiceInstancePingPkg.serviceInstanceId)
  return _internal_serviceinstanceid();
}
inline void ServiceInstancePingPkg::_internal_set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceinstanceid_ = value;
}
inline void ServiceInstancePingPkg::set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceinstanceid(value);
  // @@protoc_insertion_point(field_set:ServiceInstancePingPkg.serviceInstanceId)
}

// int64 time = 2;
inline void ServiceInstancePingPkg::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceInstancePingPkg::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceInstancePingPkg::time() const {
  // @@protoc_insertion_point(field_get:ServiceInstancePingPkg.time)
  return _internal_time();
}
inline void ServiceInstancePingPkg::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void ServiceInstancePingPkg::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ServiceInstancePingPkg.time)
}

// string serviceInstanceUUID = 3;
inline void ServiceInstancePingPkg::clear_serviceinstanceuuid() {
  serviceinstanceuuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInstancePingPkg::serviceinstanceuuid() const {
  // @@protoc_insertion_point(field_get:ServiceInstancePingPkg.serviceInstanceUUID)
  return _internal_serviceinstanceuuid();
}
inline void ServiceInstancePingPkg::set_serviceinstanceuuid(const std::string& value) {
  _internal_set_serviceinstanceuuid(value);
  // @@protoc_insertion_point(field_set:ServiceInstancePingPkg.serviceInstanceUUID)
}
inline std::string* ServiceInstancePingPkg::mutable_serviceinstanceuuid() {
  // @@protoc_insertion_point(field_mutable:ServiceInstancePingPkg.serviceInstanceUUID)
  return _internal_mutable_serviceinstanceuuid();
}
inline const std::string& ServiceInstancePingPkg::_internal_serviceinstanceuuid() const {
  return serviceinstanceuuid_.GetNoArena();
}
inline void ServiceInstancePingPkg::_internal_set_serviceinstanceuuid(const std::string& value) {
  
  serviceinstanceuuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInstancePingPkg::set_serviceinstanceuuid(std::string&& value) {
  
  serviceinstanceuuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceInstancePingPkg.serviceInstanceUUID)
}
inline void ServiceInstancePingPkg::set_serviceinstanceuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serviceinstanceuuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceInstancePingPkg.serviceInstanceUUID)
}
inline void ServiceInstancePingPkg::set_serviceinstanceuuid(const char* value, size_t size) {
  
  serviceinstanceuuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceInstancePingPkg.serviceInstanceUUID)
}
inline std::string* ServiceInstancePingPkg::_internal_mutable_serviceinstanceuuid() {
  
  return serviceinstanceuuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInstancePingPkg::release_serviceinstanceuuid() {
  // @@protoc_insertion_point(field_release:ServiceInstancePingPkg.serviceInstanceUUID)
  
  return serviceinstanceuuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInstancePingPkg::set_allocated_serviceinstanceuuid(std::string* serviceinstanceuuid) {
  if (serviceinstanceuuid != nullptr) {
    
  } else {
    
  }
  serviceinstanceuuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceinstanceuuid);
  // @@protoc_insertion_point(field_set_allocated:ServiceInstancePingPkg.serviceInstanceUUID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_register_2fInstancePing_2eproto
