// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: register/Register.proto
// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_register_2fRegister_2eproto__INCLUDED
#define GRPC_register_2fRegister_2eproto__INCLUDED

#include "register/Register.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

// register service for ApplicationCode, this service is called when service starts.
class Register final {
 public:
  static constexpr char const* service_full_name() {
    return "Register";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status doServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::ServiceRegisterMapping* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>> AsyncdoServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>>(AsyncdoServiceRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>> PrepareAsyncdoServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>>(PrepareAsyncdoServiceRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::ServiceInstanceRegisterMapping* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>> AsyncdoServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>>(AsyncdoServiceInstanceRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>> PrepareAsyncdoServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>>(PrepareAsyncdoServiceInstanceRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::EndpointMapping* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>> AsyncdoEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>>(AsyncdoEndpointRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>> PrepareAsyncdoEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>>(PrepareAsyncdoEndpointRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::NetAddressMapping* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>> AsyncdoNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>>(AsyncdoNetworkAddressRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>> PrepareAsyncdoNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>>(PrepareAsyncdoNetworkAddressRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::Commands* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Commands>> AsyncdoServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Commands>>(AsyncdoServiceAndNetworkAddressMappingRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Commands>> PrepareAsyncdoServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Commands>>(PrepareAsyncdoServiceAndNetworkAddressMappingRegisterRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void doServiceRegister(::grpc::ClientContext* context, const ::Services* request, ::ServiceRegisterMapping* response, std::function<void(::grpc::Status)>) = 0;
      virtual void doServiceRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ServiceRegisterMapping* response, std::function<void(::grpc::Status)>) = 0;
      virtual void doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, std::function<void(::grpc::Status)>) = 0;
      virtual void doServiceInstanceRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ServiceInstanceRegisterMapping* response, std::function<void(::grpc::Status)>) = 0;
      virtual void doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints* request, ::EndpointMapping* response, std::function<void(::grpc::Status)>) = 0;
      virtual void doEndpointRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EndpointMapping* response, std::function<void(::grpc::Status)>) = 0;
      virtual void doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, std::function<void(::grpc::Status)>) = 0;
      virtual void doNetworkAddressRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NetAddressMapping* response, std::function<void(::grpc::Status)>) = 0;
      virtual void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, std::function<void(::grpc::Status)>) = 0;
      virtual void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Commands* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>* AsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceRegisterMapping>* PrepareAsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>* AsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ServiceInstanceRegisterMapping>* PrepareAsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>* AsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EndpointMapping>* PrepareAsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>* AsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetAddressMapping>* PrepareAsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Commands>* AsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Commands>* PrepareAsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status doServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::ServiceRegisterMapping* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>> AsyncdoServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>>(AsyncdoServiceRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>> PrepareAsyncdoServiceRegister(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>>(PrepareAsyncdoServiceRegisterRaw(context, request, cq));
    }
    ::grpc::Status doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::ServiceInstanceRegisterMapping* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>> AsyncdoServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>>(AsyncdoServiceInstanceRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>> PrepareAsyncdoServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>>(PrepareAsyncdoServiceInstanceRegisterRaw(context, request, cq));
    }
    ::grpc::Status doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::EndpointMapping* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EndpointMapping>> AsyncdoEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EndpointMapping>>(AsyncdoEndpointRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EndpointMapping>> PrepareAsyncdoEndpointRegister(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EndpointMapping>>(PrepareAsyncdoEndpointRegisterRaw(context, request, cq));
    }
    ::grpc::Status doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::NetAddressMapping* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>> AsyncdoNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>>(AsyncdoNetworkAddressRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>> PrepareAsyncdoNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>>(PrepareAsyncdoNetworkAddressRegisterRaw(context, request, cq));
    }
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::Commands* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Commands>> AsyncdoServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Commands>>(AsyncdoServiceAndNetworkAddressMappingRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Commands>> PrepareAsyncdoServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Commands>>(PrepareAsyncdoServiceAndNetworkAddressMappingRegisterRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void doServiceRegister(::grpc::ClientContext* context, const ::Services* request, ::ServiceRegisterMapping* response, std::function<void(::grpc::Status)>) override;
      void doServiceRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ServiceRegisterMapping* response, std::function<void(::grpc::Status)>) override;
      void doServiceInstanceRegister(::grpc::ClientContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, std::function<void(::grpc::Status)>) override;
      void doServiceInstanceRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ServiceInstanceRegisterMapping* response, std::function<void(::grpc::Status)>) override;
      void doEndpointRegister(::grpc::ClientContext* context, const ::Endpoints* request, ::EndpointMapping* response, std::function<void(::grpc::Status)>) override;
      void doEndpointRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EndpointMapping* response, std::function<void(::grpc::Status)>) override;
      void doNetworkAddressRegister(::grpc::ClientContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, std::function<void(::grpc::Status)>) override;
      void doNetworkAddressRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NetAddressMapping* response, std::function<void(::grpc::Status)>) override;
      void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, std::function<void(::grpc::Status)>) override;
      void doServiceAndNetworkAddressMappingRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Commands* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>* AsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServiceRegisterMapping>* PrepareAsyncdoServiceRegisterRaw(::grpc::ClientContext* context, const ::Services& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>* AsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ServiceInstanceRegisterMapping>* PrepareAsyncdoServiceInstanceRegisterRaw(::grpc::ClientContext* context, const ::ServiceInstances& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EndpointMapping>* AsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EndpointMapping>* PrepareAsyncdoEndpointRegisterRaw(::grpc::ClientContext* context, const ::Endpoints& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>* AsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetAddressMapping>* PrepareAsyncdoNetworkAddressRegisterRaw(::grpc::ClientContext* context, const ::NetAddresses& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Commands>* AsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Commands>* PrepareAsyncdoServiceAndNetworkAddressMappingRegisterRaw(::grpc::ClientContext* context, const ::ServiceAndNetworkAddressMappings& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_doServiceRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_doServiceInstanceRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_doEndpointRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_doNetworkAddressRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_doServiceAndNetworkAddressMappingRegister_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response);
    virtual ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response);
    virtual ::grpc::Status doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response);
    virtual ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response);
    virtual ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_doServiceRegister() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceRegister(::grpc::ServerContext* context, ::Services* request, ::grpc::ServerAsyncResponseWriter< ::ServiceRegisterMapping>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_doServiceInstanceRegister() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceInstanceRegister(::grpc::ServerContext* context, ::ServiceInstances* request, ::grpc::ServerAsyncResponseWriter< ::ServiceInstanceRegisterMapping>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_doEndpointRegister() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoEndpointRegister(::grpc::ServerContext* context, ::Endpoints* request, ::grpc::ServerAsyncResponseWriter< ::EndpointMapping>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_doNetworkAddressRegister() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoNetworkAddressRegister(::grpc::ServerContext* context, ::NetAddresses* request, ::grpc::ServerAsyncResponseWriter< ::NetAddressMapping>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, ::ServiceAndNetworkAddressMappings* request, ::grpc::ServerAsyncResponseWriter< ::Commands>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_doServiceRegister<WithAsyncMethod_doServiceInstanceRegister<WithAsyncMethod_doEndpointRegister<WithAsyncMethod_doNetworkAddressRegister<WithAsyncMethod_doServiceAndNetworkAddressMappingRegister<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_doServiceRegister() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::Services, ::ServiceRegisterMapping>(
          [this](::grpc::ServerContext* context,
                 const ::Services* request,
                 ::ServiceRegisterMapping* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->doServiceRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_doServiceInstanceRegister() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::ServiceInstances, ::ServiceInstanceRegisterMapping>(
          [this](::grpc::ServerContext* context,
                 const ::ServiceInstances* request,
                 ::ServiceInstanceRegisterMapping* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->doServiceInstanceRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_doEndpointRegister() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::Endpoints, ::EndpointMapping>(
          [this](::grpc::ServerContext* context,
                 const ::Endpoints* request,
                 ::EndpointMapping* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->doEndpointRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_doNetworkAddressRegister() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::NetAddresses, ::NetAddressMapping>(
          [this](::grpc::ServerContext* context,
                 const ::NetAddresses* request,
                 ::NetAddressMapping* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->doNetworkAddressRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::ServiceAndNetworkAddressMappings, ::Commands>(
          [this](::grpc::ServerContext* context,
                 const ::ServiceAndNetworkAddressMappings* request,
                 ::Commands* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->doServiceAndNetworkAddressMappingRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_doServiceRegister<ExperimentalWithCallbackMethod_doServiceInstanceRegister<ExperimentalWithCallbackMethod_doEndpointRegister<ExperimentalWithCallbackMethod_doNetworkAddressRegister<ExperimentalWithCallbackMethod_doServiceAndNetworkAddressMappingRegister<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_doServiceRegister() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_doServiceInstanceRegister() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_doEndpointRegister() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_doNetworkAddressRegister() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_doServiceRegister() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_doServiceInstanceRegister() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceInstanceRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_doEndpointRegister() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoEndpointRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_doNetworkAddressRegister() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoNetworkAddressRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_doServiceRegister() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->doServiceRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doServiceRegister(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_doServiceInstanceRegister() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->doServiceInstanceRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doServiceInstanceRegister(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_doEndpointRegister() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->doEndpointRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doEndpointRegister(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_doNetworkAddressRegister() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->doNetworkAddressRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doNetworkAddressRegister(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->doServiceAndNetworkAddressMappingRegister(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doServiceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_doServiceRegister() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Services, ::ServiceRegisterMapping>(std::bind(&WithStreamedUnaryMethod_doServiceRegister<BaseClass>::StreameddoServiceRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_doServiceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doServiceRegister(::grpc::ServerContext* context, const ::Services* request, ::ServiceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoServiceRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Services,::ServiceRegisterMapping>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doServiceInstanceRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_doServiceInstanceRegister() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ServiceInstances, ::ServiceInstanceRegisterMapping>(std::bind(&WithStreamedUnaryMethod_doServiceInstanceRegister<BaseClass>::StreameddoServiceInstanceRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_doServiceInstanceRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doServiceInstanceRegister(::grpc::ServerContext* context, const ::ServiceInstances* request, ::ServiceInstanceRegisterMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoServiceInstanceRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServiceInstances,::ServiceInstanceRegisterMapping>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doEndpointRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_doEndpointRegister() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Endpoints, ::EndpointMapping>(std::bind(&WithStreamedUnaryMethod_doEndpointRegister<BaseClass>::StreameddoEndpointRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_doEndpointRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doEndpointRegister(::grpc::ServerContext* context, const ::Endpoints* request, ::EndpointMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoEndpointRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Endpoints,::EndpointMapping>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doNetworkAddressRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_doNetworkAddressRegister() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::NetAddresses, ::NetAddressMapping>(std::bind(&WithStreamedUnaryMethod_doNetworkAddressRegister<BaseClass>::StreameddoNetworkAddressRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_doNetworkAddressRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doNetworkAddressRegister(::grpc::ServerContext* context, const ::NetAddresses* request, ::NetAddressMapping* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoNetworkAddressRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetAddresses,::NetAddressMapping>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::ServiceAndNetworkAddressMappings, ::Commands>(std::bind(&WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister<BaseClass>::StreameddoServiceAndNetworkAddressMappingRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, const ::ServiceAndNetworkAddressMappings* request, ::Commands* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoServiceAndNetworkAddressMappingRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServiceAndNetworkAddressMappings,::Commands>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_doServiceRegister<WithStreamedUnaryMethod_doServiceInstanceRegister<WithStreamedUnaryMethod_doEndpointRegister<WithStreamedUnaryMethod_doNetworkAddressRegister<WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_doServiceRegister<WithStreamedUnaryMethod_doServiceInstanceRegister<WithStreamedUnaryMethod_doEndpointRegister<WithStreamedUnaryMethod_doNetworkAddressRegister<WithStreamedUnaryMethod_doServiceAndNetworkAddressMappingRegister<Service > > > > > StreamedService;
};


#endif  // GRPC_register_2fRegister_2eproto__INCLUDED
