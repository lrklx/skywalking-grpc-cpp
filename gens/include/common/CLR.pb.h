// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/CLR.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fCLR_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fCLR_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fCLR_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fCLR_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fCLR_2eproto;
class CLRMetric;
class CLRMetricDefaultTypeInternal;
extern CLRMetricDefaultTypeInternal _CLRMetric_default_instance_;
class ClrGC;
class ClrGCDefaultTypeInternal;
extern ClrGCDefaultTypeInternal _ClrGC_default_instance_;
class ClrThread;
class ClrThreadDefaultTypeInternal;
extern ClrThreadDefaultTypeInternal _ClrThread_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CLRMetric* Arena::CreateMaybeMessage<::CLRMetric>(Arena*);
template<> ::ClrGC* Arena::CreateMaybeMessage<::ClrGC>(Arena*);
template<> ::ClrThread* Arena::CreateMaybeMessage<::ClrThread>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CLRMetric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLRMetric) */ {
 public:
  CLRMetric();
  virtual ~CLRMetric();

  CLRMetric(const CLRMetric& from);
  CLRMetric(CLRMetric&& from) noexcept
    : CLRMetric() {
    *this = ::std::move(from);
  }

  inline CLRMetric& operator=(const CLRMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLRMetric& operator=(CLRMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLRMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLRMetric* internal_default_instance() {
    return reinterpret_cast<const CLRMetric*>(
               &_CLRMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CLRMetric& a, CLRMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(CLRMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLRMetric* New() const final {
    return CreateMaybeMessage<CLRMetric>(nullptr);
  }

  CLRMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLRMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLRMetric& from);
  void MergeFrom(const CLRMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLRMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLRMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fCLR_2eproto);
    return ::descriptor_table_common_2fCLR_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 2,
    kGcFieldNumber = 3,
    kThreadFieldNumber = 4,
    kTimeFieldNumber = 1,
  };
  // .CPU cpu = 2;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  const ::CPU& cpu() const;
  ::CPU* release_cpu();
  ::CPU* mutable_cpu();
  void set_allocated_cpu(::CPU* cpu);
  private:
  const ::CPU& _internal_cpu() const;
  ::CPU* _internal_mutable_cpu();
  public:

  // .ClrGC gc = 3;
  bool has_gc() const;
  private:
  bool _internal_has_gc() const;
  public:
  void clear_gc();
  const ::ClrGC& gc() const;
  ::ClrGC* release_gc();
  ::ClrGC* mutable_gc();
  void set_allocated_gc(::ClrGC* gc);
  private:
  const ::ClrGC& _internal_gc() const;
  ::ClrGC* _internal_mutable_gc();
  public:

  // .ClrThread thread = 4;
  bool has_thread() const;
  private:
  bool _internal_has_thread() const;
  public:
  void clear_thread();
  const ::ClrThread& thread() const;
  ::ClrThread* release_thread();
  ::ClrThread* mutable_thread();
  void set_allocated_thread(::ClrThread* thread);
  private:
  const ::ClrThread& _internal_thread() const;
  ::ClrThread* _internal_mutable_thread();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CLRMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CPU* cpu_;
  ::ClrGC* gc_;
  ::ClrThread* thread_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fCLR_2eproto;
};
// -------------------------------------------------------------------

class ClrGC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClrGC) */ {
 public:
  ClrGC();
  virtual ~ClrGC();

  ClrGC(const ClrGC& from);
  ClrGC(ClrGC&& from) noexcept
    : ClrGC() {
    *this = ::std::move(from);
  }

  inline ClrGC& operator=(const ClrGC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClrGC& operator=(ClrGC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClrGC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClrGC* internal_default_instance() {
    return reinterpret_cast<const ClrGC*>(
               &_ClrGC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClrGC& a, ClrGC& b) {
    a.Swap(&b);
  }
  inline void Swap(ClrGC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClrGC* New() const final {
    return CreateMaybeMessage<ClrGC>(nullptr);
  }

  ClrGC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClrGC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClrGC& from);
  void MergeFrom(const ClrGC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClrGC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClrGC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fCLR_2eproto);
    return ::descriptor_table_common_2fCLR_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGen0CollectCountFieldNumber = 1,
    kGen1CollectCountFieldNumber = 2,
    kGen2CollectCountFieldNumber = 3,
    kHeapMemoryFieldNumber = 4,
  };
  // int64 Gen0CollectCount = 1;
  void clear_gen0collectcount();
  ::PROTOBUF_NAMESPACE_ID::int64 gen0collectcount() const;
  void set_gen0collectcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gen0collectcount() const;
  void _internal_set_gen0collectcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 Gen1CollectCount = 2;
  void clear_gen1collectcount();
  ::PROTOBUF_NAMESPACE_ID::int64 gen1collectcount() const;
  void set_gen1collectcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gen1collectcount() const;
  void _internal_set_gen1collectcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 Gen2CollectCount = 3;
  void clear_gen2collectcount();
  ::PROTOBUF_NAMESPACE_ID::int64 gen2collectcount() const;
  void set_gen2collectcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gen2collectcount() const;
  void _internal_set_gen2collectcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 HeapMemory = 4;
  void clear_heapmemory();
  ::PROTOBUF_NAMESPACE_ID::int64 heapmemory() const;
  void set_heapmemory(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_heapmemory() const;
  void _internal_set_heapmemory(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ClrGC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 gen0collectcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 gen1collectcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 gen2collectcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 heapmemory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fCLR_2eproto;
};
// -------------------------------------------------------------------

class ClrThread :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClrThread) */ {
 public:
  ClrThread();
  virtual ~ClrThread();

  ClrThread(const ClrThread& from);
  ClrThread(ClrThread&& from) noexcept
    : ClrThread() {
    *this = ::std::move(from);
  }

  inline ClrThread& operator=(const ClrThread& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClrThread& operator=(ClrThread&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClrThread& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClrThread* internal_default_instance() {
    return reinterpret_cast<const ClrThread*>(
               &_ClrThread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClrThread& a, ClrThread& b) {
    a.Swap(&b);
  }
  inline void Swap(ClrThread* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClrThread* New() const final {
    return CreateMaybeMessage<ClrThread>(nullptr);
  }

  ClrThread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClrThread>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClrThread& from);
  void MergeFrom(const ClrThread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClrThread* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClrThread";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fCLR_2eproto);
    return ::descriptor_table_common_2fCLR_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableCompletionPortThreadsFieldNumber = 1,
    kAvailableWorkerThreadsFieldNumber = 2,
    kMaxCompletionPortThreadsFieldNumber = 3,
    kMaxWorkerThreadsFieldNumber = 4,
  };
  // int32 AvailableCompletionPortThreads = 1;
  void clear_availablecompletionportthreads();
  ::PROTOBUF_NAMESPACE_ID::int32 availablecompletionportthreads() const;
  void set_availablecompletionportthreads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_availablecompletionportthreads() const;
  void _internal_set_availablecompletionportthreads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AvailableWorkerThreads = 2;
  void clear_availableworkerthreads();
  ::PROTOBUF_NAMESPACE_ID::int32 availableworkerthreads() const;
  void set_availableworkerthreads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_availableworkerthreads() const;
  void _internal_set_availableworkerthreads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MaxCompletionPortThreads = 3;
  void clear_maxcompletionportthreads();
  ::PROTOBUF_NAMESPACE_ID::int32 maxcompletionportthreads() const;
  void set_maxcompletionportthreads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxcompletionportthreads() const;
  void _internal_set_maxcompletionportthreads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MaxWorkerThreads = 4;
  void clear_maxworkerthreads();
  ::PROTOBUF_NAMESPACE_ID::int32 maxworkerthreads() const;
  void set_maxworkerthreads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxworkerthreads() const;
  void _internal_set_maxworkerthreads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClrThread)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 availablecompletionportthreads_;
  ::PROTOBUF_NAMESPACE_ID::int32 availableworkerthreads_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxcompletionportthreads_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxworkerthreads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fCLR_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CLRMetric

// int64 time = 1;
inline void CLRMetric::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CLRMetric::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CLRMetric::time() const {
  // @@protoc_insertion_point(field_get:CLRMetric.time)
  return _internal_time();
}
inline void CLRMetric::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void CLRMetric::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CLRMetric.time)
}

// .CPU cpu = 2;
inline bool CLRMetric::_internal_has_cpu() const {
  return this != internal_default_instance() && cpu_ != nullptr;
}
inline bool CLRMetric::has_cpu() const {
  return _internal_has_cpu();
}
inline const ::CPU& CLRMetric::_internal_cpu() const {
  const ::CPU* p = cpu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CPU*>(
      &::_CPU_default_instance_);
}
inline const ::CPU& CLRMetric::cpu() const {
  // @@protoc_insertion_point(field_get:CLRMetric.cpu)
  return _internal_cpu();
}
inline ::CPU* CLRMetric::release_cpu() {
  // @@protoc_insertion_point(field_release:CLRMetric.cpu)
  
  ::CPU* temp = cpu_;
  cpu_ = nullptr;
  return temp;
}
inline ::CPU* CLRMetric::_internal_mutable_cpu() {
  
  if (cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPU>(GetArenaNoVirtual());
    cpu_ = p;
  }
  return cpu_;
}
inline ::CPU* CLRMetric::mutable_cpu() {
  // @@protoc_insertion_point(field_mutable:CLRMetric.cpu)
  return _internal_mutable_cpu();
}
inline void CLRMetric::set_allocated_cpu(::CPU* cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_);
  }
  if (cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    
  } else {
    
  }
  cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:CLRMetric.cpu)
}

// .ClrGC gc = 3;
inline bool CLRMetric::_internal_has_gc() const {
  return this != internal_default_instance() && gc_ != nullptr;
}
inline bool CLRMetric::has_gc() const {
  return _internal_has_gc();
}
inline void CLRMetric::clear_gc() {
  if (GetArenaNoVirtual() == nullptr && gc_ != nullptr) {
    delete gc_;
  }
  gc_ = nullptr;
}
inline const ::ClrGC& CLRMetric::_internal_gc() const {
  const ::ClrGC* p = gc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClrGC*>(
      &::_ClrGC_default_instance_);
}
inline const ::ClrGC& CLRMetric::gc() const {
  // @@protoc_insertion_point(field_get:CLRMetric.gc)
  return _internal_gc();
}
inline ::ClrGC* CLRMetric::release_gc() {
  // @@protoc_insertion_point(field_release:CLRMetric.gc)
  
  ::ClrGC* temp = gc_;
  gc_ = nullptr;
  return temp;
}
inline ::ClrGC* CLRMetric::_internal_mutable_gc() {
  
  if (gc_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClrGC>(GetArenaNoVirtual());
    gc_ = p;
  }
  return gc_;
}
inline ::ClrGC* CLRMetric::mutable_gc() {
  // @@protoc_insertion_point(field_mutable:CLRMetric.gc)
  return _internal_mutable_gc();
}
inline void CLRMetric::set_allocated_gc(::ClrGC* gc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gc_;
  }
  if (gc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gc, submessage_arena);
    }
    
  } else {
    
  }
  gc_ = gc;
  // @@protoc_insertion_point(field_set_allocated:CLRMetric.gc)
}

// .ClrThread thread = 4;
inline bool CLRMetric::_internal_has_thread() const {
  return this != internal_default_instance() && thread_ != nullptr;
}
inline bool CLRMetric::has_thread() const {
  return _internal_has_thread();
}
inline void CLRMetric::clear_thread() {
  if (GetArenaNoVirtual() == nullptr && thread_ != nullptr) {
    delete thread_;
  }
  thread_ = nullptr;
}
inline const ::ClrThread& CLRMetric::_internal_thread() const {
  const ::ClrThread* p = thread_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClrThread*>(
      &::_ClrThread_default_instance_);
}
inline const ::ClrThread& CLRMetric::thread() const {
  // @@protoc_insertion_point(field_get:CLRMetric.thread)
  return _internal_thread();
}
inline ::ClrThread* CLRMetric::release_thread() {
  // @@protoc_insertion_point(field_release:CLRMetric.thread)
  
  ::ClrThread* temp = thread_;
  thread_ = nullptr;
  return temp;
}
inline ::ClrThread* CLRMetric::_internal_mutable_thread() {
  
  if (thread_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClrThread>(GetArenaNoVirtual());
    thread_ = p;
  }
  return thread_;
}
inline ::ClrThread* CLRMetric::mutable_thread() {
  // @@protoc_insertion_point(field_mutable:CLRMetric.thread)
  return _internal_mutable_thread();
}
inline void CLRMetric::set_allocated_thread(::ClrThread* thread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete thread_;
  }
  if (thread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread, submessage_arena);
    }
    
  } else {
    
  }
  thread_ = thread;
  // @@protoc_insertion_point(field_set_allocated:CLRMetric.thread)
}

// -------------------------------------------------------------------

// ClrGC

// int64 Gen0CollectCount = 1;
inline void ClrGC::clear_gen0collectcount() {
  gen0collectcount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClrGC::_internal_gen0collectcount() const {
  return gen0collectcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClrGC::gen0collectcount() const {
  // @@protoc_insertion_point(field_get:ClrGC.Gen0CollectCount)
  return _internal_gen0collectcount();
}
inline void ClrGC::_internal_set_gen0collectcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gen0collectcount_ = value;
}
inline void ClrGC::set_gen0collectcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gen0collectcount(value);
  // @@protoc_insertion_point(field_set:ClrGC.Gen0CollectCount)
}

// int64 Gen1CollectCount = 2;
inline void ClrGC::clear_gen1collectcount() {
  gen1collectcount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClrGC::_internal_gen1collectcount() const {
  return gen1collectcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClrGC::gen1collectcount() const {
  // @@protoc_insertion_point(field_get:ClrGC.Gen1CollectCount)
  return _internal_gen1collectcount();
}
inline void ClrGC::_internal_set_gen1collectcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gen1collectcount_ = value;
}
inline void ClrGC::set_gen1collectcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gen1collectcount(value);
  // @@protoc_insertion_point(field_set:ClrGC.Gen1CollectCount)
}

// int64 Gen2CollectCount = 3;
inline void ClrGC::clear_gen2collectcount() {
  gen2collectcount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClrGC::_internal_gen2collectcount() const {
  return gen2collectcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClrGC::gen2collectcount() const {
  // @@protoc_insertion_point(field_get:ClrGC.Gen2CollectCount)
  return _internal_gen2collectcount();
}
inline void ClrGC::_internal_set_gen2collectcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gen2collectcount_ = value;
}
inline void ClrGC::set_gen2collectcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gen2collectcount(value);
  // @@protoc_insertion_point(field_set:ClrGC.Gen2CollectCount)
}

// int64 HeapMemory = 4;
inline void ClrGC::clear_heapmemory() {
  heapmemory_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClrGC::_internal_heapmemory() const {
  return heapmemory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClrGC::heapmemory() const {
  // @@protoc_insertion_point(field_get:ClrGC.HeapMemory)
  return _internal_heapmemory();
}
inline void ClrGC::_internal_set_heapmemory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  heapmemory_ = value;
}
inline void ClrGC::set_heapmemory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_heapmemory(value);
  // @@protoc_insertion_point(field_set:ClrGC.HeapMemory)
}

// -------------------------------------------------------------------

// ClrThread

// int32 AvailableCompletionPortThreads = 1;
inline void ClrThread::clear_availablecompletionportthreads() {
  availablecompletionportthreads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClrThread::_internal_availablecompletionportthreads() const {
  return availablecompletionportthreads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClrThread::availablecompletionportthreads() const {
  // @@protoc_insertion_point(field_get:ClrThread.AvailableCompletionPortThreads)
  return _internal_availablecompletionportthreads();
}
inline void ClrThread::_internal_set_availablecompletionportthreads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  availablecompletionportthreads_ = value;
}
inline void ClrThread::set_availablecompletionportthreads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_availablecompletionportthreads(value);
  // @@protoc_insertion_point(field_set:ClrThread.AvailableCompletionPortThreads)
}

// int32 AvailableWorkerThreads = 2;
inline void ClrThread::clear_availableworkerthreads() {
  availableworkerthreads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClrThread::_internal_availableworkerthreads() const {
  return availableworkerthreads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClrThread::availableworkerthreads() const {
  // @@protoc_insertion_point(field_get:ClrThread.AvailableWorkerThreads)
  return _internal_availableworkerthreads();
}
inline void ClrThread::_internal_set_availableworkerthreads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  availableworkerthreads_ = value;
}
inline void ClrThread::set_availableworkerthreads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_availableworkerthreads(value);
  // @@protoc_insertion_point(field_set:ClrThread.AvailableWorkerThreads)
}

// int32 MaxCompletionPortThreads = 3;
inline void ClrThread::clear_maxcompletionportthreads() {
  maxcompletionportthreads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClrThread::_internal_maxcompletionportthreads() const {
  return maxcompletionportthreads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClrThread::maxcompletionportthreads() const {
  // @@protoc_insertion_point(field_get:ClrThread.MaxCompletionPortThreads)
  return _internal_maxcompletionportthreads();
}
inline void ClrThread::_internal_set_maxcompletionportthreads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxcompletionportthreads_ = value;
}
inline void ClrThread::set_maxcompletionportthreads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxcompletionportthreads(value);
  // @@protoc_insertion_point(field_set:ClrThread.MaxCompletionPortThreads)
}

// int32 MaxWorkerThreads = 4;
inline void ClrThread::clear_maxworkerthreads() {
  maxworkerthreads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClrThread::_internal_maxworkerthreads() const {
  return maxworkerthreads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClrThread::maxworkerthreads() const {
  // @@protoc_insertion_point(field_get:ClrThread.MaxWorkerThreads)
  return _internal_maxworkerthreads();
}
inline void ClrThread::_internal_set_maxworkerthreads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxworkerthreads_ = value;
}
inline void ClrThread::set_maxworkerthreads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxworkerthreads(value);
  // @@protoc_insertion_point(field_set:ClrThread.MaxWorkerThreads)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fCLR_2eproto
