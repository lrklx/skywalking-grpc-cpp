// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent-v2/CLRMetric.proto

#include "language-agent-v2/CLRMetric.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fCLR_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CLRMetric_common_2fCLR_2eproto;
class CLRMetricCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLRMetricCollection> _instance;
} _CLRMetricCollection_default_instance_;
static void InitDefaultsscc_info_CLRMetricCollection_language_2dagent_2dv2_2fCLRMetric_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CLRMetricCollection_default_instance_;
    new (ptr) ::CLRMetricCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CLRMetricCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CLRMetricCollection_language_2dagent_2dv2_2fCLRMetric_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CLRMetricCollection_language_2dagent_2dv2_2fCLRMetric_2eproto}, {
      &scc_info_CLRMetric_common_2fCLR_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_language_2dagent_2dv2_2fCLRMetric_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_language_2dagent_2dv2_2fCLRMetric_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_language_2dagent_2dv2_2fCLRMetric_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_language_2dagent_2dv2_2fCLRMetric_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CLRMetricCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLRMetricCollection, metrics_),
  PROTOBUF_FIELD_OFFSET(::CLRMetricCollection, serviceinstanceid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CLRMetricCollection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLRMetricCollection_default_instance_),
};

const char descriptor_table_protodef_language_2dagent_2dv2_2fCLRMetric_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!language-agent-v2/CLRMetric.proto\032\023com"
  "mon/common.proto\032\020common/CLR.proto\"M\n\023CL"
  "RMetricCollection\022\033\n\007metrics\030\001 \003(\0132\n.CLR"
  "Metric\022\031\n\021serviceInstanceId\030\002 \001(\0052F\n\026CLR"
  "MetricReportService\022,\n\007collect\022\024.CLRMetr"
  "icCollection\032\t.Commands\"\000BT\n3org.apache."
  "skywalking.apm.network.language.agent.v2"
  "P\001\252\002\032SkyWalking.NetworkProtocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto_deps[2] = {
  &::descriptor_table_common_2fCLR_2eproto,
  &::descriptor_table_common_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto_sccs[1] = {
  &scc_info_CLRMetricCollection_language_2dagent_2dv2_2fCLRMetric_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto_once;
static bool descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto = {
  &descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto_initialized, descriptor_table_protodef_language_2dagent_2dv2_2fCLRMetric_2eproto, "language-agent-v2/CLRMetric.proto", 319,
  &descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto_once, descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto_sccs, descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_language_2dagent_2dv2_2fCLRMetric_2eproto::offsets,
  file_level_metadata_language_2dagent_2dv2_2fCLRMetric_2eproto, 1, file_level_enum_descriptors_language_2dagent_2dv2_2fCLRMetric_2eproto, file_level_service_descriptors_language_2dagent_2dv2_2fCLRMetric_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_language_2dagent_2dv2_2fCLRMetric_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_language_2dagent_2dv2_2fCLRMetric_2eproto), true);

// ===================================================================

void CLRMetricCollection::InitAsDefaultInstance() {
}
class CLRMetricCollection::_Internal {
 public:
};

void CLRMetricCollection::clear_metrics() {
  metrics_.Clear();
}
CLRMetricCollection::CLRMetricCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLRMetricCollection)
}
CLRMetricCollection::CLRMetricCollection(const CLRMetricCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serviceinstanceid_ = from.serviceinstanceid_;
  // @@protoc_insertion_point(copy_constructor:CLRMetricCollection)
}

void CLRMetricCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CLRMetricCollection_language_2dagent_2dv2_2fCLRMetric_2eproto.base);
  serviceinstanceid_ = 0;
}

CLRMetricCollection::~CLRMetricCollection() {
  // @@protoc_insertion_point(destructor:CLRMetricCollection)
  SharedDtor();
}

void CLRMetricCollection::SharedDtor() {
}

void CLRMetricCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLRMetricCollection& CLRMetricCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLRMetricCollection_language_2dagent_2dv2_2fCLRMetric_2eproto.base);
  return *internal_default_instance();
}


void CLRMetricCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:CLRMetricCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  serviceinstanceid_ = 0;
  _internal_metadata_.Clear();
}

const char* CLRMetricCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CLRMetric metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 serviceInstanceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serviceinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLRMetricCollection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLRMetricCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CLRMetric metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_metrics(i), target, stream);
  }

  // int32 serviceInstanceId = 2;
  if (this->serviceinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_serviceinstanceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLRMetricCollection)
  return target;
}

size_t CLRMetricCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLRMetricCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CLRMetric metrics = 1;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 serviceInstanceId = 2;
  if (this->serviceinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceinstanceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLRMetricCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLRMetricCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const CLRMetricCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLRMetricCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLRMetricCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLRMetricCollection)
    MergeFrom(*source);
  }
}

void CLRMetricCollection::MergeFrom(const CLRMetricCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLRMetricCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  if (from.serviceinstanceid() != 0) {
    _internal_set_serviceinstanceid(from._internal_serviceinstanceid());
  }
}

void CLRMetricCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLRMetricCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLRMetricCollection::CopyFrom(const CLRMetricCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLRMetricCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLRMetricCollection::IsInitialized() const {
  return true;
}

void CLRMetricCollection::InternalSwap(CLRMetricCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
  swap(serviceinstanceid_, other->serviceinstanceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLRMetricCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CLRMetricCollection* Arena::CreateMaybeMessage< ::CLRMetricCollection >(Arena* arena) {
  return Arena::CreateInternal< ::CLRMetricCollection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
