// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: language-agent-v2/trace.proto

#include "language-agent-v2/trace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyStringValuePair_common_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2dv2_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Log_language_2dagent_2dv2_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2dv2_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegmentReference_language_2dagent_2dv2_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_language_2dagent_2dv2_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpanObjectV2_language_2dagent_2dv2_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2ftrace_2dcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueId_common_2ftrace_2dcommon_2eproto;
class SegmentObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentObject> _instance;
} _SegmentObject_default_instance_;
class SegmentReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentReference> _instance;
} _SegmentReference_default_instance_;
class SpanObjectV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpanObjectV2> _instance;
} _SpanObjectV2_default_instance_;
class LogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Log> _instance;
} _Log_default_instance_;
static void InitDefaultsscc_info_Log_language_2dagent_2dv2_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Log_default_instance_;
    new (ptr) ::Log();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Log::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Log_language_2dagent_2dv2_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Log_language_2dagent_2dv2_2ftrace_2eproto}, {
      &scc_info_KeyStringValuePair_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SegmentObject_language_2dagent_2dv2_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SegmentObject_default_instance_;
    new (ptr) ::SegmentObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SegmentObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SegmentObject_language_2dagent_2dv2_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SegmentObject_language_2dagent_2dv2_2ftrace_2eproto}, {
      &scc_info_UniqueId_common_2ftrace_2dcommon_2eproto.base,
      &scc_info_SpanObjectV2_language_2dagent_2dv2_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_SegmentReference_language_2dagent_2dv2_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SegmentReference_default_instance_;
    new (ptr) ::SegmentReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SegmentReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegmentReference_language_2dagent_2dv2_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SegmentReference_language_2dagent_2dv2_2ftrace_2eproto}, {
      &scc_info_UniqueId_common_2ftrace_2dcommon_2eproto.base,}};

static void InitDefaultsscc_info_SpanObjectV2_language_2dagent_2dv2_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SpanObjectV2_default_instance_;
    new (ptr) ::SpanObjectV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpanObjectV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpanObjectV2_language_2dagent_2dv2_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpanObjectV2_language_2dagent_2dv2_2ftrace_2eproto}, {
      &scc_info_SegmentReference_language_2dagent_2dv2_2ftrace_2eproto.base,
      &scc_info_KeyStringValuePair_common_2fcommon_2eproto.base,
      &scc_info_Log_language_2dagent_2dv2_2ftrace_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_language_2dagent_2dv2_2ftrace_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_language_2dagent_2dv2_2ftrace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_language_2dagent_2dv2_2ftrace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_language_2dagent_2dv2_2ftrace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SegmentObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SegmentObject, tracesegmentid_),
  PROTOBUF_FIELD_OFFSET(::SegmentObject, spans_),
  PROTOBUF_FIELD_OFFSET(::SegmentObject, serviceid_),
  PROTOBUF_FIELD_OFFSET(::SegmentObject, serviceinstanceid_),
  PROTOBUF_FIELD_OFFSET(::SegmentObject, issizelimited_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SegmentReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SegmentReference, reftype_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, parenttracesegmentid_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, parentspanid_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, parentserviceinstanceid_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, networkaddress_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, networkaddressid_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, entryserviceinstanceid_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, entryendpoint_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, entryendpointid_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, parentendpoint_),
  PROTOBUF_FIELD_OFFSET(::SegmentReference, parentendpointid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, spanid_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, parentspanid_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, starttime_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, endtime_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, refs_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, operationnameid_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, operationname_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, peerid_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, peer_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, spantype_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, spanlayer_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, componentid_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, component_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, iserror_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, tags_),
  PROTOBUF_FIELD_OFFSET(::SpanObjectV2, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Log, time_),
  PROTOBUF_FIELD_OFFSET(::Log, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SegmentObject)},
  { 10, -1, sizeof(::SegmentReference)},
  { 26, -1, sizeof(::SpanObjectV2)},
  { 47, -1, sizeof(::Log)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SegmentObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SegmentReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpanObjectV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Log_default_instance_),
};

const char descriptor_table_protodef_language_2dagent_2dv2_2ftrace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035language-agent-v2/trace.proto\032\023common/"
  "common.proto\032\031common/trace-common.proto\""
  "\225\001\n\rSegmentObject\022!\n\016traceSegmentId\030\001 \001("
  "\0132\t.UniqueId\022\034\n\005spans\030\002 \003(\0132\r.SpanObject"
  "V2\022\021\n\tserviceId\030\003 \001(\005\022\031\n\021serviceInstance"
  "Id\030\004 \001(\005\022\025\n\risSizeLimited\030\005 \001(\010\"\301\002\n\020Segm"
  "entReference\022\031\n\007refType\030\001 \001(\0162\010.RefType\022"
  "\'\n\024parentTraceSegmentId\030\002 \001(\0132\t.UniqueId"
  "\022\024\n\014parentSpanId\030\003 \001(\005\022\037\n\027parentServiceI"
  "nstanceId\030\004 \001(\005\022\026\n\016networkAddress\030\005 \001(\t\022"
  "\030\n\020networkAddressId\030\006 \001(\005\022\036\n\026entryServic"
  "eInstanceId\030\007 \001(\005\022\025\n\rentryEndpoint\030\010 \001(\t"
  "\022\027\n\017entryEndpointId\030\t \001(\005\022\026\n\016parentEndpo"
  "int\030\n \001(\t\022\030\n\020parentEndpointId\030\013 \001(\005\"\363\002\n\014"
  "SpanObjectV2\022\016\n\006spanId\030\001 \001(\005\022\024\n\014parentSp"
  "anId\030\002 \001(\005\022\021\n\tstartTime\030\003 \001(\003\022\017\n\007endTime"
  "\030\004 \001(\003\022\037\n\004refs\030\005 \003(\0132\021.SegmentReference\022"
  "\027\n\017operationNameId\030\006 \001(\005\022\025\n\roperationNam"
  "e\030\007 \001(\t\022\016\n\006peerId\030\010 \001(\005\022\014\n\004peer\030\t \001(\t\022\033\n"
  "\010spanType\030\n \001(\0162\t.SpanType\022\035\n\tspanLayer\030"
  "\013 \001(\0162\n.SpanLayer\022\023\n\013componentId\030\014 \001(\005\022\021"
  "\n\tcomponent\030\r \001(\t\022\017\n\007isError\030\016 \001(\010\022!\n\004ta"
  "gs\030\017 \003(\0132\023.KeyStringValuePair\022\022\n\004logs\030\020 "
  "\003(\0132\004.Log\"6\n\003Log\022\014\n\004time\030\001 \001(\003\022!\n\004data\030\002"
  " \003(\0132\023.KeyStringValuePair2G\n\031TraceSegmen"
  "tReportService\022*\n\007collect\022\020.UpstreamSegm"
  "ent\032\t.Commands\"\000(\001BT\n3org.apache.skywalk"
  "ing.apm.network.language.agent.v2P\001\252\002\032Sk"
  "yWalking.NetworkProtocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_language_2dagent_2dv2_2ftrace_2eproto_deps[2] = {
  &::descriptor_table_common_2fcommon_2eproto,
  &::descriptor_table_common_2ftrace_2dcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_language_2dagent_2dv2_2ftrace_2eproto_sccs[4] = {
  &scc_info_Log_language_2dagent_2dv2_2ftrace_2eproto.base,
  &scc_info_SegmentObject_language_2dagent_2dv2_2ftrace_2eproto.base,
  &scc_info_SegmentReference_language_2dagent_2dv2_2ftrace_2eproto.base,
  &scc_info_SpanObjectV2_language_2dagent_2dv2_2ftrace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_language_2dagent_2dv2_2ftrace_2eproto_once;
static bool descriptor_table_language_2dagent_2dv2_2ftrace_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_language_2dagent_2dv2_2ftrace_2eproto = {
  &descriptor_table_language_2dagent_2dv2_2ftrace_2eproto_initialized, descriptor_table_protodef_language_2dagent_2dv2_2ftrace_2eproto, "language-agent-v2/trace.proto", 1152,
  &descriptor_table_language_2dagent_2dv2_2ftrace_2eproto_once, descriptor_table_language_2dagent_2dv2_2ftrace_2eproto_sccs, descriptor_table_language_2dagent_2dv2_2ftrace_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_language_2dagent_2dv2_2ftrace_2eproto::offsets,
  file_level_metadata_language_2dagent_2dv2_2ftrace_2eproto, 4, file_level_enum_descriptors_language_2dagent_2dv2_2ftrace_2eproto, file_level_service_descriptors_language_2dagent_2dv2_2ftrace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_language_2dagent_2dv2_2ftrace_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_language_2dagent_2dv2_2ftrace_2eproto), true);

// ===================================================================

void SegmentObject::InitAsDefaultInstance() {
  ::_SegmentObject_default_instance_._instance.get_mutable()->tracesegmentid_ = const_cast< ::UniqueId*>(
      ::UniqueId::internal_default_instance());
}
class SegmentObject::_Internal {
 public:
  static const ::UniqueId& tracesegmentid(const SegmentObject* msg);
};

const ::UniqueId&
SegmentObject::_Internal::tracesegmentid(const SegmentObject* msg) {
  return *msg->tracesegmentid_;
}
void SegmentObject::clear_tracesegmentid() {
  if (GetArenaNoVirtual() == nullptr && tracesegmentid_ != nullptr) {
    delete tracesegmentid_;
  }
  tracesegmentid_ = nullptr;
}
SegmentObject::SegmentObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SegmentObject)
}
SegmentObject::SegmentObject(const SegmentObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      spans_(from.spans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_tracesegmentid()) {
    tracesegmentid_ = new ::UniqueId(*from.tracesegmentid_);
  } else {
    tracesegmentid_ = nullptr;
  }
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&issizelimited_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(issizelimited_));
  // @@protoc_insertion_point(copy_constructor:SegmentObject)
}

void SegmentObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentObject_language_2dagent_2dv2_2ftrace_2eproto.base);
  ::memset(&tracesegmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issizelimited_) -
      reinterpret_cast<char*>(&tracesegmentid_)) + sizeof(issizelimited_));
}

SegmentObject::~SegmentObject() {
  // @@protoc_insertion_point(destructor:SegmentObject)
  SharedDtor();
}

void SegmentObject::SharedDtor() {
  if (this != internal_default_instance()) delete tracesegmentid_;
}

void SegmentObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentObject& SegmentObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentObject_language_2dagent_2dv2_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void SegmentObject::Clear() {
// @@protoc_insertion_point(message_clear_start:SegmentObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spans_.Clear();
  if (GetArenaNoVirtual() == nullptr && tracesegmentid_ != nullptr) {
    delete tracesegmentid_;
  }
  tracesegmentid_ = nullptr;
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issizelimited_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(issizelimited_));
  _internal_metadata_.Clear();
}

const char* SegmentObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .UniqueId traceSegmentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracesegmentid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SpanObjectV2 spans = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 serviceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 serviceInstanceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          serviceinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSizeLimited = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          issizelimited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SegmentObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UniqueId traceSegmentId = 1;
  if (this->has_tracesegmentid()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::tracesegmentid(this), target, stream);
  }

  // repeated .SpanObjectV2 spans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spans_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_spans(i), target, stream);
  }

  // int32 serviceId = 3;
  if (this->serviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_serviceid(), target);
  }

  // int32 serviceInstanceId = 4;
  if (this->serviceinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serviceinstanceid(), target);
  }

  // bool isSizeLimited = 5;
  if (this->issizelimited() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_issizelimited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SegmentObject)
  return target;
}

size_t SegmentObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SegmentObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SpanObjectV2 spans = 2;
  total_size += 1UL * this->_internal_spans_size();
  for (const auto& msg : this->spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .UniqueId traceSegmentId = 1;
  if (this->has_tracesegmentid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tracesegmentid_);
  }

  // int32 serviceId = 3;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceid());
  }

  // int32 serviceInstanceId = 4;
  if (this->serviceinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceinstanceid());
  }

  // bool isSizeLimited = 5;
  if (this->issizelimited() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SegmentObject)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SegmentObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SegmentObject)
    MergeFrom(*source);
  }
}

void SegmentObject::MergeFrom(const SegmentObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SegmentObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
  if (from.has_tracesegmentid()) {
    _internal_mutable_tracesegmentid()->::UniqueId::MergeFrom(from._internal_tracesegmentid());
  }
  if (from.serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
  if (from.serviceinstanceid() != 0) {
    _internal_set_serviceinstanceid(from._internal_serviceinstanceid());
  }
  if (from.issizelimited() != 0) {
    _internal_set_issizelimited(from._internal_issizelimited());
  }
}

void SegmentObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SegmentObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentObject::CopyFrom(const SegmentObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SegmentObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentObject::IsInitialized() const {
  return true;
}

void SegmentObject::InternalSwap(SegmentObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  spans_.InternalSwap(&other->spans_);
  swap(tracesegmentid_, other->tracesegmentid_);
  swap(serviceid_, other->serviceid_);
  swap(serviceinstanceid_, other->serviceinstanceid_);
  swap(issizelimited_, other->issizelimited_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentReference::InitAsDefaultInstance() {
  ::_SegmentReference_default_instance_._instance.get_mutable()->parenttracesegmentid_ = const_cast< ::UniqueId*>(
      ::UniqueId::internal_default_instance());
}
class SegmentReference::_Internal {
 public:
  static const ::UniqueId& parenttracesegmentid(const SegmentReference* msg);
};

const ::UniqueId&
SegmentReference::_Internal::parenttracesegmentid(const SegmentReference* msg) {
  return *msg->parenttracesegmentid_;
}
void SegmentReference::clear_parenttracesegmentid() {
  if (GetArenaNoVirtual() == nullptr && parenttracesegmentid_ != nullptr) {
    delete parenttracesegmentid_;
  }
  parenttracesegmentid_ = nullptr;
}
SegmentReference::SegmentReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SegmentReference)
}
SegmentReference::SegmentReference(const SegmentReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  networkaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_networkaddress().empty()) {
    networkaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.networkaddress_);
  }
  entryendpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entryendpoint().empty()) {
    entryendpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entryendpoint_);
  }
  parentendpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parentendpoint().empty()) {
    parentendpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parentendpoint_);
  }
  if (from._internal_has_parenttracesegmentid()) {
    parenttracesegmentid_ = new ::UniqueId(*from.parenttracesegmentid_);
  } else {
    parenttracesegmentid_ = nullptr;
  }
  ::memcpy(&reftype_, &from.reftype_,
    static_cast<size_t>(reinterpret_cast<char*>(&parentendpointid_) -
    reinterpret_cast<char*>(&reftype_)) + sizeof(parentendpointid_));
  // @@protoc_insertion_point(copy_constructor:SegmentReference)
}

void SegmentReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentReference_language_2dagent_2dv2_2ftrace_2eproto.base);
  networkaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryendpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentendpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&parenttracesegmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentendpointid_) -
      reinterpret_cast<char*>(&parenttracesegmentid_)) + sizeof(parentendpointid_));
}

SegmentReference::~SegmentReference() {
  // @@protoc_insertion_point(destructor:SegmentReference)
  SharedDtor();
}

void SegmentReference::SharedDtor() {
  networkaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryendpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentendpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parenttracesegmentid_;
}

void SegmentReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentReference& SegmentReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentReference_language_2dagent_2dv2_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void SegmentReference::Clear() {
// @@protoc_insertion_point(message_clear_start:SegmentReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryendpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parentendpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && parenttracesegmentid_ != nullptr) {
    delete parenttracesegmentid_;
  }
  parenttracesegmentid_ = nullptr;
  ::memset(&reftype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentendpointid_) -
      reinterpret_cast<char*>(&reftype_)) + sizeof(parentendpointid_));
  _internal_metadata_.Clear();
}

const char* SegmentReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RefType refType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_reftype(static_cast<::RefType>(val));
        } else goto handle_unusual;
        continue;
      // .UniqueId parentTraceSegmentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parenttracesegmentid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parentSpanId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parentspanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parentServiceInstanceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parentserviceinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string networkAddress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_networkaddress(), ptr, ctx, "SegmentReference.networkAddress");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 networkAddressId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          networkaddressid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 entryServiceInstanceId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          entryserviceinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entryEndpoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_entryendpoint(), ptr, ctx, "SegmentReference.entryEndpoint");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 entryEndpointId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          entryendpointid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parentEndpoint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_parentendpoint(), ptr, ctx, "SegmentReference.parentEndpoint");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parentEndpointId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          parentendpointid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentReference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SegmentReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RefType refType = 1;
  if (this->reftype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reftype(), target);
  }

  // .UniqueId parentTraceSegmentId = 2;
  if (this->has_parenttracesegmentid()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::parenttracesegmentid(this), target, stream);
  }

  // int32 parentSpanId = 3;
  if (this->parentspanid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_parentspanid(), target);
  }

  // int32 parentServiceInstanceId = 4;
  if (this->parentserviceinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_parentserviceinstanceid(), target);
  }

  // string networkAddress = 5;
  if (this->networkaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_networkaddress().data(), static_cast<int>(this->_internal_networkaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SegmentReference.networkAddress");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_networkaddress(), target);
  }

  // int32 networkAddressId = 6;
  if (this->networkaddressid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_networkaddressid(), target);
  }

  // int32 entryServiceInstanceId = 7;
  if (this->entryserviceinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_entryserviceinstanceid(), target);
  }

  // string entryEndpoint = 8;
  if (this->entryendpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entryendpoint().data(), static_cast<int>(this->_internal_entryendpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SegmentReference.entryEndpoint");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_entryendpoint(), target);
  }

  // int32 entryEndpointId = 9;
  if (this->entryendpointid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_entryendpointid(), target);
  }

  // string parentEndpoint = 10;
  if (this->parentendpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentendpoint().data(), static_cast<int>(this->_internal_parentendpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SegmentReference.parentEndpoint");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_parentendpoint(), target);
  }

  // int32 parentEndpointId = 11;
  if (this->parentendpointid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_parentendpointid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SegmentReference)
  return target;
}

size_t SegmentReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SegmentReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string networkAddress = 5;
  if (this->networkaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_networkaddress());
  }

  // string entryEndpoint = 8;
  if (this->entryendpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entryendpoint());
  }

  // string parentEndpoint = 10;
  if (this->parentendpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentendpoint());
  }

  // .UniqueId parentTraceSegmentId = 2;
  if (this->has_parenttracesegmentid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parenttracesegmentid_);
  }

  // .RefType refType = 1;
  if (this->reftype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reftype());
  }

  // int32 parentSpanId = 3;
  if (this->parentspanid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parentspanid());
  }

  // int32 parentServiceInstanceId = 4;
  if (this->parentserviceinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parentserviceinstanceid());
  }

  // int32 networkAddressId = 6;
  if (this->networkaddressid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_networkaddressid());
  }

  // int32 entryServiceInstanceId = 7;
  if (this->entryserviceinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entryserviceinstanceid());
  }

  // int32 entryEndpointId = 9;
  if (this->entryendpointid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entryendpointid());
  }

  // int32 parentEndpointId = 11;
  if (this->parentendpointid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parentendpointid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SegmentReference)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SegmentReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SegmentReference)
    MergeFrom(*source);
  }
}

void SegmentReference::MergeFrom(const SegmentReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SegmentReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkaddress().size() > 0) {

    networkaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.networkaddress_);
  }
  if (from.entryendpoint().size() > 0) {

    entryendpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entryendpoint_);
  }
  if (from.parentendpoint().size() > 0) {

    parentendpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parentendpoint_);
  }
  if (from.has_parenttracesegmentid()) {
    _internal_mutable_parenttracesegmentid()->::UniqueId::MergeFrom(from._internal_parenttracesegmentid());
  }
  if (from.reftype() != 0) {
    _internal_set_reftype(from._internal_reftype());
  }
  if (from.parentspanid() != 0) {
    _internal_set_parentspanid(from._internal_parentspanid());
  }
  if (from.parentserviceinstanceid() != 0) {
    _internal_set_parentserviceinstanceid(from._internal_parentserviceinstanceid());
  }
  if (from.networkaddressid() != 0) {
    _internal_set_networkaddressid(from._internal_networkaddressid());
  }
  if (from.entryserviceinstanceid() != 0) {
    _internal_set_entryserviceinstanceid(from._internal_entryserviceinstanceid());
  }
  if (from.entryendpointid() != 0) {
    _internal_set_entryendpointid(from._internal_entryendpointid());
  }
  if (from.parentendpointid() != 0) {
    _internal_set_parentendpointid(from._internal_parentendpointid());
  }
}

void SegmentReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SegmentReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentReference::CopyFrom(const SegmentReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SegmentReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentReference::IsInitialized() const {
  return true;
}

void SegmentReference::InternalSwap(SegmentReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  networkaddress_.Swap(&other->networkaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entryendpoint_.Swap(&other->entryendpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parentendpoint_.Swap(&other->parentendpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(parenttracesegmentid_, other->parenttracesegmentid_);
  swap(reftype_, other->reftype_);
  swap(parentspanid_, other->parentspanid_);
  swap(parentserviceinstanceid_, other->parentserviceinstanceid_);
  swap(networkaddressid_, other->networkaddressid_);
  swap(entryserviceinstanceid_, other->entryserviceinstanceid_);
  swap(entryendpointid_, other->entryendpointid_);
  swap(parentendpointid_, other->parentendpointid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpanObjectV2::InitAsDefaultInstance() {
}
class SpanObjectV2::_Internal {
 public:
};

void SpanObjectV2::clear_tags() {
  tags_.Clear();
}
SpanObjectV2::SpanObjectV2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpanObjectV2)
}
SpanObjectV2::SpanObjectV2(const SpanObjectV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      refs_(from.refs_),
      tags_(from.tags_),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operationname().empty()) {
    operationname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operationname_);
  }
  peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer().empty()) {
    peer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_);
  }
  component_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_component().empty()) {
    component_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  ::memcpy(&spanid_, &from.spanid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iserror_) -
    reinterpret_cast<char*>(&spanid_)) + sizeof(iserror_));
  // @@protoc_insertion_point(copy_constructor:SpanObjectV2)
}

void SpanObjectV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpanObjectV2_language_2dagent_2dv2_2ftrace_2eproto.base);
  operationname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spanid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iserror_) -
      reinterpret_cast<char*>(&spanid_)) + sizeof(iserror_));
}

SpanObjectV2::~SpanObjectV2() {
  // @@protoc_insertion_point(destructor:SpanObjectV2)
  SharedDtor();
}

void SpanObjectV2::SharedDtor() {
  operationname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpanObjectV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpanObjectV2& SpanObjectV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpanObjectV2_language_2dagent_2dv2_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void SpanObjectV2::Clear() {
// @@protoc_insertion_point(message_clear_start:SpanObjectV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refs_.Clear();
  tags_.Clear();
  logs_.Clear();
  operationname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spanid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iserror_) -
      reinterpret_cast<char*>(&spanid_)) + sizeof(iserror_));
  _internal_metadata_.Clear();
}

const char* SpanObjectV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 spanId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          spanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parentSpanId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parentspanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SegmentReference refs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 operationNameId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          operationnameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operationName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_operationname(), ptr, ctx, "SpanObjectV2.operationName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 peerId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          peerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_peer(), ptr, ctx, "SpanObjectV2.peer");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SpanType spanType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_spantype(static_cast<::SpanType>(val));
        } else goto handle_unusual;
        continue;
      // .SpanLayer spanLayer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_spanlayer(static_cast<::SpanLayer>(val));
        } else goto handle_unusual;
        continue;
      // int32 componentId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          componentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string component = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_component(), ptr, ctx, "SpanObjectV2.component");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isError = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          iserror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KeyStringValuePair tags = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Log logs = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanObjectV2::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpanObjectV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spanId = 1;
  if (this->spanid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_spanid(), target);
  }

  // int32 parentSpanId = 2;
  if (this->parentspanid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parentspanid(), target);
  }

  // int64 startTime = 3;
  if (this->starttime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_starttime(), target);
  }

  // int64 endTime = 4;
  if (this->endtime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_endtime(), target);
  }

  // repeated .SegmentReference refs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_refs(i), target, stream);
  }

  // int32 operationNameId = 6;
  if (this->operationnameid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_operationnameid(), target);
  }

  // string operationName = 7;
  if (this->operationname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operationname().data(), static_cast<int>(this->_internal_operationname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpanObjectV2.operationName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_operationname(), target);
  }

  // int32 peerId = 8;
  if (this->peerid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_peerid(), target);
  }

  // string peer = 9;
  if (this->peer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer().data(), static_cast<int>(this->_internal_peer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpanObjectV2.peer");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_peer(), target);
  }

  // .SpanType spanType = 10;
  if (this->spantype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_spantype(), target);
  }

  // .SpanLayer spanLayer = 11;
  if (this->spanlayer() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_spanlayer(), target);
  }

  // int32 componentId = 12;
  if (this->componentid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_componentid(), target);
  }

  // string component = 13;
  if (this->component().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component().data(), static_cast<int>(this->_internal_component().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpanObjectV2.component");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_component(), target);
  }

  // bool isError = 14;
  if (this->iserror() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_iserror(), target);
  }

  // repeated .KeyStringValuePair tags = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(15, this->_internal_tags(i), target, stream);
  }

  // repeated .Log logs = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(16, this->_internal_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpanObjectV2)
  return target;
}

size_t SpanObjectV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpanObjectV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SegmentReference refs = 5;
  total_size += 1UL * this->_internal_refs_size();
  for (const auto& msg : this->refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KeyStringValuePair tags = 15;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Log logs = 16;
  total_size += 2UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string operationName = 7;
  if (this->operationname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operationname());
  }

  // string peer = 9;
  if (this->peer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer());
  }

  // string component = 13;
  if (this->component().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component());
  }

  // int32 spanId = 1;
  if (this->spanid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spanid());
  }

  // int32 parentSpanId = 2;
  if (this->parentspanid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parentspanid());
  }

  // int64 startTime = 3;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_starttime());
  }

  // int64 endTime = 4;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endtime());
  }

  // int32 operationNameId = 6;
  if (this->operationnameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operationnameid());
  }

  // int32 peerId = 8;
  if (this->peerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peerid());
  }

  // .SpanType spanType = 10;
  if (this->spantype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spantype());
  }

  // .SpanLayer spanLayer = 11;
  if (this->spanlayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spanlayer());
  }

  // int32 componentId = 12;
  if (this->componentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_componentid());
  }

  // bool isError = 14;
  if (this->iserror() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanObjectV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpanObjectV2)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanObjectV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanObjectV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpanObjectV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpanObjectV2)
    MergeFrom(*source);
  }
}

void SpanObjectV2::MergeFrom(const SpanObjectV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpanObjectV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refs_.MergeFrom(from.refs_);
  tags_.MergeFrom(from.tags_);
  logs_.MergeFrom(from.logs_);
  if (from.operationname().size() > 0) {

    operationname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operationname_);
  }
  if (from.peer().size() > 0) {

    peer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_);
  }
  if (from.component().size() > 0) {

    component_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  if (from.spanid() != 0) {
    _internal_set_spanid(from._internal_spanid());
  }
  if (from.parentspanid() != 0) {
    _internal_set_parentspanid(from._internal_parentspanid());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.operationnameid() != 0) {
    _internal_set_operationnameid(from._internal_operationnameid());
  }
  if (from.peerid() != 0) {
    _internal_set_peerid(from._internal_peerid());
  }
  if (from.spantype() != 0) {
    _internal_set_spantype(from._internal_spantype());
  }
  if (from.spanlayer() != 0) {
    _internal_set_spanlayer(from._internal_spanlayer());
  }
  if (from.componentid() != 0) {
    _internal_set_componentid(from._internal_componentid());
  }
  if (from.iserror() != 0) {
    _internal_set_iserror(from._internal_iserror());
  }
}

void SpanObjectV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpanObjectV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanObjectV2::CopyFrom(const SpanObjectV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpanObjectV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanObjectV2::IsInitialized() const {
  return true;
}

void SpanObjectV2::InternalSwap(SpanObjectV2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  refs_.InternalSwap(&other->refs_);
  tags_.InternalSwap(&other->tags_);
  logs_.InternalSwap(&other->logs_);
  operationname_.Swap(&other->operationname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_.Swap(&other->peer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  component_.Swap(&other->component_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(spanid_, other->spanid_);
  swap(parentspanid_, other->parentspanid_);
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(operationnameid_, other->operationnameid_);
  swap(peerid_, other->peerid_);
  swap(spantype_, other->spantype_);
  swap(spanlayer_, other->spanlayer_);
  swap(componentid_, other->componentid_);
  swap(iserror_, other->iserror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanObjectV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Log::InitAsDefaultInstance() {
}
class Log::_Internal {
 public:
};

void Log::clear_data() {
  data_.Clear();
}
Log::Log()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Log)
}

void Log::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Log_language_2dagent_2dv2_2ftrace_2eproto.base);
  time_ = PROTOBUF_LONGLONG(0);
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:Log)
  SharedDtor();
}

void Log::SharedDtor() {
}

void Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Log& Log::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Log_language_2dagent_2dv2_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KeyStringValuePair data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Log::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // repeated .KeyStringValuePair data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Log)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KeyStringValuePair data = 2;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Log::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Log>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Log)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void Log::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SegmentObject* Arena::CreateMaybeMessage< ::SegmentObject >(Arena* arena) {
  return Arena::CreateInternal< ::SegmentObject >(arena);
}
template<> PROTOBUF_NOINLINE ::SegmentReference* Arena::CreateMaybeMessage< ::SegmentReference >(Arena* arena) {
  return Arena::CreateInternal< ::SegmentReference >(arena);
}
template<> PROTOBUF_NOINLINE ::SpanObjectV2* Arena::CreateMaybeMessage< ::SpanObjectV2 >(Arena* arena) {
  return Arena::CreateInternal< ::SpanObjectV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Log* Arena::CreateMaybeMessage< ::Log >(Arena* arena) {
  return Arena::CreateInternal< ::Log >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
