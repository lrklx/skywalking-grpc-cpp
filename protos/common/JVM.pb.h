// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/JVM.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fJVM_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fJVM_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fJVM_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fJVM_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fJVM_2eproto;
class GC;
class GCDefaultTypeInternal;
extern GCDefaultTypeInternal _GC_default_instance_;
class JVMMetric;
class JVMMetricDefaultTypeInternal;
extern JVMMetricDefaultTypeInternal _JVMMetric_default_instance_;
class Memory;
class MemoryDefaultTypeInternal;
extern MemoryDefaultTypeInternal _Memory_default_instance_;
class MemoryPool;
class MemoryPoolDefaultTypeInternal;
extern MemoryPoolDefaultTypeInternal _MemoryPool_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GC* Arena::CreateMaybeMessage<::GC>(Arena*);
template<> ::JVMMetric* Arena::CreateMaybeMessage<::JVMMetric>(Arena*);
template<> ::Memory* Arena::CreateMaybeMessage<::Memory>(Arena*);
template<> ::MemoryPool* Arena::CreateMaybeMessage<::MemoryPool>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PoolType : int {
  CODE_CACHE_USAGE = 0,
  NEWGEN_USAGE = 1,
  OLDGEN_USAGE = 2,
  SURVIVOR_USAGE = 3,
  PERMGEN_USAGE = 4,
  METASPACE_USAGE = 5,
  PoolType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PoolType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PoolType_IsValid(int value);
constexpr PoolType PoolType_MIN = CODE_CACHE_USAGE;
constexpr PoolType PoolType_MAX = METASPACE_USAGE;
constexpr int PoolType_ARRAYSIZE = PoolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolType_descriptor();
template<typename T>
inline const std::string& PoolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolType_descriptor(), enum_t_value);
}
inline bool PoolType_Parse(
    const std::string& name, PoolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolType>(
    PoolType_descriptor(), name, value);
}
enum GCPhrase : int {
  NEW = 0,
  OLD = 1,
  GCPhrase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GCPhrase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GCPhrase_IsValid(int value);
constexpr GCPhrase GCPhrase_MIN = NEW;
constexpr GCPhrase GCPhrase_MAX = OLD;
constexpr int GCPhrase_ARRAYSIZE = GCPhrase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GCPhrase_descriptor();
template<typename T>
inline const std::string& GCPhrase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GCPhrase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GCPhrase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GCPhrase_descriptor(), enum_t_value);
}
inline bool GCPhrase_Parse(
    const std::string& name, GCPhrase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GCPhrase>(
    GCPhrase_descriptor(), name, value);
}
// ===================================================================

class JVMMetric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JVMMetric) */ {
 public:
  JVMMetric();
  virtual ~JVMMetric();

  JVMMetric(const JVMMetric& from);
  JVMMetric(JVMMetric&& from) noexcept
    : JVMMetric() {
    *this = ::std::move(from);
  }

  inline JVMMetric& operator=(const JVMMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline JVMMetric& operator=(JVMMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JVMMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JVMMetric* internal_default_instance() {
    return reinterpret_cast<const JVMMetric*>(
               &_JVMMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JVMMetric& a, JVMMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(JVMMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JVMMetric* New() const final {
    return CreateMaybeMessage<JVMMetric>(nullptr);
  }

  JVMMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JVMMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JVMMetric& from);
  void MergeFrom(const JVMMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JVMMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JVMMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fJVM_2eproto);
    return ::descriptor_table_common_2fJVM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryFieldNumber = 3,
    kMemoryPoolFieldNumber = 4,
    kGcFieldNumber = 5,
    kCpuFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .Memory memory = 3;
  int memory_size() const;
  private:
  int _internal_memory_size() const;
  public:
  void clear_memory();
  ::Memory* mutable_memory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Memory >*
      mutable_memory();
  private:
  const ::Memory& _internal_memory(int index) const;
  ::Memory* _internal_add_memory();
  public:
  const ::Memory& memory(int index) const;
  ::Memory* add_memory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Memory >&
      memory() const;

  // repeated .MemoryPool memoryPool = 4;
  int memorypool_size() const;
  private:
  int _internal_memorypool_size() const;
  public:
  void clear_memorypool();
  ::MemoryPool* mutable_memorypool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryPool >*
      mutable_memorypool();
  private:
  const ::MemoryPool& _internal_memorypool(int index) const;
  ::MemoryPool* _internal_add_memorypool();
  public:
  const ::MemoryPool& memorypool(int index) const;
  ::MemoryPool* add_memorypool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryPool >&
      memorypool() const;

  // repeated .GC gc = 5;
  int gc_size() const;
  private:
  int _internal_gc_size() const;
  public:
  void clear_gc();
  ::GC* mutable_gc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GC >*
      mutable_gc();
  private:
  const ::GC& _internal_gc(int index) const;
  ::GC* _internal_add_gc();
  public:
  const ::GC& gc(int index) const;
  ::GC* add_gc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GC >&
      gc() const;

  // .CPU cpu = 2;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  const ::CPU& cpu() const;
  ::CPU* release_cpu();
  ::CPU* mutable_cpu();
  void set_allocated_cpu(::CPU* cpu);
  private:
  const ::CPU& _internal_cpu() const;
  ::CPU* _internal_mutable_cpu();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:JVMMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Memory > memory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryPool > memorypool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GC > gc_;
  ::CPU* cpu_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fJVM_2eproto;
};
// -------------------------------------------------------------------

class Memory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Memory) */ {
 public:
  Memory();
  virtual ~Memory();

  Memory(const Memory& from);
  Memory(Memory&& from) noexcept
    : Memory() {
    *this = ::std::move(from);
  }

  inline Memory& operator=(const Memory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Memory& operator=(Memory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Memory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Memory* internal_default_instance() {
    return reinterpret_cast<const Memory*>(
               &_Memory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Memory& a, Memory& b) {
    a.Swap(&b);
  }
  inline void Swap(Memory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Memory* New() const final {
    return CreateMaybeMessage<Memory>(nullptr);
  }

  Memory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Memory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Memory& from);
  void MergeFrom(const Memory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Memory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Memory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fJVM_2eproto);
    return ::descriptor_table_common_2fJVM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitFieldNumber = 2,
    kMaxFieldNumber = 3,
    kUsedFieldNumber = 4,
    kCommittedFieldNumber = 5,
    kIsHeapFieldNumber = 1,
  };
  // int64 init = 2;
  void clear_init();
  ::PROTOBUF_NAMESPACE_ID::int64 init() const;
  void set_init(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_init() const;
  void _internal_set_init(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max = 3;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int64 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 used = 4;
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::int64 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_used() const;
  void _internal_set_used(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 committed = 5;
  void clear_committed();
  ::PROTOBUF_NAMESPACE_ID::int64 committed() const;
  void set_committed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_committed() const;
  void _internal_set_committed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isHeap = 1;
  void clear_isheap();
  bool isheap() const;
  void set_isheap(bool value);
  private:
  bool _internal_isheap() const;
  void _internal_set_isheap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Memory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 init_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_;
  ::PROTOBUF_NAMESPACE_ID::int64 used_;
  ::PROTOBUF_NAMESPACE_ID::int64 committed_;
  bool isheap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fJVM_2eproto;
};
// -------------------------------------------------------------------

class MemoryPool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MemoryPool) */ {
 public:
  MemoryPool();
  virtual ~MemoryPool();

  MemoryPool(const MemoryPool& from);
  MemoryPool(MemoryPool&& from) noexcept
    : MemoryPool() {
    *this = ::std::move(from);
  }

  inline MemoryPool& operator=(const MemoryPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryPool& operator=(MemoryPool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryPool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryPool* internal_default_instance() {
    return reinterpret_cast<const MemoryPool*>(
               &_MemoryPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemoryPool& a, MemoryPool& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryPool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryPool* New() const final {
    return CreateMaybeMessage<MemoryPool>(nullptr);
  }

  MemoryPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryPool& from);
  void MergeFrom(const MemoryPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MemoryPool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fJVM_2eproto);
    return ::descriptor_table_common_2fJVM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitFieldNumber = 2,
    kMaxFieldNumber = 3,
    kUsedFieldNumber = 4,
    kCommitedFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // int64 init = 2;
  void clear_init();
  ::PROTOBUF_NAMESPACE_ID::int64 init() const;
  void set_init(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_init() const;
  void _internal_set_init(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max = 3;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int64 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 used = 4;
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::int64 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_used() const;
  void _internal_set_used(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 commited = 5;
  void clear_commited();
  ::PROTOBUF_NAMESPACE_ID::int64 commited() const;
  void set_commited(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_commited() const;
  void _internal_set_commited(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .PoolType type = 1;
  void clear_type();
  ::PoolType type() const;
  void set_type(::PoolType value);
  private:
  ::PoolType _internal_type() const;
  void _internal_set_type(::PoolType value);
  public:

  // @@protoc_insertion_point(class_scope:MemoryPool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 init_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_;
  ::PROTOBUF_NAMESPACE_ID::int64 used_;
  ::PROTOBUF_NAMESPACE_ID::int64 commited_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fJVM_2eproto;
};
// -------------------------------------------------------------------

class GC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GC) */ {
 public:
  GC();
  virtual ~GC();

  GC(const GC& from);
  GC(GC&& from) noexcept
    : GC() {
    *this = ::std::move(from);
  }

  inline GC& operator=(const GC& from) {
    CopyFrom(from);
    return *this;
  }
  inline GC& operator=(GC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GC* internal_default_instance() {
    return reinterpret_cast<const GC*>(
               &_GC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GC& a, GC& b) {
    a.Swap(&b);
  }
  inline void Swap(GC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GC* New() const final {
    return CreateMaybeMessage<GC>(nullptr);
  }

  GC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GC& from);
  void MergeFrom(const GC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2fJVM_2eproto);
    return ::descriptor_table_common_2fJVM_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 2,
    kTimeFieldNumber = 3,
    kPhraseFieldNumber = 1,
  };
  // int64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .GCPhrase phrase = 1;
  void clear_phrase();
  ::GCPhrase phrase() const;
  void set_phrase(::GCPhrase value);
  private:
  ::GCPhrase _internal_phrase() const;
  void _internal_set_phrase(::GCPhrase value);
  public:

  // @@protoc_insertion_point(class_scope:GC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  int phrase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fJVM_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JVMMetric

// int64 time = 1;
inline void JVMMetric::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JVMMetric::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JVMMetric::time() const {
  // @@protoc_insertion_point(field_get:JVMMetric.time)
  return _internal_time();
}
inline void JVMMetric::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void JVMMetric::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:JVMMetric.time)
}

// .CPU cpu = 2;
inline bool JVMMetric::_internal_has_cpu() const {
  return this != internal_default_instance() && cpu_ != nullptr;
}
inline bool JVMMetric::has_cpu() const {
  return _internal_has_cpu();
}
inline const ::CPU& JVMMetric::_internal_cpu() const {
  const ::CPU* p = cpu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CPU*>(
      &::_CPU_default_instance_);
}
inline const ::CPU& JVMMetric::cpu() const {
  // @@protoc_insertion_point(field_get:JVMMetric.cpu)
  return _internal_cpu();
}
inline ::CPU* JVMMetric::release_cpu() {
  // @@protoc_insertion_point(field_release:JVMMetric.cpu)
  
  ::CPU* temp = cpu_;
  cpu_ = nullptr;
  return temp;
}
inline ::CPU* JVMMetric::_internal_mutable_cpu() {
  
  if (cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPU>(GetArenaNoVirtual());
    cpu_ = p;
  }
  return cpu_;
}
inline ::CPU* JVMMetric::mutable_cpu() {
  // @@protoc_insertion_point(field_mutable:JVMMetric.cpu)
  return _internal_mutable_cpu();
}
inline void JVMMetric::set_allocated_cpu(::CPU* cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_);
  }
  if (cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    
  } else {
    
  }
  cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:JVMMetric.cpu)
}

// repeated .Memory memory = 3;
inline int JVMMetric::_internal_memory_size() const {
  return memory_.size();
}
inline int JVMMetric::memory_size() const {
  return _internal_memory_size();
}
inline void JVMMetric::clear_memory() {
  memory_.Clear();
}
inline ::Memory* JVMMetric::mutable_memory(int index) {
  // @@protoc_insertion_point(field_mutable:JVMMetric.memory)
  return memory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Memory >*
JVMMetric::mutable_memory() {
  // @@protoc_insertion_point(field_mutable_list:JVMMetric.memory)
  return &memory_;
}
inline const ::Memory& JVMMetric::_internal_memory(int index) const {
  return memory_.Get(index);
}
inline const ::Memory& JVMMetric::memory(int index) const {
  // @@protoc_insertion_point(field_get:JVMMetric.memory)
  return _internal_memory(index);
}
inline ::Memory* JVMMetric::_internal_add_memory() {
  return memory_.Add();
}
inline ::Memory* JVMMetric::add_memory() {
  // @@protoc_insertion_point(field_add:JVMMetric.memory)
  return _internal_add_memory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Memory >&
JVMMetric::memory() const {
  // @@protoc_insertion_point(field_list:JVMMetric.memory)
  return memory_;
}

// repeated .MemoryPool memoryPool = 4;
inline int JVMMetric::_internal_memorypool_size() const {
  return memorypool_.size();
}
inline int JVMMetric::memorypool_size() const {
  return _internal_memorypool_size();
}
inline void JVMMetric::clear_memorypool() {
  memorypool_.Clear();
}
inline ::MemoryPool* JVMMetric::mutable_memorypool(int index) {
  // @@protoc_insertion_point(field_mutable:JVMMetric.memoryPool)
  return memorypool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryPool >*
JVMMetric::mutable_memorypool() {
  // @@protoc_insertion_point(field_mutable_list:JVMMetric.memoryPool)
  return &memorypool_;
}
inline const ::MemoryPool& JVMMetric::_internal_memorypool(int index) const {
  return memorypool_.Get(index);
}
inline const ::MemoryPool& JVMMetric::memorypool(int index) const {
  // @@protoc_insertion_point(field_get:JVMMetric.memoryPool)
  return _internal_memorypool(index);
}
inline ::MemoryPool* JVMMetric::_internal_add_memorypool() {
  return memorypool_.Add();
}
inline ::MemoryPool* JVMMetric::add_memorypool() {
  // @@protoc_insertion_point(field_add:JVMMetric.memoryPool)
  return _internal_add_memorypool();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryPool >&
JVMMetric::memorypool() const {
  // @@protoc_insertion_point(field_list:JVMMetric.memoryPool)
  return memorypool_;
}

// repeated .GC gc = 5;
inline int JVMMetric::_internal_gc_size() const {
  return gc_.size();
}
inline int JVMMetric::gc_size() const {
  return _internal_gc_size();
}
inline void JVMMetric::clear_gc() {
  gc_.Clear();
}
inline ::GC* JVMMetric::mutable_gc(int index) {
  // @@protoc_insertion_point(field_mutable:JVMMetric.gc)
  return gc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GC >*
JVMMetric::mutable_gc() {
  // @@protoc_insertion_point(field_mutable_list:JVMMetric.gc)
  return &gc_;
}
inline const ::GC& JVMMetric::_internal_gc(int index) const {
  return gc_.Get(index);
}
inline const ::GC& JVMMetric::gc(int index) const {
  // @@protoc_insertion_point(field_get:JVMMetric.gc)
  return _internal_gc(index);
}
inline ::GC* JVMMetric::_internal_add_gc() {
  return gc_.Add();
}
inline ::GC* JVMMetric::add_gc() {
  // @@protoc_insertion_point(field_add:JVMMetric.gc)
  return _internal_add_gc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GC >&
JVMMetric::gc() const {
  // @@protoc_insertion_point(field_list:JVMMetric.gc)
  return gc_;
}

// -------------------------------------------------------------------

// Memory

// bool isHeap = 1;
inline void Memory::clear_isheap() {
  isheap_ = false;
}
inline bool Memory::_internal_isheap() const {
  return isheap_;
}
inline bool Memory::isheap() const {
  // @@protoc_insertion_point(field_get:Memory.isHeap)
  return _internal_isheap();
}
inline void Memory::_internal_set_isheap(bool value) {
  
  isheap_ = value;
}
inline void Memory::set_isheap(bool value) {
  _internal_set_isheap(value);
  // @@protoc_insertion_point(field_set:Memory.isHeap)
}

// int64 init = 2;
inline void Memory::clear_init() {
  init_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Memory::_internal_init() const {
  return init_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Memory::init() const {
  // @@protoc_insertion_point(field_get:Memory.init)
  return _internal_init();
}
inline void Memory::_internal_set_init(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  init_ = value;
}
inline void Memory::set_init(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:Memory.init)
}

// int64 max = 3;
inline void Memory::clear_max() {
  max_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Memory::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Memory::max() const {
  // @@protoc_insertion_point(field_get:Memory.max)
  return _internal_max();
}
inline void Memory::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_ = value;
}
inline void Memory::set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:Memory.max)
}

// int64 used = 4;
inline void Memory::clear_used() {
  used_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Memory::_internal_used() const {
  return used_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Memory::used() const {
  // @@protoc_insertion_point(field_get:Memory.used)
  return _internal_used();
}
inline void Memory::_internal_set_used(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  used_ = value;
}
inline void Memory::set_used(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:Memory.used)
}

// int64 committed = 5;
inline void Memory::clear_committed() {
  committed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Memory::_internal_committed() const {
  return committed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Memory::committed() const {
  // @@protoc_insertion_point(field_get:Memory.committed)
  return _internal_committed();
}
inline void Memory::_internal_set_committed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  committed_ = value;
}
inline void Memory::set_committed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_committed(value);
  // @@protoc_insertion_point(field_set:Memory.committed)
}

// -------------------------------------------------------------------

// MemoryPool

// .PoolType type = 1;
inline void MemoryPool::clear_type() {
  type_ = 0;
}
inline ::PoolType MemoryPool::_internal_type() const {
  return static_cast< ::PoolType >(type_);
}
inline ::PoolType MemoryPool::type() const {
  // @@protoc_insertion_point(field_get:MemoryPool.type)
  return _internal_type();
}
inline void MemoryPool::_internal_set_type(::PoolType value) {
  
  type_ = value;
}
inline void MemoryPool::set_type(::PoolType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MemoryPool.type)
}

// int64 init = 2;
inline void MemoryPool::clear_init() {
  init_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryPool::_internal_init() const {
  return init_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryPool::init() const {
  // @@protoc_insertion_point(field_get:MemoryPool.init)
  return _internal_init();
}
inline void MemoryPool::_internal_set_init(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  init_ = value;
}
inline void MemoryPool::set_init(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:MemoryPool.init)
}

// int64 max = 3;
inline void MemoryPool::clear_max() {
  max_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryPool::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryPool::max() const {
  // @@protoc_insertion_point(field_get:MemoryPool.max)
  return _internal_max();
}
inline void MemoryPool::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_ = value;
}
inline void MemoryPool::set_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:MemoryPool.max)
}

// int64 used = 4;
inline void MemoryPool::clear_used() {
  used_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryPool::_internal_used() const {
  return used_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryPool::used() const {
  // @@protoc_insertion_point(field_get:MemoryPool.used)
  return _internal_used();
}
inline void MemoryPool::_internal_set_used(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  used_ = value;
}
inline void MemoryPool::set_used(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:MemoryPool.used)
}

// int64 commited = 5;
inline void MemoryPool::clear_commited() {
  commited_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryPool::_internal_commited() const {
  return commited_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemoryPool::commited() const {
  // @@protoc_insertion_point(field_get:MemoryPool.commited)
  return _internal_commited();
}
inline void MemoryPool::_internal_set_commited(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  commited_ = value;
}
inline void MemoryPool::set_commited(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_commited(value);
  // @@protoc_insertion_point(field_set:MemoryPool.commited)
}

// -------------------------------------------------------------------

// GC

// .GCPhrase phrase = 1;
inline void GC::clear_phrase() {
  phrase_ = 0;
}
inline ::GCPhrase GC::_internal_phrase() const {
  return static_cast< ::GCPhrase >(phrase_);
}
inline ::GCPhrase GC::phrase() const {
  // @@protoc_insertion_point(field_get:GC.phrase)
  return _internal_phrase();
}
inline void GC::_internal_set_phrase(::GCPhrase value) {
  
  phrase_ = value;
}
inline void GC::set_phrase(::GCPhrase value) {
  _internal_set_phrase(value);
  // @@protoc_insertion_point(field_set:GC.phrase)
}

// int64 count = 2;
inline void GC::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GC::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GC::count() const {
  // @@protoc_insertion_point(field_get:GC.count)
  return _internal_count();
}
inline void GC::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void GC::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:GC.count)
}

// int64 time = 3;
inline void GC::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GC::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GC::time() const {
  // @@protoc_insertion_point(field_get:GC.time)
  return _internal_time();
}
inline void GC::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GC::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:GC.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PoolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PoolType>() {
  return ::PoolType_descriptor();
}
template <> struct is_proto_enum< ::GCPhrase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GCPhrase>() {
  return ::GCPhrase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fJVM_2eproto
