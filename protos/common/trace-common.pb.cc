// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/trace-common.proto

#include "common/trace-common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2ftrace_2dcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueId_common_2ftrace_2dcommon_2eproto;
class UpstreamSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpstreamSegment> _instance;
} _UpstreamSegment_default_instance_;
class UniqueIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniqueId> _instance;
} _UniqueId_default_instance_;
static void InitDefaultsscc_info_UniqueId_common_2ftrace_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UniqueId_default_instance_;
    new (ptr) ::UniqueId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UniqueId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueId_common_2ftrace_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UniqueId_common_2ftrace_2dcommon_2eproto}, {}};

static void InitDefaultsscc_info_UpstreamSegment_common_2ftrace_2dcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpstreamSegment_default_instance_;
    new (ptr) ::UpstreamSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpstreamSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpstreamSegment_common_2ftrace_2dcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpstreamSegment_common_2ftrace_2dcommon_2eproto}, {
      &scc_info_UniqueId_common_2ftrace_2dcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2ftrace_2dcommon_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2ftrace_2dcommon_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2ftrace_2dcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2ftrace_2dcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpstreamSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpstreamSegment, globaltraceids_),
  PROTOBUF_FIELD_OFFSET(::UpstreamSegment, segment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UniqueId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UniqueId, idparts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::UpstreamSegment)},
  { 7, -1, sizeof(::UniqueId)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpstreamSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UniqueId_default_instance_),
};

const char descriptor_table_protodef_common_2ftrace_2dcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031common/trace-common.proto\"E\n\017UpstreamS"
  "egment\022!\n\016globalTraceIds\030\001 \003(\0132\t.UniqueI"
  "d\022\017\n\007segment\030\002 \001(\014\"\033\n\010UniqueId\022\017\n\007idPart"
  "s\030\001 \003(\003**\n\010SpanType\022\t\n\005Entry\020\000\022\010\n\004Exit\020\001"
  "\022\t\n\005Local\020\002*,\n\007RefType\022\020\n\014CrossProcess\020\000"
  "\022\017\n\013CrossThread\020\001*U\n\tSpanLayer\022\013\n\007Unknow"
  "n\020\000\022\014\n\010Database\020\001\022\020\n\014RPCFramework\020\002\022\010\n\004H"
  "ttp\020\003\022\006\n\002MQ\020\004\022\t\n\005Cache\020\005BQ\n0org.apache.s"
  "kywalking.apm.network.language.agentP\001\252\002"
  "\032SkyWalking.NetworkProtocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2ftrace_2dcommon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2ftrace_2dcommon_2eproto_sccs[2] = {
  &scc_info_UniqueId_common_2ftrace_2dcommon_2eproto.base,
  &scc_info_UpstreamSegment_common_2ftrace_2dcommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2ftrace_2dcommon_2eproto_once;
static bool descriptor_table_common_2ftrace_2dcommon_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ftrace_2dcommon_2eproto = {
  &descriptor_table_common_2ftrace_2dcommon_2eproto_initialized, descriptor_table_protodef_common_2ftrace_2dcommon_2eproto, "common/trace-common.proto", 395,
  &descriptor_table_common_2ftrace_2dcommon_2eproto_once, descriptor_table_common_2ftrace_2dcommon_2eproto_sccs, descriptor_table_common_2ftrace_2dcommon_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_common_2ftrace_2dcommon_2eproto::offsets,
  file_level_metadata_common_2ftrace_2dcommon_2eproto, 2, file_level_enum_descriptors_common_2ftrace_2dcommon_2eproto, file_level_service_descriptors_common_2ftrace_2dcommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2ftrace_2dcommon_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2ftrace_2dcommon_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftrace_2dcommon_2eproto);
  return file_level_enum_descriptors_common_2ftrace_2dcommon_2eproto[0];
}
bool SpanType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RefType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftrace_2dcommon_2eproto);
  return file_level_enum_descriptors_common_2ftrace_2dcommon_2eproto[1];
}
bool RefType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanLayer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ftrace_2dcommon_2eproto);
  return file_level_enum_descriptors_common_2ftrace_2dcommon_2eproto[2];
}
bool SpanLayer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void UpstreamSegment::InitAsDefaultInstance() {
}
class UpstreamSegment::_Internal {
 public:
};

UpstreamSegment::UpstreamSegment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpstreamSegment)
}
UpstreamSegment::UpstreamSegment(const UpstreamSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      globaltraceids_(from.globaltraceids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  segment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_segment().empty()) {
    segment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.segment_);
  }
  // @@protoc_insertion_point(copy_constructor:UpstreamSegment)
}

void UpstreamSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpstreamSegment_common_2ftrace_2dcommon_2eproto.base);
  segment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpstreamSegment::~UpstreamSegment() {
  // @@protoc_insertion_point(destructor:UpstreamSegment)
  SharedDtor();
}

void UpstreamSegment::SharedDtor() {
  segment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpstreamSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpstreamSegment& UpstreamSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpstreamSegment_common_2ftrace_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void UpstreamSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:UpstreamSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  globaltraceids_.Clear();
  segment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UpstreamSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .UniqueId globalTraceIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_globaltraceids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes segment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_segment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpstreamSegment::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpstreamSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UniqueId globalTraceIds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_globaltraceids_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_globaltraceids(i), target, stream);
  }

  // bytes segment = 2;
  if (this->segment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_segment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpstreamSegment)
  return target;
}

size_t UpstreamSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpstreamSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UniqueId globalTraceIds = 1;
  total_size += 1UL * this->_internal_globaltraceids_size();
  for (const auto& msg : this->globaltraceids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes segment = 2;
  if (this->segment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_segment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpstreamSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpstreamSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const UpstreamSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpstreamSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpstreamSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpstreamSegment)
    MergeFrom(*source);
  }
}

void UpstreamSegment::MergeFrom(const UpstreamSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpstreamSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  globaltraceids_.MergeFrom(from.globaltraceids_);
  if (from.segment().size() > 0) {

    segment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.segment_);
  }
}

void UpstreamSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpstreamSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpstreamSegment::CopyFrom(const UpstreamSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpstreamSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpstreamSegment::IsInitialized() const {
  return true;
}

void UpstreamSegment::InternalSwap(UpstreamSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  globaltraceids_.InternalSwap(&other->globaltraceids_);
  segment_.Swap(&other->segment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpstreamSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UniqueId::InitAsDefaultInstance() {
}
class UniqueId::_Internal {
 public:
};

UniqueId::UniqueId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UniqueId)
}
UniqueId::UniqueId(const UniqueId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      idparts_(from.idparts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UniqueId)
}

void UniqueId::SharedCtor() {
}

UniqueId::~UniqueId() {
  // @@protoc_insertion_point(destructor:UniqueId)
  SharedDtor();
}

void UniqueId::SharedDtor() {
}

void UniqueId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniqueId& UniqueId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniqueId_common_2ftrace_2dcommon_2eproto.base);
  return *internal_default_instance();
}


void UniqueId::Clear() {
// @@protoc_insertion_point(message_clear_start:UniqueId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idparts_.Clear();
  _internal_metadata_.Clear();
}

const char* UniqueId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 idParts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_idparts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_idparts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniqueId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UniqueId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 idParts = 1;
  {
    int byte_size = _idparts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_idparts(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UniqueId)
  return target;
}

size_t UniqueId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UniqueId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 idParts = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->idparts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _idparts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniqueId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UniqueId)
  GOOGLE_DCHECK_NE(&from, this);
  const UniqueId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniqueId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UniqueId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UniqueId)
    MergeFrom(*source);
  }
}

void UniqueId::MergeFrom(const UniqueId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UniqueId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  idparts_.MergeFrom(from.idparts_);
}

void UniqueId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UniqueId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueId::CopyFrom(const UniqueId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UniqueId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueId::IsInitialized() const {
  return true;
}

void UniqueId::InternalSwap(UniqueId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  idparts_.InternalSwap(&other->idparts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniqueId::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UpstreamSegment* Arena::CreateMaybeMessage< ::UpstreamSegment >(Arena* arena) {
  return Arena::CreateInternal< ::UpstreamSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::UniqueId* Arena::CreateMaybeMessage< ::UniqueId >(Arena* arena) {
  return Arena::CreateInternal< ::UniqueId >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
