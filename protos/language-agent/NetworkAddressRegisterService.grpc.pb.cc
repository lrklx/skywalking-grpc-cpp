// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: language-agent/NetworkAddressRegisterService.proto

#include "language-agent/NetworkAddressRegisterService.pb.h"
#include "language-agent/NetworkAddressRegisterService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* NetworkAddressRegisterService_method_names[] = {
  "/NetworkAddressRegisterService/batchRegister",
};

std::unique_ptr< NetworkAddressRegisterService::Stub> NetworkAddressRegisterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetworkAddressRegisterService::Stub> stub(new NetworkAddressRegisterService::Stub(channel));
  return stub;
}

NetworkAddressRegisterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_batchRegister_(NetworkAddressRegisterService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetworkAddressRegisterService::Stub::batchRegister(::grpc::ClientContext* context, const ::NetworkAddresses& request, ::NetworkAddressMappings* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_batchRegister_, context, request, response);
}

void NetworkAddressRegisterService::Stub::experimental_async::batchRegister(::grpc::ClientContext* context, const ::NetworkAddresses* request, ::NetworkAddressMappings* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_batchRegister_, context, request, response, std::move(f));
}

void NetworkAddressRegisterService::Stub::experimental_async::batchRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NetworkAddressMappings* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_batchRegister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::NetworkAddressMappings>* NetworkAddressRegisterService::Stub::AsyncbatchRegisterRaw(::grpc::ClientContext* context, const ::NetworkAddresses& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NetworkAddressMappings>::Create(channel_.get(), cq, rpcmethod_batchRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NetworkAddressMappings>* NetworkAddressRegisterService::Stub::PrepareAsyncbatchRegisterRaw(::grpc::ClientContext* context, const ::NetworkAddresses& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NetworkAddressMappings>::Create(channel_.get(), cq, rpcmethod_batchRegister_, context, request, false);
}

NetworkAddressRegisterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkAddressRegisterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkAddressRegisterService::Service, ::NetworkAddresses, ::NetworkAddressMappings>(
          std::mem_fn(&NetworkAddressRegisterService::Service::batchRegister), this)));
}

NetworkAddressRegisterService::Service::~Service() {
}

::grpc::Status NetworkAddressRegisterService::Service::batchRegister(::grpc::ServerContext* context, const ::NetworkAddresses* request, ::NetworkAddressMappings* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


