// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: language-agent/DiscoveryService.proto

#include "language-agent/DiscoveryService.pb.h"
#include "language-agent/DiscoveryService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* InstanceDiscoveryService_method_names[] = {
  "/InstanceDiscoveryService/registerInstance",
  "/InstanceDiscoveryService/heartbeat",
};

std::unique_ptr< InstanceDiscoveryService::Stub> InstanceDiscoveryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InstanceDiscoveryService::Stub> stub(new InstanceDiscoveryService::Stub(channel));
  return stub;
}

InstanceDiscoveryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_registerInstance_(InstanceDiscoveryService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_heartbeat_(InstanceDiscoveryService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InstanceDiscoveryService::Stub::registerInstance(::grpc::ClientContext* context, const ::ApplicationInstance& request, ::ApplicationInstanceMapping* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_registerInstance_, context, request, response);
}

void InstanceDiscoveryService::Stub::experimental_async::registerInstance(::grpc::ClientContext* context, const ::ApplicationInstance* request, ::ApplicationInstanceMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerInstance_, context, request, response, std::move(f));
}

void InstanceDiscoveryService::Stub::experimental_async::registerInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ApplicationInstanceMapping* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registerInstance_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ApplicationInstanceMapping>* InstanceDiscoveryService::Stub::AsyncregisterInstanceRaw(::grpc::ClientContext* context, const ::ApplicationInstance& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ApplicationInstanceMapping>::Create(channel_.get(), cq, rpcmethod_registerInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ApplicationInstanceMapping>* InstanceDiscoveryService::Stub::PrepareAsyncregisterInstanceRaw(::grpc::ClientContext* context, const ::ApplicationInstance& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ApplicationInstanceMapping>::Create(channel_.get(), cq, rpcmethod_registerInstance_, context, request, false);
}

::grpc::Status InstanceDiscoveryService::Stub::heartbeat(::grpc::ClientContext* context, const ::ApplicationInstanceHeartbeat& request, ::Downstream* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_heartbeat_, context, request, response);
}

void InstanceDiscoveryService::Stub::experimental_async::heartbeat(::grpc::ClientContext* context, const ::ApplicationInstanceHeartbeat* request, ::Downstream* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_heartbeat_, context, request, response, std::move(f));
}

void InstanceDiscoveryService::Stub::experimental_async::heartbeat(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Downstream* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_heartbeat_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Downstream>* InstanceDiscoveryService::Stub::AsyncheartbeatRaw(::grpc::ClientContext* context, const ::ApplicationInstanceHeartbeat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Downstream>::Create(channel_.get(), cq, rpcmethod_heartbeat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Downstream>* InstanceDiscoveryService::Stub::PrepareAsyncheartbeatRaw(::grpc::ClientContext* context, const ::ApplicationInstanceHeartbeat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Downstream>::Create(channel_.get(), cq, rpcmethod_heartbeat_, context, request, false);
}

InstanceDiscoveryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceDiscoveryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceDiscoveryService::Service, ::ApplicationInstance, ::ApplicationInstanceMapping>(
          std::mem_fn(&InstanceDiscoveryService::Service::registerInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceDiscoveryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceDiscoveryService::Service, ::ApplicationInstanceHeartbeat, ::Downstream>(
          std::mem_fn(&InstanceDiscoveryService::Service::heartbeat), this)));
}

InstanceDiscoveryService::Service::~Service() {
}

::grpc::Status InstanceDiscoveryService::Service::registerInstance(::grpc::ServerContext* context, const ::ApplicationInstance* request, ::ApplicationInstanceMapping* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceDiscoveryService::Service::heartbeat(::grpc::ServerContext* context, const ::ApplicationInstanceHeartbeat* request, ::Downstream* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ServiceNameDiscoveryService_method_names[] = {
  "/ServiceNameDiscoveryService/discovery",
};

std::unique_ptr< ServiceNameDiscoveryService::Stub> ServiceNameDiscoveryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServiceNameDiscoveryService::Stub> stub(new ServiceNameDiscoveryService::Stub(channel));
  return stub;
}

ServiceNameDiscoveryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_discovery_(ServiceNameDiscoveryService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ServiceNameDiscoveryService::Stub::discovery(::grpc::ClientContext* context, const ::ServiceNameCollection& request, ::ServiceNameMappingCollection* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_discovery_, context, request, response);
}

void ServiceNameDiscoveryService::Stub::experimental_async::discovery(::grpc::ClientContext* context, const ::ServiceNameCollection* request, ::ServiceNameMappingCollection* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_discovery_, context, request, response, std::move(f));
}

void ServiceNameDiscoveryService::Stub::experimental_async::discovery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ServiceNameMappingCollection* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_discovery_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ServiceNameMappingCollection>* ServiceNameDiscoveryService::Stub::AsyncdiscoveryRaw(::grpc::ClientContext* context, const ::ServiceNameCollection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServiceNameMappingCollection>::Create(channel_.get(), cq, rpcmethod_discovery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ServiceNameMappingCollection>* ServiceNameDiscoveryService::Stub::PrepareAsyncdiscoveryRaw(::grpc::ClientContext* context, const ::ServiceNameCollection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ServiceNameMappingCollection>::Create(channel_.get(), cq, rpcmethod_discovery_, context, request, false);
}

ServiceNameDiscoveryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceNameDiscoveryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceNameDiscoveryService::Service, ::ServiceNameCollection, ::ServiceNameMappingCollection>(
          std::mem_fn(&ServiceNameDiscoveryService::Service::discovery), this)));
}

ServiceNameDiscoveryService::Service::~Service() {
}

::grpc::Status ServiceNameDiscoveryService::Service::discovery(::grpc::ServerContext* context, const ::ServiceNameCollection* request, ::ServiceNameMappingCollection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


