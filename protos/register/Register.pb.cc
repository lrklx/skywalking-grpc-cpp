// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register/Register.proto

#include "register/Register.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_register_2fRegister_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Endpoint_register_2fRegister_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_register_2fRegister_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndpointMappingElement_register_2fRegister_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyIntValuePair_common_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyStringValuePair_common_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_register_2fRegister_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Service_register_2fRegister_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_register_2fRegister_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceAndNetworkAddressMapping_register_2fRegister_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_register_2fRegister_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceInstance_register_2fRegister_2eproto;
class ServicesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Services> _instance;
} _Services_default_instance_;
class ServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Service> _instance;
} _Service_default_instance_;
class ServiceRegisterMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceRegisterMapping> _instance;
} _ServiceRegisterMapping_default_instance_;
class ServiceInstancesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceInstances> _instance;
} _ServiceInstances_default_instance_;
class ServiceInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceInstance> _instance;
} _ServiceInstance_default_instance_;
class ServiceInstanceRegisterMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceInstanceRegisterMapping> _instance;
} _ServiceInstanceRegisterMapping_default_instance_;
class NetAddressesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetAddresses> _instance;
} _NetAddresses_default_instance_;
class NetAddressMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetAddressMapping> _instance;
} _NetAddressMapping_default_instance_;
class EndpointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Endpoints> _instance;
} _Endpoints_default_instance_;
class EndpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Endpoint> _instance;
} _Endpoint_default_instance_;
class EndpointMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndpointMapping> _instance;
} _EndpointMapping_default_instance_;
class EndpointMappingElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndpointMappingElement> _instance;
} _EndpointMappingElement_default_instance_;
class ServiceAndNetworkAddressMappingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceAndNetworkAddressMappings> _instance;
} _ServiceAndNetworkAddressMappings_default_instance_;
class ServiceAndNetworkAddressMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceAndNetworkAddressMapping> _instance;
} _ServiceAndNetworkAddressMapping_default_instance_;
static void InitDefaultsscc_info_Endpoint_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Endpoint_default_instance_;
    new (ptr) ::Endpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Endpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Endpoint_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Endpoint_register_2fRegister_2eproto}, {
      &scc_info_KeyStringValuePair_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_EndpointMapping_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndpointMapping_default_instance_;
    new (ptr) ::EndpointMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndpointMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndpointMapping_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EndpointMapping_register_2fRegister_2eproto}, {
      &scc_info_EndpointMappingElement_register_2fRegister_2eproto.base,}};

static void InitDefaultsscc_info_EndpointMappingElement_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndpointMappingElement_default_instance_;
    new (ptr) ::EndpointMappingElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndpointMappingElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndpointMappingElement_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndpointMappingElement_register_2fRegister_2eproto}, {}};

static void InitDefaultsscc_info_Endpoints_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Endpoints_default_instance_;
    new (ptr) ::Endpoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Endpoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Endpoints_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Endpoints_register_2fRegister_2eproto}, {
      &scc_info_Endpoint_register_2fRegister_2eproto.base,}};

static void InitDefaultsscc_info_NetAddressMapping_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetAddressMapping_default_instance_;
    new (ptr) ::NetAddressMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetAddressMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetAddressMapping_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetAddressMapping_register_2fRegister_2eproto}, {
      &scc_info_KeyIntValuePair_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_NetAddresses_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetAddresses_default_instance_;
    new (ptr) ::NetAddresses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetAddresses::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetAddresses_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetAddresses_register_2fRegister_2eproto}, {}};

static void InitDefaultsscc_info_Service_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Service_default_instance_;
    new (ptr) ::Service();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Service::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Service_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Service_register_2fRegister_2eproto}, {
      &scc_info_KeyStringValuePair_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ServiceAndNetworkAddressMapping_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceAndNetworkAddressMapping_default_instance_;
    new (ptr) ::ServiceAndNetworkAddressMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceAndNetworkAddressMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceAndNetworkAddressMapping_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceAndNetworkAddressMapping_register_2fRegister_2eproto}, {}};

static void InitDefaultsscc_info_ServiceAndNetworkAddressMappings_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceAndNetworkAddressMappings_default_instance_;
    new (ptr) ::ServiceAndNetworkAddressMappings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceAndNetworkAddressMappings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceAndNetworkAddressMappings_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceAndNetworkAddressMappings_register_2fRegister_2eproto}, {
      &scc_info_ServiceAndNetworkAddressMapping_register_2fRegister_2eproto.base,}};

static void InitDefaultsscc_info_ServiceInstance_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceInstance_default_instance_;
    new (ptr) ::ServiceInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceInstance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceInstance_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceInstance_register_2fRegister_2eproto}, {
      &scc_info_KeyStringValuePair_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ServiceInstanceRegisterMapping_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceInstanceRegisterMapping_default_instance_;
    new (ptr) ::ServiceInstanceRegisterMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceInstanceRegisterMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceInstanceRegisterMapping_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceInstanceRegisterMapping_register_2fRegister_2eproto}, {
      &scc_info_KeyIntValuePair_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ServiceInstances_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceInstances_default_instance_;
    new (ptr) ::ServiceInstances();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceInstances::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceInstances_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceInstances_register_2fRegister_2eproto}, {
      &scc_info_ServiceInstance_register_2fRegister_2eproto.base,}};

static void InitDefaultsscc_info_ServiceRegisterMapping_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceRegisterMapping_default_instance_;
    new (ptr) ::ServiceRegisterMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceRegisterMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceRegisterMapping_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceRegisterMapping_register_2fRegister_2eproto}, {
      &scc_info_KeyIntValuePair_common_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Services_register_2fRegister_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Services_default_instance_;
    new (ptr) ::Services();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Services::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Services_register_2fRegister_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Services_register_2fRegister_2eproto}, {
      &scc_info_Service_register_2fRegister_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_register_2fRegister_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_register_2fRegister_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_register_2fRegister_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_register_2fRegister_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Services, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Services, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Service, servicename_),
  PROTOBUF_FIELD_OFFSET(::Service, tags_),
  PROTOBUF_FIELD_OFFSET(::Service, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceRegisterMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceRegisterMapping, services_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceInstances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceInstances, instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceInstance, serviceid_),
  PROTOBUF_FIELD_OFFSET(::ServiceInstance, instanceuuid_),
  PROTOBUF_FIELD_OFFSET(::ServiceInstance, time_),
  PROTOBUF_FIELD_OFFSET(::ServiceInstance, tags_),
  PROTOBUF_FIELD_OFFSET(::ServiceInstance, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceInstanceRegisterMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceInstanceRegisterMapping, serviceinstances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetAddresses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetAddresses, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetAddressMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetAddressMapping, addressids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Endpoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Endpoints, endpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Endpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Endpoint, serviceid_),
  PROTOBUF_FIELD_OFFSET(::Endpoint, endpointname_),
  PROTOBUF_FIELD_OFFSET(::Endpoint, tags_),
  PROTOBUF_FIELD_OFFSET(::Endpoint, properties_),
  PROTOBUF_FIELD_OFFSET(::Endpoint, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EndpointMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EndpointMapping, elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EndpointMappingElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EndpointMappingElement, serviceid_),
  PROTOBUF_FIELD_OFFSET(::EndpointMappingElement, endpointname_),
  PROTOBUF_FIELD_OFFSET(::EndpointMappingElement, endpointid_),
  PROTOBUF_FIELD_OFFSET(::EndpointMappingElement, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceAndNetworkAddressMappings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceAndNetworkAddressMappings, mappings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceAndNetworkAddressMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceAndNetworkAddressMapping, serviceid_),
  PROTOBUF_FIELD_OFFSET(::ServiceAndNetworkAddressMapping, serviceinstanceid_),
  PROTOBUF_FIELD_OFFSET(::ServiceAndNetworkAddressMapping, networkaddress_),
  PROTOBUF_FIELD_OFFSET(::ServiceAndNetworkAddressMapping, networkaddressid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Services)},
  { 6, -1, sizeof(::Service)},
  { 14, -1, sizeof(::ServiceRegisterMapping)},
  { 20, -1, sizeof(::ServiceInstances)},
  { 26, -1, sizeof(::ServiceInstance)},
  { 36, -1, sizeof(::ServiceInstanceRegisterMapping)},
  { 42, -1, sizeof(::NetAddresses)},
  { 48, -1, sizeof(::NetAddressMapping)},
  { 54, -1, sizeof(::Endpoints)},
  { 60, -1, sizeof(::Endpoint)},
  { 70, -1, sizeof(::EndpointMapping)},
  { 76, -1, sizeof(::EndpointMappingElement)},
  { 85, -1, sizeof(::ServiceAndNetworkAddressMappings)},
  { 91, -1, sizeof(::ServiceAndNetworkAddressMapping)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Services_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Service_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceRegisterMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceInstances_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceInstanceRegisterMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetAddresses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetAddressMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Endpoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Endpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EndpointMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EndpointMappingElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceAndNetworkAddressMappings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceAndNetworkAddressMapping_default_instance_),
};

const char descriptor_table_protodef_register_2fRegister_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027register/Register.proto\032\023common/common"
  ".proto\"&\n\010Services\022\032\n\010services\030\001 \003(\0132\010.S"
  "ervice\"j\n\007Service\022\023\n\013serviceName\030\001 \001(\t\022!"
  "\n\004tags\030\003 \003(\0132\023.KeyStringValuePair\022\'\n\npro"
  "perties\030\004 \003(\0132\023.KeyStringValuePair\"<\n\026Se"
  "rviceRegisterMapping\022\"\n\010services\030\001 \003(\0132\020"
  ".KeyIntValuePair\"7\n\020ServiceInstances\022#\n\t"
  "instances\030\001 \003(\0132\020.ServiceInstance\"\224\001\n\017Se"
  "rviceInstance\022\021\n\tserviceId\030\001 \001(\005\022\024\n\014inst"
  "anceUUID\030\002 \001(\t\022\014\n\004time\030\003 \001(\003\022!\n\004tags\030\004 \003"
  "(\0132\023.KeyStringValuePair\022\'\n\nproperties\030\005 "
  "\003(\0132\023.KeyStringValuePair\"L\n\036ServiceInsta"
  "nceRegisterMapping\022*\n\020serviceInstances\030\001"
  " \003(\0132\020.KeyIntValuePair\"!\n\014NetAddresses\022\021"
  "\n\taddresses\030\001 \003(\t\"9\n\021NetAddressMapping\022$"
  "\n\naddressIds\030\001 \003(\0132\020.KeyIntValuePair\")\n\t"
  "Endpoints\022\034\n\tendpoints\030\001 \003(\0132\t.Endpoint\""
  "\233\001\n\010Endpoint\022\021\n\tserviceId\030\001 \001(\005\022\024\n\014endpo"
  "intName\030\002 \001(\t\022!\n\004tags\030\003 \003(\0132\023.KeyStringV"
  "aluePair\022\'\n\nproperties\030\004 \003(\0132\023.KeyString"
  "ValuePair\022\032\n\004from\030\005 \001(\0162\014.DetectPoint\"<\n"
  "\017EndpointMapping\022)\n\010elements\030\001 \003(\0132\027.End"
  "pointMappingElement\"q\n\026EndpointMappingEl"
  "ement\022\021\n\tserviceId\030\001 \001(\005\022\024\n\014endpointName"
  "\030\002 \001(\t\022\022\n\nendpointId\030\003 \001(\005\022\032\n\004from\030\004 \001(\016"
  "2\014.DetectPoint\"V\n ServiceAndNetworkAddre"
  "ssMappings\0222\n\010mappings\030\001 \003(\0132 .ServiceAn"
  "dNetworkAddressMapping\"\201\001\n\037ServiceAndNet"
  "workAddressMapping\022\021\n\tserviceId\030\001 \001(\005\022\031\n"
  "\021serviceInstanceId\030\002 \001(\005\022\026\n\016networkAddre"
  "ss\030\003 \001(\t\022\030\n\020networkAddressId\030\004 \001(\0052\354\002\n\010R"
  "egister\0229\n\021doServiceRegister\022\t.Services\032"
  "\027.ServiceRegisterMapping\"\000\022Q\n\031doServiceI"
  "nstanceRegister\022\021.ServiceInstances\032\037.Ser"
  "viceInstanceRegisterMapping\"\000\0224\n\022doEndpo"
  "intRegister\022\n.Endpoints\032\020.EndpointMappin"
  "g\"\000\022\?\n\030doNetworkAddressRegister\022\r.NetAdd"
  "resses\032\022.NetAddressMapping\"\000\022[\n)doServic"
  "eAndNetworkAddressMappingRegister\022!.Serv"
  "iceAndNetworkAddressMappings\032\t.Commands\""
  "\000BN\n-org.apache.skywalking.apm.network.r"
  "egister.v2P\001\252\002\032SkyWalking.NetworkProtoco"
  "lb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_register_2fRegister_2eproto_deps[1] = {
  &::descriptor_table_common_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_register_2fRegister_2eproto_sccs[14] = {
  &scc_info_Endpoint_register_2fRegister_2eproto.base,
  &scc_info_EndpointMapping_register_2fRegister_2eproto.base,
  &scc_info_EndpointMappingElement_register_2fRegister_2eproto.base,
  &scc_info_Endpoints_register_2fRegister_2eproto.base,
  &scc_info_NetAddressMapping_register_2fRegister_2eproto.base,
  &scc_info_NetAddresses_register_2fRegister_2eproto.base,
  &scc_info_Service_register_2fRegister_2eproto.base,
  &scc_info_ServiceAndNetworkAddressMapping_register_2fRegister_2eproto.base,
  &scc_info_ServiceAndNetworkAddressMappings_register_2fRegister_2eproto.base,
  &scc_info_ServiceInstance_register_2fRegister_2eproto.base,
  &scc_info_ServiceInstanceRegisterMapping_register_2fRegister_2eproto.base,
  &scc_info_ServiceInstances_register_2fRegister_2eproto.base,
  &scc_info_ServiceRegisterMapping_register_2fRegister_2eproto.base,
  &scc_info_Services_register_2fRegister_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_register_2fRegister_2eproto_once;
static bool descriptor_table_register_2fRegister_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_register_2fRegister_2eproto = {
  &descriptor_table_register_2fRegister_2eproto_initialized, descriptor_table_protodef_register_2fRegister_2eproto, "register/Register.proto", 1689,
  &descriptor_table_register_2fRegister_2eproto_once, descriptor_table_register_2fRegister_2eproto_sccs, descriptor_table_register_2fRegister_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_register_2fRegister_2eproto::offsets,
  file_level_metadata_register_2fRegister_2eproto, 14, file_level_enum_descriptors_register_2fRegister_2eproto, file_level_service_descriptors_register_2fRegister_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_register_2fRegister_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_register_2fRegister_2eproto), true);

// ===================================================================

void Services::InitAsDefaultInstance() {
}
class Services::_Internal {
 public:
};

Services::Services()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Services)
}
Services::Services(const Services& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Services)
}

void Services::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Services_register_2fRegister_2eproto.base);
}

Services::~Services() {
  // @@protoc_insertion_point(destructor:Services)
  SharedDtor();
}

void Services::SharedDtor() {
}

void Services::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Services& Services::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Services_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void Services::Clear() {
// @@protoc_insertion_point(message_clear_start:Services)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  _internal_metadata_.Clear();
}

const char* Services::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Service services = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Services::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Services)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Service services = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_services_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_services(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Services)
  return target;
}

size_t Services::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Services)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Service services = 1;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Services::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Services)
  GOOGLE_DCHECK_NE(&from, this);
  const Services* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Services>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Services)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Services)
    MergeFrom(*source);
  }
}

void Services::MergeFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Services)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
}

void Services::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Services)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Services::CopyFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Services)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services::IsInitialized() const {
  return true;
}

void Services::InternalSwap(Services* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  services_.InternalSwap(&other->services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Services::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Service::InitAsDefaultInstance() {
}
class Service::_Internal {
 public:
};

void Service::clear_tags() {
  tags_.Clear();
}
void Service::clear_properties() {
  properties_.Clear();
}
Service::Service()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Service)
}
Service::Service(const Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.servicename_);
  }
  // @@protoc_insertion_point(copy_constructor:Service)
}

void Service::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Service_register_2fRegister_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:Service)
  SharedDtor();
}

void Service::SharedDtor() {
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Service& Service::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Service_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  properties_.Clear();
  servicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Service::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_servicename(), ptr, ctx, "Service.serviceName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KeyStringValuePair tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KeyStringValuePair properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Service::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Service.serviceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  // repeated .KeyStringValuePair tags = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_tags(i), target, stream);
  }

  // repeated .KeyStringValuePair properties = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Service)
  return target;
}

size_t Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Service)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KeyStringValuePair tags = 3;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KeyStringValuePair properties = 4;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Service::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Service)
  GOOGLE_DCHECK_NE(&from, this);
  const Service* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Service>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Service)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Service)
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  properties_.MergeFrom(from.properties_);
  if (from.servicename().size() > 0) {

    servicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.servicename_);
  }
}

void Service::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  return true;
}

void Service::InternalSwap(Service* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  properties_.InternalSwap(&other->properties_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Service::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceRegisterMapping::InitAsDefaultInstance() {
}
class ServiceRegisterMapping::_Internal {
 public:
};

void ServiceRegisterMapping::clear_services() {
  services_.Clear();
}
ServiceRegisterMapping::ServiceRegisterMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceRegisterMapping)
}
ServiceRegisterMapping::ServiceRegisterMapping(const ServiceRegisterMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServiceRegisterMapping)
}

void ServiceRegisterMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceRegisterMapping_register_2fRegister_2eproto.base);
}

ServiceRegisterMapping::~ServiceRegisterMapping() {
  // @@protoc_insertion_point(destructor:ServiceRegisterMapping)
  SharedDtor();
}

void ServiceRegisterMapping::SharedDtor() {
}

void ServiceRegisterMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceRegisterMapping& ServiceRegisterMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceRegisterMapping_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void ServiceRegisterMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceRegisterMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  _internal_metadata_.Clear();
}

const char* ServiceRegisterMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KeyIntValuePair services = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceRegisterMapping::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceRegisterMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KeyIntValuePair services = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_services_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_services(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceRegisterMapping)
  return target;
}

size_t ServiceRegisterMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceRegisterMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KeyIntValuePair services = 1;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceRegisterMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceRegisterMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceRegisterMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceRegisterMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceRegisterMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceRegisterMapping)
    MergeFrom(*source);
  }
}

void ServiceRegisterMapping::MergeFrom(const ServiceRegisterMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceRegisterMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
}

void ServiceRegisterMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceRegisterMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRegisterMapping::CopyFrom(const ServiceRegisterMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceRegisterMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRegisterMapping::IsInitialized() const {
  return true;
}

void ServiceRegisterMapping::InternalSwap(ServiceRegisterMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  services_.InternalSwap(&other->services_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceRegisterMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceInstances::InitAsDefaultInstance() {
}
class ServiceInstances::_Internal {
 public:
};

ServiceInstances::ServiceInstances()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceInstances)
}
ServiceInstances::ServiceInstances(const ServiceInstances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      instances_(from.instances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServiceInstances)
}

void ServiceInstances::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceInstances_register_2fRegister_2eproto.base);
}

ServiceInstances::~ServiceInstances() {
  // @@protoc_insertion_point(destructor:ServiceInstances)
  SharedDtor();
}

void ServiceInstances::SharedDtor() {
}

void ServiceInstances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceInstances& ServiceInstances::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceInstances_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void ServiceInstances::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceInstances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instances_.Clear();
  _internal_metadata_.Clear();
}

const char* ServiceInstances::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ServiceInstance instances = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceInstances::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceInstances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServiceInstance instances = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instances_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_instances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceInstances)
  return target;
}

size_t ServiceInstances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceInstances)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServiceInstance instances = 1;
  total_size += 1UL * this->_internal_instances_size();
  for (const auto& msg : this->instances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceInstances::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceInstances)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceInstances* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceInstances>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceInstances)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceInstances)
    MergeFrom(*source);
  }
}

void ServiceInstances::MergeFrom(const ServiceInstances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceInstances)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instances_.MergeFrom(from.instances_);
}

void ServiceInstances::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInstances::CopyFrom(const ServiceInstances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInstances::IsInitialized() const {
  return true;
}

void ServiceInstances::InternalSwap(ServiceInstances* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instances_.InternalSwap(&other->instances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInstances::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceInstance::InitAsDefaultInstance() {
}
class ServiceInstance::_Internal {
 public:
};

void ServiceInstance::clear_tags() {
  tags_.Clear();
}
void ServiceInstance::clear_properties() {
  properties_.Clear();
}
ServiceInstance::ServiceInstance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceInstance)
}
ServiceInstance::ServiceInstance(const ServiceInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instanceuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instanceuuid().empty()) {
    instanceuuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instanceuuid_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&serviceid_) -
    reinterpret_cast<char*>(&time_)) + sizeof(serviceid_));
  // @@protoc_insertion_point(copy_constructor:ServiceInstance)
}

void ServiceInstance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceInstance_register_2fRegister_2eproto.base);
  instanceuuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serviceid_) -
      reinterpret_cast<char*>(&time_)) + sizeof(serviceid_));
}

ServiceInstance::~ServiceInstance() {
  // @@protoc_insertion_point(destructor:ServiceInstance)
  SharedDtor();
}

void ServiceInstance::SharedDtor() {
  instanceuuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceInstance& ServiceInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceInstance_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void ServiceInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  properties_.Clear();
  instanceuuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serviceid_) -
      reinterpret_cast<char*>(&time_)) + sizeof(serviceid_));
  _internal_metadata_.Clear();
}

const char* ServiceInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instanceUUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_instanceuuid(), ptr, ctx, "ServiceInstance.instanceUUID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KeyStringValuePair tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KeyStringValuePair properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceInstance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serviceid(), target);
  }

  // string instanceUUID = 2;
  if (this->instanceuuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instanceuuid().data(), static_cast<int>(this->_internal_instanceuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceInstance.instanceUUID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instanceuuid(), target);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // repeated .KeyStringValuePair tags = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_tags(i), target, stream);
  }

  // repeated .KeyStringValuePair properties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceInstance)
  return target;
}

size_t ServiceInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KeyStringValuePair tags = 4;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KeyStringValuePair properties = 5;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string instanceUUID = 2;
  if (this->instanceuuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instanceuuid());
  }

  // int64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceInstance)
    MergeFrom(*source);
  }
}

void ServiceInstance::MergeFrom(const ServiceInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  properties_.MergeFrom(from.properties_);
  if (from.instanceuuid().size() > 0) {

    instanceuuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instanceuuid_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
}

void ServiceInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInstance::CopyFrom(const ServiceInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInstance::IsInitialized() const {
  return true;
}

void ServiceInstance::InternalSwap(ServiceInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  properties_.InternalSwap(&other->properties_);
  instanceuuid_.Swap(&other->instanceuuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(serviceid_, other->serviceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceInstanceRegisterMapping::InitAsDefaultInstance() {
}
class ServiceInstanceRegisterMapping::_Internal {
 public:
};

void ServiceInstanceRegisterMapping::clear_serviceinstances() {
  serviceinstances_.Clear();
}
ServiceInstanceRegisterMapping::ServiceInstanceRegisterMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceInstanceRegisterMapping)
}
ServiceInstanceRegisterMapping::ServiceInstanceRegisterMapping(const ServiceInstanceRegisterMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      serviceinstances_(from.serviceinstances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServiceInstanceRegisterMapping)
}

void ServiceInstanceRegisterMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceInstanceRegisterMapping_register_2fRegister_2eproto.base);
}

ServiceInstanceRegisterMapping::~ServiceInstanceRegisterMapping() {
  // @@protoc_insertion_point(destructor:ServiceInstanceRegisterMapping)
  SharedDtor();
}

void ServiceInstanceRegisterMapping::SharedDtor() {
}

void ServiceInstanceRegisterMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceInstanceRegisterMapping& ServiceInstanceRegisterMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceInstanceRegisterMapping_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void ServiceInstanceRegisterMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceInstanceRegisterMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serviceinstances_.Clear();
  _internal_metadata_.Clear();
}

const char* ServiceInstanceRegisterMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KeyIntValuePair serviceInstances = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_serviceinstances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceInstanceRegisterMapping::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceInstanceRegisterMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KeyIntValuePair serviceInstances = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_serviceinstances_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_serviceinstances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceInstanceRegisterMapping)
  return target;
}

size_t ServiceInstanceRegisterMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceInstanceRegisterMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KeyIntValuePair serviceInstances = 1;
  total_size += 1UL * this->_internal_serviceinstances_size();
  for (const auto& msg : this->serviceinstances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceInstanceRegisterMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceInstanceRegisterMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceInstanceRegisterMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceInstanceRegisterMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceInstanceRegisterMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceInstanceRegisterMapping)
    MergeFrom(*source);
  }
}

void ServiceInstanceRegisterMapping::MergeFrom(const ServiceInstanceRegisterMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceInstanceRegisterMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  serviceinstances_.MergeFrom(from.serviceinstances_);
}

void ServiceInstanceRegisterMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceInstanceRegisterMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInstanceRegisterMapping::CopyFrom(const ServiceInstanceRegisterMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceInstanceRegisterMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInstanceRegisterMapping::IsInitialized() const {
  return true;
}

void ServiceInstanceRegisterMapping::InternalSwap(ServiceInstanceRegisterMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  serviceinstances_.InternalSwap(&other->serviceinstances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInstanceRegisterMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetAddresses::InitAsDefaultInstance() {
}
class NetAddresses::_Internal {
 public:
};

NetAddresses::NetAddresses()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetAddresses)
}
NetAddresses::NetAddresses(const NetAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetAddresses)
}

void NetAddresses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetAddresses_register_2fRegister_2eproto.base);
}

NetAddresses::~NetAddresses() {
  // @@protoc_insertion_point(destructor:NetAddresses)
  SharedDtor();
}

void NetAddresses::SharedDtor() {
}

void NetAddresses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetAddresses& NetAddresses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetAddresses_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void NetAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:NetAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  _internal_metadata_.Clear();
}

const char* NetAddresses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_addresses(), ptr, ctx, "NetAddresses.addresses");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetAddresses::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetAddresses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addresses = 1;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetAddresses.addresses");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetAddresses)
  return target;
}

size_t NetAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetAddresses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetAddresses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  const NetAddresses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetAddresses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetAddresses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetAddresses)
    MergeFrom(*source);
  }
}

void NetAddresses::MergeFrom(const NetAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
}

void NetAddresses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetAddresses::CopyFrom(const NetAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetAddresses::IsInitialized() const {
  return true;
}

void NetAddresses::InternalSwap(NetAddresses* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetAddresses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetAddressMapping::InitAsDefaultInstance() {
}
class NetAddressMapping::_Internal {
 public:
};

void NetAddressMapping::clear_addressids() {
  addressids_.Clear();
}
NetAddressMapping::NetAddressMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetAddressMapping)
}
NetAddressMapping::NetAddressMapping(const NetAddressMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addressids_(from.addressids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetAddressMapping)
}

void NetAddressMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetAddressMapping_register_2fRegister_2eproto.base);
}

NetAddressMapping::~NetAddressMapping() {
  // @@protoc_insertion_point(destructor:NetAddressMapping)
  SharedDtor();
}

void NetAddressMapping::SharedDtor() {
}

void NetAddressMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetAddressMapping& NetAddressMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetAddressMapping_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void NetAddressMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:NetAddressMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addressids_.Clear();
  _internal_metadata_.Clear();
}

const char* NetAddressMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KeyIntValuePair addressIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addressids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetAddressMapping::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetAddressMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KeyIntValuePair addressIds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addressids_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_addressids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetAddressMapping)
  return target;
}

size_t NetAddressMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetAddressMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KeyIntValuePair addressIds = 1;
  total_size += 1UL * this->_internal_addressids_size();
  for (const auto& msg : this->addressids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetAddressMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetAddressMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const NetAddressMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetAddressMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetAddressMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetAddressMapping)
    MergeFrom(*source);
  }
}

void NetAddressMapping::MergeFrom(const NetAddressMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetAddressMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addressids_.MergeFrom(from.addressids_);
}

void NetAddressMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetAddressMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetAddressMapping::CopyFrom(const NetAddressMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetAddressMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetAddressMapping::IsInitialized() const {
  return true;
}

void NetAddressMapping::InternalSwap(NetAddressMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addressids_.InternalSwap(&other->addressids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetAddressMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Endpoints::InitAsDefaultInstance() {
}
class Endpoints::_Internal {
 public:
};

Endpoints::Endpoints()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Endpoints)
}
Endpoints::Endpoints(const Endpoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Endpoints)
}

void Endpoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Endpoints_register_2fRegister_2eproto.base);
}

Endpoints::~Endpoints() {
  // @@protoc_insertion_point(destructor:Endpoints)
  SharedDtor();
}

void Endpoints::SharedDtor() {
}

void Endpoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Endpoints& Endpoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Endpoints_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void Endpoints::Clear() {
// @@protoc_insertion_point(message_clear_start:Endpoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoints_.Clear();
  _internal_metadata_.Clear();
}

const char* Endpoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Endpoint endpoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_endpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Endpoints::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Endpoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Endpoint endpoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_endpoints_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_endpoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Endpoints)
  return target;
}

size_t Endpoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Endpoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Endpoint endpoints = 1;
  total_size += 1UL * this->_internal_endpoints_size();
  for (const auto& msg : this->endpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Endpoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Endpoints)
  GOOGLE_DCHECK_NE(&from, this);
  const Endpoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Endpoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Endpoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Endpoints)
    MergeFrom(*source);
  }
}

void Endpoints::MergeFrom(const Endpoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Endpoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  endpoints_.MergeFrom(from.endpoints_);
}

void Endpoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Endpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Endpoints::CopyFrom(const Endpoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Endpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoints::IsInitialized() const {
  return true;
}

void Endpoints::InternalSwap(Endpoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  endpoints_.InternalSwap(&other->endpoints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Endpoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Endpoint::InitAsDefaultInstance() {
}
class Endpoint::_Internal {
 public:
};

void Endpoint::clear_tags() {
  tags_.Clear();
}
void Endpoint::clear_properties() {
  properties_.Clear();
}
Endpoint::Endpoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Endpoint)
}
Endpoint::Endpoint(const Endpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpointname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpointname().empty()) {
    endpointname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpointname_);
  }
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(from_));
  // @@protoc_insertion_point(copy_constructor:Endpoint)
}

void Endpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Endpoint_register_2fRegister_2eproto.base);
  endpointname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(from_));
}

Endpoint::~Endpoint() {
  // @@protoc_insertion_point(destructor:Endpoint)
  SharedDtor();
}

void Endpoint::SharedDtor() {
  endpointname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Endpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Endpoint& Endpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Endpoint_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void Endpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Endpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  properties_.Clear();
  endpointname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(from_));
  _internal_metadata_.Clear();
}

const char* Endpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpointName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_endpointname(), ptr, ctx, "Endpoint.endpointName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KeyStringValuePair tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KeyStringValuePair properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .DetectPoint from = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_from(static_cast<::DetectPoint>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Endpoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Endpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serviceid(), target);
  }

  // string endpointName = 2;
  if (this->endpointname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpointname().data(), static_cast<int>(this->_internal_endpointname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Endpoint.endpointName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_endpointname(), target);
  }

  // repeated .KeyStringValuePair tags = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_tags(i), target, stream);
  }

  // repeated .KeyStringValuePair properties = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_properties(i), target, stream);
  }

  // .DetectPoint from = 5;
  if (this->from() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Endpoint)
  return target;
}

size_t Endpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Endpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KeyStringValuePair tags = 3;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KeyStringValuePair properties = 4;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string endpointName = 2;
  if (this->endpointname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpointname());
  }

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceid());
  }

  // .DetectPoint from = 5;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_from());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Endpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Endpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Endpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Endpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Endpoint)
    MergeFrom(*source);
  }
}

void Endpoint::MergeFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  properties_.MergeFrom(from.properties_);
  if (from.endpointname().size() > 0) {

    endpointname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpointname_);
  }
  if (from.serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
}

void Endpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Endpoint::CopyFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoint::IsInitialized() const {
  return true;
}

void Endpoint::InternalSwap(Endpoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  properties_.InternalSwap(&other->properties_);
  endpointname_.Swap(&other->endpointname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serviceid_, other->serviceid_);
  swap(from_, other->from_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Endpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndpointMapping::InitAsDefaultInstance() {
}
class EndpointMapping::_Internal {
 public:
};

EndpointMapping::EndpointMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndpointMapping)
}
EndpointMapping::EndpointMapping(const EndpointMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EndpointMapping)
}

void EndpointMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndpointMapping_register_2fRegister_2eproto.base);
}

EndpointMapping::~EndpointMapping() {
  // @@protoc_insertion_point(destructor:EndpointMapping)
  SharedDtor();
}

void EndpointMapping::SharedDtor() {
}

void EndpointMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndpointMapping& EndpointMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndpointMapping_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void EndpointMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:EndpointMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

const char* EndpointMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .EndpointMappingElement elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndpointMapping::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndpointMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EndpointMappingElement elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndpointMapping)
  return target;
}

size_t EndpointMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndpointMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EndpointMappingElement elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndpointMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EndpointMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const EndpointMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndpointMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EndpointMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EndpointMapping)
    MergeFrom(*source);
  }
}

void EndpointMapping::MergeFrom(const EndpointMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndpointMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void EndpointMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EndpointMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndpointMapping::CopyFrom(const EndpointMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndpointMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointMapping::IsInitialized() const {
  return true;
}

void EndpointMapping::InternalSwap(EndpointMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndpointMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndpointMappingElement::InitAsDefaultInstance() {
}
class EndpointMappingElement::_Internal {
 public:
};

EndpointMappingElement::EndpointMappingElement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndpointMappingElement)
}
EndpointMappingElement::EndpointMappingElement(const EndpointMappingElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpointname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpointname().empty()) {
    endpointname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpointname_);
  }
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(from_));
  // @@protoc_insertion_point(copy_constructor:EndpointMappingElement)
}

void EndpointMappingElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndpointMappingElement_register_2fRegister_2eproto.base);
  endpointname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(from_));
}

EndpointMappingElement::~EndpointMappingElement() {
  // @@protoc_insertion_point(destructor:EndpointMappingElement)
  SharedDtor();
}

void EndpointMappingElement::SharedDtor() {
  endpointname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndpointMappingElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndpointMappingElement& EndpointMappingElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndpointMappingElement_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void EndpointMappingElement::Clear() {
// @@protoc_insertion_point(message_clear_start:EndpointMappingElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpointname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(from_));
  _internal_metadata_.Clear();
}

const char* EndpointMappingElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpointName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_endpointname(), ptr, ctx, "EndpointMappingElement.endpointName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 endpointId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          endpointid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DetectPoint from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_from(static_cast<::DetectPoint>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndpointMappingElement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EndpointMappingElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serviceid(), target);
  }

  // string endpointName = 2;
  if (this->endpointname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpointname().data(), static_cast<int>(this->_internal_endpointname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EndpointMappingElement.endpointName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_endpointname(), target);
  }

  // int32 endpointId = 3;
  if (this->endpointid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_endpointid(), target);
  }

  // .DetectPoint from = 4;
  if (this->from() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndpointMappingElement)
  return target;
}

size_t EndpointMappingElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndpointMappingElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string endpointName = 2;
  if (this->endpointname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpointname());
  }

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceid());
  }

  // int32 endpointId = 3;
  if (this->endpointid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endpointid());
  }

  // .DetectPoint from = 4;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_from());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndpointMappingElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EndpointMappingElement)
  GOOGLE_DCHECK_NE(&from, this);
  const EndpointMappingElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndpointMappingElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EndpointMappingElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EndpointMappingElement)
    MergeFrom(*source);
  }
}

void EndpointMappingElement::MergeFrom(const EndpointMappingElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndpointMappingElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.endpointname().size() > 0) {

    endpointname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpointname_);
  }
  if (from.serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
  if (from.endpointid() != 0) {
    _internal_set_endpointid(from._internal_endpointid());
  }
  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
}

void EndpointMappingElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EndpointMappingElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndpointMappingElement::CopyFrom(const EndpointMappingElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndpointMappingElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointMappingElement::IsInitialized() const {
  return true;
}

void EndpointMappingElement::InternalSwap(EndpointMappingElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  endpointname_.Swap(&other->endpointname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serviceid_, other->serviceid_);
  swap(endpointid_, other->endpointid_);
  swap(from_, other->from_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndpointMappingElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceAndNetworkAddressMappings::InitAsDefaultInstance() {
}
class ServiceAndNetworkAddressMappings::_Internal {
 public:
};

ServiceAndNetworkAddressMappings::ServiceAndNetworkAddressMappings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceAndNetworkAddressMappings)
}
ServiceAndNetworkAddressMappings::ServiceAndNetworkAddressMappings(const ServiceAndNetworkAddressMappings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mappings_(from.mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServiceAndNetworkAddressMappings)
}

void ServiceAndNetworkAddressMappings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceAndNetworkAddressMappings_register_2fRegister_2eproto.base);
}

ServiceAndNetworkAddressMappings::~ServiceAndNetworkAddressMappings() {
  // @@protoc_insertion_point(destructor:ServiceAndNetworkAddressMappings)
  SharedDtor();
}

void ServiceAndNetworkAddressMappings::SharedDtor() {
}

void ServiceAndNetworkAddressMappings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceAndNetworkAddressMappings& ServiceAndNetworkAddressMappings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceAndNetworkAddressMappings_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void ServiceAndNetworkAddressMappings::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceAndNetworkAddressMappings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappings_.Clear();
  _internal_metadata_.Clear();
}

const char* ServiceAndNetworkAddressMappings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ServiceAndNetworkAddressMapping mappings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceAndNetworkAddressMappings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceAndNetworkAddressMappings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServiceAndNetworkAddressMapping mappings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mappings_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_mappings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceAndNetworkAddressMappings)
  return target;
}

size_t ServiceAndNetworkAddressMappings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceAndNetworkAddressMappings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServiceAndNetworkAddressMapping mappings = 1;
  total_size += 1UL * this->_internal_mappings_size();
  for (const auto& msg : this->mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceAndNetworkAddressMappings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceAndNetworkAddressMappings)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceAndNetworkAddressMappings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceAndNetworkAddressMappings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceAndNetworkAddressMappings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceAndNetworkAddressMappings)
    MergeFrom(*source);
  }
}

void ServiceAndNetworkAddressMappings::MergeFrom(const ServiceAndNetworkAddressMappings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceAndNetworkAddressMappings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
}

void ServiceAndNetworkAddressMappings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceAndNetworkAddressMappings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAndNetworkAddressMappings::CopyFrom(const ServiceAndNetworkAddressMappings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceAndNetworkAddressMappings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceAndNetworkAddressMappings::IsInitialized() const {
  return true;
}

void ServiceAndNetworkAddressMappings::InternalSwap(ServiceAndNetworkAddressMappings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mappings_.InternalSwap(&other->mappings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceAndNetworkAddressMappings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceAndNetworkAddressMapping::InitAsDefaultInstance() {
}
class ServiceAndNetworkAddressMapping::_Internal {
 public:
};

ServiceAndNetworkAddressMapping::ServiceAndNetworkAddressMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceAndNetworkAddressMapping)
}
ServiceAndNetworkAddressMapping::ServiceAndNetworkAddressMapping(const ServiceAndNetworkAddressMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  networkaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_networkaddress().empty()) {
    networkaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.networkaddress_);
  }
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&networkaddressid_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(networkaddressid_));
  // @@protoc_insertion_point(copy_constructor:ServiceAndNetworkAddressMapping)
}

void ServiceAndNetworkAddressMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceAndNetworkAddressMapping_register_2fRegister_2eproto.base);
  networkaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&networkaddressid_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(networkaddressid_));
}

ServiceAndNetworkAddressMapping::~ServiceAndNetworkAddressMapping() {
  // @@protoc_insertion_point(destructor:ServiceAndNetworkAddressMapping)
  SharedDtor();
}

void ServiceAndNetworkAddressMapping::SharedDtor() {
  networkaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceAndNetworkAddressMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceAndNetworkAddressMapping& ServiceAndNetworkAddressMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceAndNetworkAddressMapping_register_2fRegister_2eproto.base);
  return *internal_default_instance();
}


void ServiceAndNetworkAddressMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceAndNetworkAddressMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&networkaddressid_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(networkaddressid_));
  _internal_metadata_.Clear();
}

const char* ServiceAndNetworkAddressMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 serviceInstanceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serviceinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string networkAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_networkaddress(), ptr, ctx, "ServiceAndNetworkAddressMapping.networkAddress");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 networkAddressId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          networkaddressid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceAndNetworkAddressMapping::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceAndNetworkAddressMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serviceid(), target);
  }

  // int32 serviceInstanceId = 2;
  if (this->serviceinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_serviceinstanceid(), target);
  }

  // string networkAddress = 3;
  if (this->networkaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_networkaddress().data(), static_cast<int>(this->_internal_networkaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceAndNetworkAddressMapping.networkAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_networkaddress(), target);
  }

  // int32 networkAddressId = 4;
  if (this->networkaddressid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_networkaddressid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceAndNetworkAddressMapping)
  return target;
}

size_t ServiceAndNetworkAddressMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceAndNetworkAddressMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string networkAddress = 3;
  if (this->networkaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_networkaddress());
  }

  // int32 serviceId = 1;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceid());
  }

  // int32 serviceInstanceId = 2;
  if (this->serviceinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceinstanceid());
  }

  // int32 networkAddressId = 4;
  if (this->networkaddressid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_networkaddressid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceAndNetworkAddressMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceAndNetworkAddressMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceAndNetworkAddressMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceAndNetworkAddressMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceAndNetworkAddressMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceAndNetworkAddressMapping)
    MergeFrom(*source);
  }
}

void ServiceAndNetworkAddressMapping::MergeFrom(const ServiceAndNetworkAddressMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceAndNetworkAddressMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkaddress().size() > 0) {

    networkaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.networkaddress_);
  }
  if (from.serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
  if (from.serviceinstanceid() != 0) {
    _internal_set_serviceinstanceid(from._internal_serviceinstanceid());
  }
  if (from.networkaddressid() != 0) {
    _internal_set_networkaddressid(from._internal_networkaddressid());
  }
}

void ServiceAndNetworkAddressMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceAndNetworkAddressMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAndNetworkAddressMapping::CopyFrom(const ServiceAndNetworkAddressMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceAndNetworkAddressMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceAndNetworkAddressMapping::IsInitialized() const {
  return true;
}

void ServiceAndNetworkAddressMapping::InternalSwap(ServiceAndNetworkAddressMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  networkaddress_.Swap(&other->networkaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serviceid_, other->serviceid_);
  swap(serviceinstanceid_, other->serviceinstanceid_);
  swap(networkaddressid_, other->networkaddressid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceAndNetworkAddressMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Services* Arena::CreateMaybeMessage< ::Services >(Arena* arena) {
  return Arena::CreateInternal< ::Services >(arena);
}
template<> PROTOBUF_NOINLINE ::Service* Arena::CreateMaybeMessage< ::Service >(Arena* arena) {
  return Arena::CreateInternal< ::Service >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceRegisterMapping* Arena::CreateMaybeMessage< ::ServiceRegisterMapping >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceRegisterMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceInstances* Arena::CreateMaybeMessage< ::ServiceInstances >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceInstances >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceInstance* Arena::CreateMaybeMessage< ::ServiceInstance >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceInstanceRegisterMapping* Arena::CreateMaybeMessage< ::ServiceInstanceRegisterMapping >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceInstanceRegisterMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::NetAddresses* Arena::CreateMaybeMessage< ::NetAddresses >(Arena* arena) {
  return Arena::CreateInternal< ::NetAddresses >(arena);
}
template<> PROTOBUF_NOINLINE ::NetAddressMapping* Arena::CreateMaybeMessage< ::NetAddressMapping >(Arena* arena) {
  return Arena::CreateInternal< ::NetAddressMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::Endpoints* Arena::CreateMaybeMessage< ::Endpoints >(Arena* arena) {
  return Arena::CreateInternal< ::Endpoints >(arena);
}
template<> PROTOBUF_NOINLINE ::Endpoint* Arena::CreateMaybeMessage< ::Endpoint >(Arena* arena) {
  return Arena::CreateInternal< ::Endpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::EndpointMapping* Arena::CreateMaybeMessage< ::EndpointMapping >(Arena* arena) {
  return Arena::CreateInternal< ::EndpointMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::EndpointMappingElement* Arena::CreateMaybeMessage< ::EndpointMappingElement >(Arena* arena) {
  return Arena::CreateInternal< ::EndpointMappingElement >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceAndNetworkAddressMappings* Arena::CreateMaybeMessage< ::ServiceAndNetworkAddressMappings >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceAndNetworkAddressMappings >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceAndNetworkAddressMapping* Arena::CreateMaybeMessage< ::ServiceAndNetworkAddressMapping >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceAndNetworkAddressMapping >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
