// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register/Register.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_register_2fRegister_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_register_2fRegister_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_register_2fRegister_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_register_2fRegister_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_register_2fRegister_2eproto;
class Endpoint;
class EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class EndpointMapping;
class EndpointMappingDefaultTypeInternal;
extern EndpointMappingDefaultTypeInternal _EndpointMapping_default_instance_;
class EndpointMappingElement;
class EndpointMappingElementDefaultTypeInternal;
extern EndpointMappingElementDefaultTypeInternal _EndpointMappingElement_default_instance_;
class Endpoints;
class EndpointsDefaultTypeInternal;
extern EndpointsDefaultTypeInternal _Endpoints_default_instance_;
class NetAddressMapping;
class NetAddressMappingDefaultTypeInternal;
extern NetAddressMappingDefaultTypeInternal _NetAddressMapping_default_instance_;
class NetAddresses;
class NetAddressesDefaultTypeInternal;
extern NetAddressesDefaultTypeInternal _NetAddresses_default_instance_;
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class ServiceAndNetworkAddressMapping;
class ServiceAndNetworkAddressMappingDefaultTypeInternal;
extern ServiceAndNetworkAddressMappingDefaultTypeInternal _ServiceAndNetworkAddressMapping_default_instance_;
class ServiceAndNetworkAddressMappings;
class ServiceAndNetworkAddressMappingsDefaultTypeInternal;
extern ServiceAndNetworkAddressMappingsDefaultTypeInternal _ServiceAndNetworkAddressMappings_default_instance_;
class ServiceInstance;
class ServiceInstanceDefaultTypeInternal;
extern ServiceInstanceDefaultTypeInternal _ServiceInstance_default_instance_;
class ServiceInstanceRegisterMapping;
class ServiceInstanceRegisterMappingDefaultTypeInternal;
extern ServiceInstanceRegisterMappingDefaultTypeInternal _ServiceInstanceRegisterMapping_default_instance_;
class ServiceInstances;
class ServiceInstancesDefaultTypeInternal;
extern ServiceInstancesDefaultTypeInternal _ServiceInstances_default_instance_;
class ServiceRegisterMapping;
class ServiceRegisterMappingDefaultTypeInternal;
extern ServiceRegisterMappingDefaultTypeInternal _ServiceRegisterMapping_default_instance_;
class Services;
class ServicesDefaultTypeInternal;
extern ServicesDefaultTypeInternal _Services_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Endpoint* Arena::CreateMaybeMessage<::Endpoint>(Arena*);
template<> ::EndpointMapping* Arena::CreateMaybeMessage<::EndpointMapping>(Arena*);
template<> ::EndpointMappingElement* Arena::CreateMaybeMessage<::EndpointMappingElement>(Arena*);
template<> ::Endpoints* Arena::CreateMaybeMessage<::Endpoints>(Arena*);
template<> ::NetAddressMapping* Arena::CreateMaybeMessage<::NetAddressMapping>(Arena*);
template<> ::NetAddresses* Arena::CreateMaybeMessage<::NetAddresses>(Arena*);
template<> ::Service* Arena::CreateMaybeMessage<::Service>(Arena*);
template<> ::ServiceAndNetworkAddressMapping* Arena::CreateMaybeMessage<::ServiceAndNetworkAddressMapping>(Arena*);
template<> ::ServiceAndNetworkAddressMappings* Arena::CreateMaybeMessage<::ServiceAndNetworkAddressMappings>(Arena*);
template<> ::ServiceInstance* Arena::CreateMaybeMessage<::ServiceInstance>(Arena*);
template<> ::ServiceInstanceRegisterMapping* Arena::CreateMaybeMessage<::ServiceInstanceRegisterMapping>(Arena*);
template<> ::ServiceInstances* Arena::CreateMaybeMessage<::ServiceInstances>(Arena*);
template<> ::ServiceRegisterMapping* Arena::CreateMaybeMessage<::ServiceRegisterMapping>(Arena*);
template<> ::Services* Arena::CreateMaybeMessage<::Services>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Services :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Services) */ {
 public:
  Services();
  virtual ~Services();

  Services(const Services& from);
  Services(Services&& from) noexcept
    : Services() {
    *this = ::std::move(from);
  }

  inline Services& operator=(const Services& from) {
    CopyFrom(from);
    return *this;
  }
  inline Services& operator=(Services&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Services& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Services* internal_default_instance() {
    return reinterpret_cast<const Services*>(
               &_Services_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Services& a, Services& b) {
    a.Swap(&b);
  }
  inline void Swap(Services* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Services* New() const final {
    return CreateMaybeMessage<Services>(nullptr);
  }

  Services* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Services>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Services& from);
  void MergeFrom(const Services& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Services* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Services";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
  };
  // repeated .Service services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::Service* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Service >*
      mutable_services();
  private:
  const ::Service& _internal_services(int index) const;
  ::Service* _internal_add_services();
  public:
  const ::Service& services(int index) const;
  ::Service* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Service >&
      services() const;

  // @@protoc_insertion_point(class_scope:Services)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Service > services_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class Service :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline Service& operator=(Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }
  inline void Swap(Service* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const final {
    return CreateMaybeMessage<Service>(nullptr);
  }

  Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Service";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kPropertiesFieldNumber = 4,
    kServiceNameFieldNumber = 1,
  };
  // repeated .KeyStringValuePair tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::KeyStringValuePair* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
      mutable_tags();
  private:
  const ::KeyStringValuePair& _internal_tags(int index) const;
  ::KeyStringValuePair* _internal_add_tags();
  public:
  const ::KeyStringValuePair& tags(int index) const;
  ::KeyStringValuePair* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
      tags() const;

  // repeated .KeyStringValuePair properties = 4;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::KeyStringValuePair* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
      mutable_properties();
  private:
  const ::KeyStringValuePair& _internal_properties(int index) const;
  ::KeyStringValuePair* _internal_add_properties();
  public:
  const ::KeyStringValuePair& properties(int index) const;
  ::KeyStringValuePair* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
      properties() const;

  // string serviceName = 1;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // @@protoc_insertion_point(class_scope:Service)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class ServiceRegisterMapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceRegisterMapping) */ {
 public:
  ServiceRegisterMapping();
  virtual ~ServiceRegisterMapping();

  ServiceRegisterMapping(const ServiceRegisterMapping& from);
  ServiceRegisterMapping(ServiceRegisterMapping&& from) noexcept
    : ServiceRegisterMapping() {
    *this = ::std::move(from);
  }

  inline ServiceRegisterMapping& operator=(const ServiceRegisterMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRegisterMapping& operator=(ServiceRegisterMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceRegisterMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRegisterMapping* internal_default_instance() {
    return reinterpret_cast<const ServiceRegisterMapping*>(
               &_ServiceRegisterMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceRegisterMapping& a, ServiceRegisterMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRegisterMapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceRegisterMapping* New() const final {
    return CreateMaybeMessage<ServiceRegisterMapping>(nullptr);
  }

  ServiceRegisterMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRegisterMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceRegisterMapping& from);
  void MergeFrom(const ServiceRegisterMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceRegisterMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceRegisterMapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
  };
  // repeated .KeyIntValuePair services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::KeyIntValuePair* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >*
      mutable_services();
  private:
  const ::KeyIntValuePair& _internal_services(int index) const;
  ::KeyIntValuePair* _internal_add_services();
  public:
  const ::KeyIntValuePair& services(int index) const;
  ::KeyIntValuePair* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >&
      services() const;

  // @@protoc_insertion_point(class_scope:ServiceRegisterMapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair > services_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class ServiceInstances :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceInstances) */ {
 public:
  ServiceInstances();
  virtual ~ServiceInstances();

  ServiceInstances(const ServiceInstances& from);
  ServiceInstances(ServiceInstances&& from) noexcept
    : ServiceInstances() {
    *this = ::std::move(from);
  }

  inline ServiceInstances& operator=(const ServiceInstances& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInstances& operator=(ServiceInstances&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInstances& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInstances* internal_default_instance() {
    return reinterpret_cast<const ServiceInstances*>(
               &_ServiceInstances_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServiceInstances& a, ServiceInstances& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInstances* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInstances* New() const final {
    return CreateMaybeMessage<ServiceInstances>(nullptr);
  }

  ServiceInstances* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInstances>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInstances& from);
  void MergeFrom(const ServiceInstances& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInstances* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceInstances";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstancesFieldNumber = 1,
  };
  // repeated .ServiceInstance instances = 1;
  int instances_size() const;
  private:
  int _internal_instances_size() const;
  public:
  void clear_instances();
  ::ServiceInstance* mutable_instances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInstance >*
      mutable_instances();
  private:
  const ::ServiceInstance& _internal_instances(int index) const;
  ::ServiceInstance* _internal_add_instances();
  public:
  const ::ServiceInstance& instances(int index) const;
  ::ServiceInstance* add_instances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInstance >&
      instances() const;

  // @@protoc_insertion_point(class_scope:ServiceInstances)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInstance > instances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class ServiceInstance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceInstance) */ {
 public:
  ServiceInstance();
  virtual ~ServiceInstance();

  ServiceInstance(const ServiceInstance& from);
  ServiceInstance(ServiceInstance&& from) noexcept
    : ServiceInstance() {
    *this = ::std::move(from);
  }

  inline ServiceInstance& operator=(const ServiceInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInstance& operator=(ServiceInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInstance* internal_default_instance() {
    return reinterpret_cast<const ServiceInstance*>(
               &_ServiceInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServiceInstance& a, ServiceInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInstance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInstance* New() const final {
    return CreateMaybeMessage<ServiceInstance>(nullptr);
  }

  ServiceInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInstance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInstance& from);
  void MergeFrom(const ServiceInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceInstance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kPropertiesFieldNumber = 5,
    kInstanceUUIDFieldNumber = 2,
    kTimeFieldNumber = 3,
    kServiceIdFieldNumber = 1,
  };
  // repeated .KeyStringValuePair tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::KeyStringValuePair* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
      mutable_tags();
  private:
  const ::KeyStringValuePair& _internal_tags(int index) const;
  ::KeyStringValuePair* _internal_add_tags();
  public:
  const ::KeyStringValuePair& tags(int index) const;
  ::KeyStringValuePair* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
      tags() const;

  // repeated .KeyStringValuePair properties = 5;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::KeyStringValuePair* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
      mutable_properties();
  private:
  const ::KeyStringValuePair& _internal_properties(int index) const;
  ::KeyStringValuePair* _internal_add_properties();
  public:
  const ::KeyStringValuePair& properties(int index) const;
  ::KeyStringValuePair* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
      properties() const;

  // string instanceUUID = 2;
  void clear_instanceuuid();
  const std::string& instanceuuid() const;
  void set_instanceuuid(const std::string& value);
  void set_instanceuuid(std::string&& value);
  void set_instanceuuid(const char* value);
  void set_instanceuuid(const char* value, size_t size);
  std::string* mutable_instanceuuid();
  std::string* release_instanceuuid();
  void set_allocated_instanceuuid(std::string* instanceuuid);
  private:
  const std::string& _internal_instanceuuid() const;
  void _internal_set_instanceuuid(const std::string& value);
  std::string* _internal_mutable_instanceuuid();
  public:

  // int64 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 serviceId = 1;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceInstance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instanceuuid_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class ServiceInstanceRegisterMapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceInstanceRegisterMapping) */ {
 public:
  ServiceInstanceRegisterMapping();
  virtual ~ServiceInstanceRegisterMapping();

  ServiceInstanceRegisterMapping(const ServiceInstanceRegisterMapping& from);
  ServiceInstanceRegisterMapping(ServiceInstanceRegisterMapping&& from) noexcept
    : ServiceInstanceRegisterMapping() {
    *this = ::std::move(from);
  }

  inline ServiceInstanceRegisterMapping& operator=(const ServiceInstanceRegisterMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInstanceRegisterMapping& operator=(ServiceInstanceRegisterMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInstanceRegisterMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInstanceRegisterMapping* internal_default_instance() {
    return reinterpret_cast<const ServiceInstanceRegisterMapping*>(
               &_ServiceInstanceRegisterMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServiceInstanceRegisterMapping& a, ServiceInstanceRegisterMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInstanceRegisterMapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInstanceRegisterMapping* New() const final {
    return CreateMaybeMessage<ServiceInstanceRegisterMapping>(nullptr);
  }

  ServiceInstanceRegisterMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInstanceRegisterMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInstanceRegisterMapping& from);
  void MergeFrom(const ServiceInstanceRegisterMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInstanceRegisterMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceInstanceRegisterMapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInstancesFieldNumber = 1,
  };
  // repeated .KeyIntValuePair serviceInstances = 1;
  int serviceinstances_size() const;
  private:
  int _internal_serviceinstances_size() const;
  public:
  void clear_serviceinstances();
  ::KeyIntValuePair* mutable_serviceinstances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >*
      mutable_serviceinstances();
  private:
  const ::KeyIntValuePair& _internal_serviceinstances(int index) const;
  ::KeyIntValuePair* _internal_add_serviceinstances();
  public:
  const ::KeyIntValuePair& serviceinstances(int index) const;
  ::KeyIntValuePair* add_serviceinstances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >&
      serviceinstances() const;

  // @@protoc_insertion_point(class_scope:ServiceInstanceRegisterMapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair > serviceinstances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class NetAddresses :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetAddresses) */ {
 public:
  NetAddresses();
  virtual ~NetAddresses();

  NetAddresses(const NetAddresses& from);
  NetAddresses(NetAddresses&& from) noexcept
    : NetAddresses() {
    *this = ::std::move(from);
  }

  inline NetAddresses& operator=(const NetAddresses& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetAddresses& operator=(NetAddresses&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetAddresses& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetAddresses* internal_default_instance() {
    return reinterpret_cast<const NetAddresses*>(
               &_NetAddresses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NetAddresses& a, NetAddresses& b) {
    a.Swap(&b);
  }
  inline void Swap(NetAddresses* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetAddresses* New() const final {
    return CreateMaybeMessage<NetAddresses>(nullptr);
  }

  NetAddresses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetAddresses>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetAddresses& from);
  void MergeFrom(const NetAddresses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetAddresses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetAddresses";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // @@protoc_insertion_point(class_scope:NetAddresses)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class NetAddressMapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetAddressMapping) */ {
 public:
  NetAddressMapping();
  virtual ~NetAddressMapping();

  NetAddressMapping(const NetAddressMapping& from);
  NetAddressMapping(NetAddressMapping&& from) noexcept
    : NetAddressMapping() {
    *this = ::std::move(from);
  }

  inline NetAddressMapping& operator=(const NetAddressMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetAddressMapping& operator=(NetAddressMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetAddressMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetAddressMapping* internal_default_instance() {
    return reinterpret_cast<const NetAddressMapping*>(
               &_NetAddressMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NetAddressMapping& a, NetAddressMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(NetAddressMapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetAddressMapping* New() const final {
    return CreateMaybeMessage<NetAddressMapping>(nullptr);
  }

  NetAddressMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetAddressMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetAddressMapping& from);
  void MergeFrom(const NetAddressMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetAddressMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetAddressMapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressIdsFieldNumber = 1,
  };
  // repeated .KeyIntValuePair addressIds = 1;
  int addressids_size() const;
  private:
  int _internal_addressids_size() const;
  public:
  void clear_addressids();
  ::KeyIntValuePair* mutable_addressids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >*
      mutable_addressids();
  private:
  const ::KeyIntValuePair& _internal_addressids(int index) const;
  ::KeyIntValuePair* _internal_add_addressids();
  public:
  const ::KeyIntValuePair& addressids(int index) const;
  ::KeyIntValuePair* add_addressids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >&
      addressids() const;

  // @@protoc_insertion_point(class_scope:NetAddressMapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair > addressids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class Endpoints :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Endpoints) */ {
 public:
  Endpoints();
  virtual ~Endpoints();

  Endpoints(const Endpoints& from);
  Endpoints(Endpoints&& from) noexcept
    : Endpoints() {
    *this = ::std::move(from);
  }

  inline Endpoints& operator=(const Endpoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline Endpoints& operator=(Endpoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Endpoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Endpoints* internal_default_instance() {
    return reinterpret_cast<const Endpoints*>(
               &_Endpoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Endpoints& a, Endpoints& b) {
    a.Swap(&b);
  }
  inline void Swap(Endpoints* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Endpoints* New() const final {
    return CreateMaybeMessage<Endpoints>(nullptr);
  }

  Endpoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Endpoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Endpoints& from);
  void MergeFrom(const Endpoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endpoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Endpoints";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointsFieldNumber = 1,
  };
  // repeated .Endpoint endpoints = 1;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  ::Endpoint* mutable_endpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endpoint >*
      mutable_endpoints();
  private:
  const ::Endpoint& _internal_endpoints(int index) const;
  ::Endpoint* _internal_add_endpoints();
  public:
  const ::Endpoint& endpoints(int index) const;
  ::Endpoint* add_endpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endpoint >&
      endpoints() const;

  // @@protoc_insertion_point(class_scope:Endpoints)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endpoint > endpoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class Endpoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Endpoint) */ {
 public:
  Endpoint();
  virtual ~Endpoint();

  Endpoint(const Endpoint& from);
  Endpoint(Endpoint&& from) noexcept
    : Endpoint() {
    *this = ::std::move(from);
  }

  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Endpoint& operator=(Endpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Endpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Endpoint* internal_default_instance() {
    return reinterpret_cast<const Endpoint*>(
               &_Endpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Endpoint& a, Endpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Endpoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Endpoint* New() const final {
    return CreateMaybeMessage<Endpoint>(nullptr);
  }

  Endpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Endpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Endpoint& from);
  void MergeFrom(const Endpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Endpoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kPropertiesFieldNumber = 4,
    kEndpointNameFieldNumber = 2,
    kServiceIdFieldNumber = 1,
    kFromFieldNumber = 5,
  };
  // repeated .KeyStringValuePair tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::KeyStringValuePair* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
      mutable_tags();
  private:
  const ::KeyStringValuePair& _internal_tags(int index) const;
  ::KeyStringValuePair* _internal_add_tags();
  public:
  const ::KeyStringValuePair& tags(int index) const;
  ::KeyStringValuePair* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
      tags() const;

  // repeated .KeyStringValuePair properties = 4;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::KeyStringValuePair* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
      mutable_properties();
  private:
  const ::KeyStringValuePair& _internal_properties(int index) const;
  ::KeyStringValuePair* _internal_add_properties();
  public:
  const ::KeyStringValuePair& properties(int index) const;
  ::KeyStringValuePair* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
      properties() const;

  // string endpointName = 2;
  void clear_endpointname();
  const std::string& endpointname() const;
  void set_endpointname(const std::string& value);
  void set_endpointname(std::string&& value);
  void set_endpointname(const char* value);
  void set_endpointname(const char* value, size_t size);
  std::string* mutable_endpointname();
  std::string* release_endpointname();
  void set_allocated_endpointname(std::string* endpointname);
  private:
  const std::string& _internal_endpointname() const;
  void _internal_set_endpointname(const std::string& value);
  std::string* _internal_mutable_endpointname();
  public:

  // int32 serviceId = 1;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .DetectPoint from = 5;
  void clear_from();
  ::DetectPoint from() const;
  void set_from(::DetectPoint value);
  private:
  ::DetectPoint _internal_from() const;
  void _internal_set_from(::DetectPoint value);
  public:

  // @@protoc_insertion_point(class_scope:Endpoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpointname_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid_;
  int from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class EndpointMapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EndpointMapping) */ {
 public:
  EndpointMapping();
  virtual ~EndpointMapping();

  EndpointMapping(const EndpointMapping& from);
  EndpointMapping(EndpointMapping&& from) noexcept
    : EndpointMapping() {
    *this = ::std::move(from);
  }

  inline EndpointMapping& operator=(const EndpointMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndpointMapping& operator=(EndpointMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndpointMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndpointMapping* internal_default_instance() {
    return reinterpret_cast<const EndpointMapping*>(
               &_EndpointMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EndpointMapping& a, EndpointMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(EndpointMapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndpointMapping* New() const final {
    return CreateMaybeMessage<EndpointMapping>(nullptr);
  }

  EndpointMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndpointMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndpointMapping& from);
  void MergeFrom(const EndpointMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndpointMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EndpointMapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .EndpointMappingElement elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::EndpointMappingElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointMappingElement >*
      mutable_elements();
  private:
  const ::EndpointMappingElement& _internal_elements(int index) const;
  ::EndpointMappingElement* _internal_add_elements();
  public:
  const ::EndpointMappingElement& elements(int index) const;
  ::EndpointMappingElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointMappingElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:EndpointMapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointMappingElement > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class EndpointMappingElement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EndpointMappingElement) */ {
 public:
  EndpointMappingElement();
  virtual ~EndpointMappingElement();

  EndpointMappingElement(const EndpointMappingElement& from);
  EndpointMappingElement(EndpointMappingElement&& from) noexcept
    : EndpointMappingElement() {
    *this = ::std::move(from);
  }

  inline EndpointMappingElement& operator=(const EndpointMappingElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndpointMappingElement& operator=(EndpointMappingElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndpointMappingElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndpointMappingElement* internal_default_instance() {
    return reinterpret_cast<const EndpointMappingElement*>(
               &_EndpointMappingElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EndpointMappingElement& a, EndpointMappingElement& b) {
    a.Swap(&b);
  }
  inline void Swap(EndpointMappingElement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndpointMappingElement* New() const final {
    return CreateMaybeMessage<EndpointMappingElement>(nullptr);
  }

  EndpointMappingElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndpointMappingElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndpointMappingElement& from);
  void MergeFrom(const EndpointMappingElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndpointMappingElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EndpointMappingElement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointNameFieldNumber = 2,
    kServiceIdFieldNumber = 1,
    kEndpointIdFieldNumber = 3,
    kFromFieldNumber = 4,
  };
  // string endpointName = 2;
  void clear_endpointname();
  const std::string& endpointname() const;
  void set_endpointname(const std::string& value);
  void set_endpointname(std::string&& value);
  void set_endpointname(const char* value);
  void set_endpointname(const char* value, size_t size);
  std::string* mutable_endpointname();
  std::string* release_endpointname();
  void set_allocated_endpointname(std::string* endpointname);
  private:
  const std::string& _internal_endpointname() const;
  void _internal_set_endpointname(const std::string& value);
  std::string* _internal_mutable_endpointname();
  public:

  // int32 serviceId = 1;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 endpointId = 3;
  void clear_endpointid();
  ::PROTOBUF_NAMESPACE_ID::int32 endpointid() const;
  void set_endpointid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endpointid() const;
  void _internal_set_endpointid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .DetectPoint from = 4;
  void clear_from();
  ::DetectPoint from() const;
  void set_from(::DetectPoint value);
  private:
  ::DetectPoint _internal_from() const;
  void _internal_set_from(::DetectPoint value);
  public:

  // @@protoc_insertion_point(class_scope:EndpointMappingElement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpointname_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 endpointid_;
  int from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class ServiceAndNetworkAddressMappings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceAndNetworkAddressMappings) */ {
 public:
  ServiceAndNetworkAddressMappings();
  virtual ~ServiceAndNetworkAddressMappings();

  ServiceAndNetworkAddressMappings(const ServiceAndNetworkAddressMappings& from);
  ServiceAndNetworkAddressMappings(ServiceAndNetworkAddressMappings&& from) noexcept
    : ServiceAndNetworkAddressMappings() {
    *this = ::std::move(from);
  }

  inline ServiceAndNetworkAddressMappings& operator=(const ServiceAndNetworkAddressMappings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceAndNetworkAddressMappings& operator=(ServiceAndNetworkAddressMappings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceAndNetworkAddressMappings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceAndNetworkAddressMappings* internal_default_instance() {
    return reinterpret_cast<const ServiceAndNetworkAddressMappings*>(
               &_ServiceAndNetworkAddressMappings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ServiceAndNetworkAddressMappings& a, ServiceAndNetworkAddressMappings& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceAndNetworkAddressMappings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceAndNetworkAddressMappings* New() const final {
    return CreateMaybeMessage<ServiceAndNetworkAddressMappings>(nullptr);
  }

  ServiceAndNetworkAddressMappings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceAndNetworkAddressMappings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceAndNetworkAddressMappings& from);
  void MergeFrom(const ServiceAndNetworkAddressMappings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceAndNetworkAddressMappings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceAndNetworkAddressMappings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappingsFieldNumber = 1,
  };
  // repeated .ServiceAndNetworkAddressMapping mappings = 1;
  int mappings_size() const;
  private:
  int _internal_mappings_size() const;
  public:
  void clear_mappings();
  ::ServiceAndNetworkAddressMapping* mutable_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceAndNetworkAddressMapping >*
      mutable_mappings();
  private:
  const ::ServiceAndNetworkAddressMapping& _internal_mappings(int index) const;
  ::ServiceAndNetworkAddressMapping* _internal_add_mappings();
  public:
  const ::ServiceAndNetworkAddressMapping& mappings(int index) const;
  ::ServiceAndNetworkAddressMapping* add_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceAndNetworkAddressMapping >&
      mappings() const;

  // @@protoc_insertion_point(class_scope:ServiceAndNetworkAddressMappings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceAndNetworkAddressMapping > mappings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// -------------------------------------------------------------------

class ServiceAndNetworkAddressMapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceAndNetworkAddressMapping) */ {
 public:
  ServiceAndNetworkAddressMapping();
  virtual ~ServiceAndNetworkAddressMapping();

  ServiceAndNetworkAddressMapping(const ServiceAndNetworkAddressMapping& from);
  ServiceAndNetworkAddressMapping(ServiceAndNetworkAddressMapping&& from) noexcept
    : ServiceAndNetworkAddressMapping() {
    *this = ::std::move(from);
  }

  inline ServiceAndNetworkAddressMapping& operator=(const ServiceAndNetworkAddressMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceAndNetworkAddressMapping& operator=(ServiceAndNetworkAddressMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceAndNetworkAddressMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceAndNetworkAddressMapping* internal_default_instance() {
    return reinterpret_cast<const ServiceAndNetworkAddressMapping*>(
               &_ServiceAndNetworkAddressMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ServiceAndNetworkAddressMapping& a, ServiceAndNetworkAddressMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceAndNetworkAddressMapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceAndNetworkAddressMapping* New() const final {
    return CreateMaybeMessage<ServiceAndNetworkAddressMapping>(nullptr);
  }

  ServiceAndNetworkAddressMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceAndNetworkAddressMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceAndNetworkAddressMapping& from);
  void MergeFrom(const ServiceAndNetworkAddressMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceAndNetworkAddressMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceAndNetworkAddressMapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_register_2fRegister_2eproto);
    return ::descriptor_table_register_2fRegister_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkAddressFieldNumber = 3,
    kServiceIdFieldNumber = 1,
    kServiceInstanceIdFieldNumber = 2,
    kNetworkAddressIdFieldNumber = 4,
  };
  // string networkAddress = 3;
  void clear_networkaddress();
  const std::string& networkaddress() const;
  void set_networkaddress(const std::string& value);
  void set_networkaddress(std::string&& value);
  void set_networkaddress(const char* value);
  void set_networkaddress(const char* value, size_t size);
  std::string* mutable_networkaddress();
  std::string* release_networkaddress();
  void set_allocated_networkaddress(std::string* networkaddress);
  private:
  const std::string& _internal_networkaddress() const;
  void _internal_set_networkaddress(const std::string& value);
  std::string* _internal_mutable_networkaddress();
  public:

  // int32 serviceId = 1;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 serviceInstanceId = 2;
  void clear_serviceinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceinstanceid() const;
  void set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceinstanceid() const;
  void _internal_set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 networkAddressId = 4;
  void clear_networkaddressid();
  ::PROTOBUF_NAMESPACE_ID::int32 networkaddressid() const;
  void set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_networkaddressid() const;
  void _internal_set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceAndNetworkAddressMapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networkaddress_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 networkaddressid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_register_2fRegister_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Services

// repeated .Service services = 1;
inline int Services::_internal_services_size() const {
  return services_.size();
}
inline int Services::services_size() const {
  return _internal_services_size();
}
inline void Services::clear_services() {
  services_.Clear();
}
inline ::Service* Services::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:Services.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Service >*
Services::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:Services.services)
  return &services_;
}
inline const ::Service& Services::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::Service& Services::services(int index) const {
  // @@protoc_insertion_point(field_get:Services.services)
  return _internal_services(index);
}
inline ::Service* Services::_internal_add_services() {
  return services_.Add();
}
inline ::Service* Services::add_services() {
  // @@protoc_insertion_point(field_add:Services.services)
  return _internal_add_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Service >&
Services::services() const {
  // @@protoc_insertion_point(field_list:Services.services)
  return services_;
}

// -------------------------------------------------------------------

// Service

// string serviceName = 1;
inline void Service::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::servicename() const {
  // @@protoc_insertion_point(field_get:Service.serviceName)
  return _internal_servicename();
}
inline void Service::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:Service.serviceName)
}
inline std::string* Service::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:Service.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& Service::_internal_servicename() const {
  return servicename_.GetNoArena();
}
inline void Service::_internal_set_servicename(const std::string& value) {
  
  servicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_servicename(std::string&& value) {
  
  servicename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Service.serviceName)
}
inline void Service::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Service.serviceName)
}
inline void Service::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Service.serviceName)
}
inline std::string* Service::_internal_mutable_servicename() {
  
  return servicename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_servicename() {
  // @@protoc_insertion_point(field_release:Service.serviceName)
  
  return servicename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:Service.serviceName)
}

// repeated .KeyStringValuePair tags = 3;
inline int Service::_internal_tags_size() const {
  return tags_.size();
}
inline int Service::tags_size() const {
  return _internal_tags_size();
}
inline ::KeyStringValuePair* Service::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:Service.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
Service::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:Service.tags)
  return &tags_;
}
inline const ::KeyStringValuePair& Service::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::KeyStringValuePair& Service::tags(int index) const {
  // @@protoc_insertion_point(field_get:Service.tags)
  return _internal_tags(index);
}
inline ::KeyStringValuePair* Service::_internal_add_tags() {
  return tags_.Add();
}
inline ::KeyStringValuePair* Service::add_tags() {
  // @@protoc_insertion_point(field_add:Service.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
Service::tags() const {
  // @@protoc_insertion_point(field_list:Service.tags)
  return tags_;
}

// repeated .KeyStringValuePair properties = 4;
inline int Service::_internal_properties_size() const {
  return properties_.size();
}
inline int Service::properties_size() const {
  return _internal_properties_size();
}
inline ::KeyStringValuePair* Service::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Service.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
Service::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Service.properties)
  return &properties_;
}
inline const ::KeyStringValuePair& Service::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::KeyStringValuePair& Service::properties(int index) const {
  // @@protoc_insertion_point(field_get:Service.properties)
  return _internal_properties(index);
}
inline ::KeyStringValuePair* Service::_internal_add_properties() {
  return properties_.Add();
}
inline ::KeyStringValuePair* Service::add_properties() {
  // @@protoc_insertion_point(field_add:Service.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
Service::properties() const {
  // @@protoc_insertion_point(field_list:Service.properties)
  return properties_;
}

// -------------------------------------------------------------------

// ServiceRegisterMapping

// repeated .KeyIntValuePair services = 1;
inline int ServiceRegisterMapping::_internal_services_size() const {
  return services_.size();
}
inline int ServiceRegisterMapping::services_size() const {
  return _internal_services_size();
}
inline ::KeyIntValuePair* ServiceRegisterMapping::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceRegisterMapping.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >*
ServiceRegisterMapping::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:ServiceRegisterMapping.services)
  return &services_;
}
inline const ::KeyIntValuePair& ServiceRegisterMapping::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::KeyIntValuePair& ServiceRegisterMapping::services(int index) const {
  // @@protoc_insertion_point(field_get:ServiceRegisterMapping.services)
  return _internal_services(index);
}
inline ::KeyIntValuePair* ServiceRegisterMapping::_internal_add_services() {
  return services_.Add();
}
inline ::KeyIntValuePair* ServiceRegisterMapping::add_services() {
  // @@protoc_insertion_point(field_add:ServiceRegisterMapping.services)
  return _internal_add_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >&
ServiceRegisterMapping::services() const {
  // @@protoc_insertion_point(field_list:ServiceRegisterMapping.services)
  return services_;
}

// -------------------------------------------------------------------

// ServiceInstances

// repeated .ServiceInstance instances = 1;
inline int ServiceInstances::_internal_instances_size() const {
  return instances_.size();
}
inline int ServiceInstances::instances_size() const {
  return _internal_instances_size();
}
inline void ServiceInstances::clear_instances() {
  instances_.Clear();
}
inline ::ServiceInstance* ServiceInstances::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceInstances.instances)
  return instances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInstance >*
ServiceInstances::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:ServiceInstances.instances)
  return &instances_;
}
inline const ::ServiceInstance& ServiceInstances::_internal_instances(int index) const {
  return instances_.Get(index);
}
inline const ::ServiceInstance& ServiceInstances::instances(int index) const {
  // @@protoc_insertion_point(field_get:ServiceInstances.instances)
  return _internal_instances(index);
}
inline ::ServiceInstance* ServiceInstances::_internal_add_instances() {
  return instances_.Add();
}
inline ::ServiceInstance* ServiceInstances::add_instances() {
  // @@protoc_insertion_point(field_add:ServiceInstances.instances)
  return _internal_add_instances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceInstance >&
ServiceInstances::instances() const {
  // @@protoc_insertion_point(field_list:ServiceInstances.instances)
  return instances_;
}

// -------------------------------------------------------------------

// ServiceInstance

// int32 serviceId = 1;
inline void ServiceInstance::clear_serviceid() {
  serviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInstance::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInstance::serviceid() const {
  // @@protoc_insertion_point(field_get:ServiceInstance.serviceId)
  return _internal_serviceid();
}
inline void ServiceInstance::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceid_ = value;
}
inline void ServiceInstance::set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:ServiceInstance.serviceId)
}

// string instanceUUID = 2;
inline void ServiceInstance::clear_instanceuuid() {
  instanceuuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInstance::instanceuuid() const {
  // @@protoc_insertion_point(field_get:ServiceInstance.instanceUUID)
  return _internal_instanceuuid();
}
inline void ServiceInstance::set_instanceuuid(const std::string& value) {
  _internal_set_instanceuuid(value);
  // @@protoc_insertion_point(field_set:ServiceInstance.instanceUUID)
}
inline std::string* ServiceInstance::mutable_instanceuuid() {
  // @@protoc_insertion_point(field_mutable:ServiceInstance.instanceUUID)
  return _internal_mutable_instanceuuid();
}
inline const std::string& ServiceInstance::_internal_instanceuuid() const {
  return instanceuuid_.GetNoArena();
}
inline void ServiceInstance::_internal_set_instanceuuid(const std::string& value) {
  
  instanceuuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInstance::set_instanceuuid(std::string&& value) {
  
  instanceuuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceInstance.instanceUUID)
}
inline void ServiceInstance::set_instanceuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instanceuuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceInstance.instanceUUID)
}
inline void ServiceInstance::set_instanceuuid(const char* value, size_t size) {
  
  instanceuuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceInstance.instanceUUID)
}
inline std::string* ServiceInstance::_internal_mutable_instanceuuid() {
  
  return instanceuuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInstance::release_instanceuuid() {
  // @@protoc_insertion_point(field_release:ServiceInstance.instanceUUID)
  
  return instanceuuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInstance::set_allocated_instanceuuid(std::string* instanceuuid) {
  if (instanceuuid != nullptr) {
    
  } else {
    
  }
  instanceuuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instanceuuid);
  // @@protoc_insertion_point(field_set_allocated:ServiceInstance.instanceUUID)
}

// int64 time = 3;
inline void ServiceInstance::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceInstance::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceInstance::time() const {
  // @@protoc_insertion_point(field_get:ServiceInstance.time)
  return _internal_time();
}
inline void ServiceInstance::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void ServiceInstance::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ServiceInstance.time)
}

// repeated .KeyStringValuePair tags = 4;
inline int ServiceInstance::_internal_tags_size() const {
  return tags_.size();
}
inline int ServiceInstance::tags_size() const {
  return _internal_tags_size();
}
inline ::KeyStringValuePair* ServiceInstance::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceInstance.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
ServiceInstance::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ServiceInstance.tags)
  return &tags_;
}
inline const ::KeyStringValuePair& ServiceInstance::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::KeyStringValuePair& ServiceInstance::tags(int index) const {
  // @@protoc_insertion_point(field_get:ServiceInstance.tags)
  return _internal_tags(index);
}
inline ::KeyStringValuePair* ServiceInstance::_internal_add_tags() {
  return tags_.Add();
}
inline ::KeyStringValuePair* ServiceInstance::add_tags() {
  // @@protoc_insertion_point(field_add:ServiceInstance.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
ServiceInstance::tags() const {
  // @@protoc_insertion_point(field_list:ServiceInstance.tags)
  return tags_;
}

// repeated .KeyStringValuePair properties = 5;
inline int ServiceInstance::_internal_properties_size() const {
  return properties_.size();
}
inline int ServiceInstance::properties_size() const {
  return _internal_properties_size();
}
inline ::KeyStringValuePair* ServiceInstance::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceInstance.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
ServiceInstance::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:ServiceInstance.properties)
  return &properties_;
}
inline const ::KeyStringValuePair& ServiceInstance::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::KeyStringValuePair& ServiceInstance::properties(int index) const {
  // @@protoc_insertion_point(field_get:ServiceInstance.properties)
  return _internal_properties(index);
}
inline ::KeyStringValuePair* ServiceInstance::_internal_add_properties() {
  return properties_.Add();
}
inline ::KeyStringValuePair* ServiceInstance::add_properties() {
  // @@protoc_insertion_point(field_add:ServiceInstance.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
ServiceInstance::properties() const {
  // @@protoc_insertion_point(field_list:ServiceInstance.properties)
  return properties_;
}

// -------------------------------------------------------------------

// ServiceInstanceRegisterMapping

// repeated .KeyIntValuePair serviceInstances = 1;
inline int ServiceInstanceRegisterMapping::_internal_serviceinstances_size() const {
  return serviceinstances_.size();
}
inline int ServiceInstanceRegisterMapping::serviceinstances_size() const {
  return _internal_serviceinstances_size();
}
inline ::KeyIntValuePair* ServiceInstanceRegisterMapping::mutable_serviceinstances(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceInstanceRegisterMapping.serviceInstances)
  return serviceinstances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >*
ServiceInstanceRegisterMapping::mutable_serviceinstances() {
  // @@protoc_insertion_point(field_mutable_list:ServiceInstanceRegisterMapping.serviceInstances)
  return &serviceinstances_;
}
inline const ::KeyIntValuePair& ServiceInstanceRegisterMapping::_internal_serviceinstances(int index) const {
  return serviceinstances_.Get(index);
}
inline const ::KeyIntValuePair& ServiceInstanceRegisterMapping::serviceinstances(int index) const {
  // @@protoc_insertion_point(field_get:ServiceInstanceRegisterMapping.serviceInstances)
  return _internal_serviceinstances(index);
}
inline ::KeyIntValuePair* ServiceInstanceRegisterMapping::_internal_add_serviceinstances() {
  return serviceinstances_.Add();
}
inline ::KeyIntValuePair* ServiceInstanceRegisterMapping::add_serviceinstances() {
  // @@protoc_insertion_point(field_add:ServiceInstanceRegisterMapping.serviceInstances)
  return _internal_add_serviceinstances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >&
ServiceInstanceRegisterMapping::serviceinstances() const {
  // @@protoc_insertion_point(field_list:ServiceInstanceRegisterMapping.serviceInstances)
  return serviceinstances_;
}

// -------------------------------------------------------------------

// NetAddresses

// repeated string addresses = 1;
inline int NetAddresses::_internal_addresses_size() const {
  return addresses_.size();
}
inline int NetAddresses::addresses_size() const {
  return _internal_addresses_size();
}
inline void NetAddresses::clear_addresses() {
  addresses_.Clear();
}
inline std::string* NetAddresses::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:NetAddresses.addresses)
  return _internal_add_addresses();
}
inline const std::string& NetAddresses::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& NetAddresses::addresses(int index) const {
  // @@protoc_insertion_point(field_get:NetAddresses.addresses)
  return _internal_addresses(index);
}
inline std::string* NetAddresses::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:NetAddresses.addresses)
  return addresses_.Mutable(index);
}
inline void NetAddresses::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NetAddresses.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void NetAddresses::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NetAddresses.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void NetAddresses::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetAddresses.addresses)
}
inline void NetAddresses::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetAddresses.addresses)
}
inline std::string* NetAddresses::_internal_add_addresses() {
  return addresses_.Add();
}
inline void NetAddresses::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetAddresses.addresses)
}
inline void NetAddresses::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NetAddresses.addresses)
}
inline void NetAddresses::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetAddresses.addresses)
}
inline void NetAddresses::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetAddresses.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetAddresses::addresses() const {
  // @@protoc_insertion_point(field_list:NetAddresses.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetAddresses::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:NetAddresses.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// NetAddressMapping

// repeated .KeyIntValuePair addressIds = 1;
inline int NetAddressMapping::_internal_addressids_size() const {
  return addressids_.size();
}
inline int NetAddressMapping::addressids_size() const {
  return _internal_addressids_size();
}
inline ::KeyIntValuePair* NetAddressMapping::mutable_addressids(int index) {
  // @@protoc_insertion_point(field_mutable:NetAddressMapping.addressIds)
  return addressids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >*
NetAddressMapping::mutable_addressids() {
  // @@protoc_insertion_point(field_mutable_list:NetAddressMapping.addressIds)
  return &addressids_;
}
inline const ::KeyIntValuePair& NetAddressMapping::_internal_addressids(int index) const {
  return addressids_.Get(index);
}
inline const ::KeyIntValuePair& NetAddressMapping::addressids(int index) const {
  // @@protoc_insertion_point(field_get:NetAddressMapping.addressIds)
  return _internal_addressids(index);
}
inline ::KeyIntValuePair* NetAddressMapping::_internal_add_addressids() {
  return addressids_.Add();
}
inline ::KeyIntValuePair* NetAddressMapping::add_addressids() {
  // @@protoc_insertion_point(field_add:NetAddressMapping.addressIds)
  return _internal_add_addressids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyIntValuePair >&
NetAddressMapping::addressids() const {
  // @@protoc_insertion_point(field_list:NetAddressMapping.addressIds)
  return addressids_;
}

// -------------------------------------------------------------------

// Endpoints

// repeated .Endpoint endpoints = 1;
inline int Endpoints::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Endpoints::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Endpoints::clear_endpoints() {
  endpoints_.Clear();
}
inline ::Endpoint* Endpoints::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:Endpoints.endpoints)
  return endpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endpoint >*
Endpoints::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:Endpoints.endpoints)
  return &endpoints_;
}
inline const ::Endpoint& Endpoints::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const ::Endpoint& Endpoints::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:Endpoints.endpoints)
  return _internal_endpoints(index);
}
inline ::Endpoint* Endpoints::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline ::Endpoint* Endpoints::add_endpoints() {
  // @@protoc_insertion_point(field_add:Endpoints.endpoints)
  return _internal_add_endpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endpoint >&
Endpoints::endpoints() const {
  // @@protoc_insertion_point(field_list:Endpoints.endpoints)
  return endpoints_;
}

// -------------------------------------------------------------------

// Endpoint

// int32 serviceId = 1;
inline void Endpoint::clear_serviceid() {
  serviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Endpoint::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Endpoint::serviceid() const {
  // @@protoc_insertion_point(field_get:Endpoint.serviceId)
  return _internal_serviceid();
}
inline void Endpoint::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceid_ = value;
}
inline void Endpoint::set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:Endpoint.serviceId)
}

// string endpointName = 2;
inline void Endpoint::clear_endpointname() {
  endpointname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Endpoint::endpointname() const {
  // @@protoc_insertion_point(field_get:Endpoint.endpointName)
  return _internal_endpointname();
}
inline void Endpoint::set_endpointname(const std::string& value) {
  _internal_set_endpointname(value);
  // @@protoc_insertion_point(field_set:Endpoint.endpointName)
}
inline std::string* Endpoint::mutable_endpointname() {
  // @@protoc_insertion_point(field_mutable:Endpoint.endpointName)
  return _internal_mutable_endpointname();
}
inline const std::string& Endpoint::_internal_endpointname() const {
  return endpointname_.GetNoArena();
}
inline void Endpoint::_internal_set_endpointname(const std::string& value) {
  
  endpointname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Endpoint::set_endpointname(std::string&& value) {
  
  endpointname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Endpoint.endpointName)
}
inline void Endpoint::set_endpointname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpointname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Endpoint.endpointName)
}
inline void Endpoint::set_endpointname(const char* value, size_t size) {
  
  endpointname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Endpoint.endpointName)
}
inline std::string* Endpoint::_internal_mutable_endpointname() {
  
  return endpointname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Endpoint::release_endpointname() {
  // @@protoc_insertion_point(field_release:Endpoint.endpointName)
  
  return endpointname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_allocated_endpointname(std::string* endpointname) {
  if (endpointname != nullptr) {
    
  } else {
    
  }
  endpointname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpointname);
  // @@protoc_insertion_point(field_set_allocated:Endpoint.endpointName)
}

// repeated .KeyStringValuePair tags = 3;
inline int Endpoint::_internal_tags_size() const {
  return tags_.size();
}
inline int Endpoint::tags_size() const {
  return _internal_tags_size();
}
inline ::KeyStringValuePair* Endpoint::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:Endpoint.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
Endpoint::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:Endpoint.tags)
  return &tags_;
}
inline const ::KeyStringValuePair& Endpoint::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::KeyStringValuePair& Endpoint::tags(int index) const {
  // @@protoc_insertion_point(field_get:Endpoint.tags)
  return _internal_tags(index);
}
inline ::KeyStringValuePair* Endpoint::_internal_add_tags() {
  return tags_.Add();
}
inline ::KeyStringValuePair* Endpoint::add_tags() {
  // @@protoc_insertion_point(field_add:Endpoint.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
Endpoint::tags() const {
  // @@protoc_insertion_point(field_list:Endpoint.tags)
  return tags_;
}

// repeated .KeyStringValuePair properties = 4;
inline int Endpoint::_internal_properties_size() const {
  return properties_.size();
}
inline int Endpoint::properties_size() const {
  return _internal_properties_size();
}
inline ::KeyStringValuePair* Endpoint::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Endpoint.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >*
Endpoint::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Endpoint.properties)
  return &properties_;
}
inline const ::KeyStringValuePair& Endpoint::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::KeyStringValuePair& Endpoint::properties(int index) const {
  // @@protoc_insertion_point(field_get:Endpoint.properties)
  return _internal_properties(index);
}
inline ::KeyStringValuePair* Endpoint::_internal_add_properties() {
  return properties_.Add();
}
inline ::KeyStringValuePair* Endpoint::add_properties() {
  // @@protoc_insertion_point(field_add:Endpoint.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyStringValuePair >&
Endpoint::properties() const {
  // @@protoc_insertion_point(field_list:Endpoint.properties)
  return properties_;
}

// .DetectPoint from = 5;
inline void Endpoint::clear_from() {
  from_ = 0;
}
inline ::DetectPoint Endpoint::_internal_from() const {
  return static_cast< ::DetectPoint >(from_);
}
inline ::DetectPoint Endpoint::from() const {
  // @@protoc_insertion_point(field_get:Endpoint.from)
  return _internal_from();
}
inline void Endpoint::_internal_set_from(::DetectPoint value) {
  
  from_ = value;
}
inline void Endpoint::set_from(::DetectPoint value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:Endpoint.from)
}

// -------------------------------------------------------------------

// EndpointMapping

// repeated .EndpointMappingElement elements = 1;
inline int EndpointMapping::_internal_elements_size() const {
  return elements_.size();
}
inline int EndpointMapping::elements_size() const {
  return _internal_elements_size();
}
inline void EndpointMapping::clear_elements() {
  elements_.Clear();
}
inline ::EndpointMappingElement* EndpointMapping::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:EndpointMapping.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointMappingElement >*
EndpointMapping::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:EndpointMapping.elements)
  return &elements_;
}
inline const ::EndpointMappingElement& EndpointMapping::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::EndpointMappingElement& EndpointMapping::elements(int index) const {
  // @@protoc_insertion_point(field_get:EndpointMapping.elements)
  return _internal_elements(index);
}
inline ::EndpointMappingElement* EndpointMapping::_internal_add_elements() {
  return elements_.Add();
}
inline ::EndpointMappingElement* EndpointMapping::add_elements() {
  // @@protoc_insertion_point(field_add:EndpointMapping.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointMappingElement >&
EndpointMapping::elements() const {
  // @@protoc_insertion_point(field_list:EndpointMapping.elements)
  return elements_;
}

// -------------------------------------------------------------------

// EndpointMappingElement

// int32 serviceId = 1;
inline void EndpointMappingElement::clear_serviceid() {
  serviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndpointMappingElement::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndpointMappingElement::serviceid() const {
  // @@protoc_insertion_point(field_get:EndpointMappingElement.serviceId)
  return _internal_serviceid();
}
inline void EndpointMappingElement::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceid_ = value;
}
inline void EndpointMappingElement::set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:EndpointMappingElement.serviceId)
}

// string endpointName = 2;
inline void EndpointMappingElement::clear_endpointname() {
  endpointname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EndpointMappingElement::endpointname() const {
  // @@protoc_insertion_point(field_get:EndpointMappingElement.endpointName)
  return _internal_endpointname();
}
inline void EndpointMappingElement::set_endpointname(const std::string& value) {
  _internal_set_endpointname(value);
  // @@protoc_insertion_point(field_set:EndpointMappingElement.endpointName)
}
inline std::string* EndpointMappingElement::mutable_endpointname() {
  // @@protoc_insertion_point(field_mutable:EndpointMappingElement.endpointName)
  return _internal_mutable_endpointname();
}
inline const std::string& EndpointMappingElement::_internal_endpointname() const {
  return endpointname_.GetNoArena();
}
inline void EndpointMappingElement::_internal_set_endpointname(const std::string& value) {
  
  endpointname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EndpointMappingElement::set_endpointname(std::string&& value) {
  
  endpointname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EndpointMappingElement.endpointName)
}
inline void EndpointMappingElement::set_endpointname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpointname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EndpointMappingElement.endpointName)
}
inline void EndpointMappingElement::set_endpointname(const char* value, size_t size) {
  
  endpointname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EndpointMappingElement.endpointName)
}
inline std::string* EndpointMappingElement::_internal_mutable_endpointname() {
  
  return endpointname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndpointMappingElement::release_endpointname() {
  // @@protoc_insertion_point(field_release:EndpointMappingElement.endpointName)
  
  return endpointname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndpointMappingElement::set_allocated_endpointname(std::string* endpointname) {
  if (endpointname != nullptr) {
    
  } else {
    
  }
  endpointname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpointname);
  // @@protoc_insertion_point(field_set_allocated:EndpointMappingElement.endpointName)
}

// int32 endpointId = 3;
inline void EndpointMappingElement::clear_endpointid() {
  endpointid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndpointMappingElement::_internal_endpointid() const {
  return endpointid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndpointMappingElement::endpointid() const {
  // @@protoc_insertion_point(field_get:EndpointMappingElement.endpointId)
  return _internal_endpointid();
}
inline void EndpointMappingElement::_internal_set_endpointid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endpointid_ = value;
}
inline void EndpointMappingElement::set_endpointid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endpointid(value);
  // @@protoc_insertion_point(field_set:EndpointMappingElement.endpointId)
}

// .DetectPoint from = 4;
inline void EndpointMappingElement::clear_from() {
  from_ = 0;
}
inline ::DetectPoint EndpointMappingElement::_internal_from() const {
  return static_cast< ::DetectPoint >(from_);
}
inline ::DetectPoint EndpointMappingElement::from() const {
  // @@protoc_insertion_point(field_get:EndpointMappingElement.from)
  return _internal_from();
}
inline void EndpointMappingElement::_internal_set_from(::DetectPoint value) {
  
  from_ = value;
}
inline void EndpointMappingElement::set_from(::DetectPoint value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:EndpointMappingElement.from)
}

// -------------------------------------------------------------------

// ServiceAndNetworkAddressMappings

// repeated .ServiceAndNetworkAddressMapping mappings = 1;
inline int ServiceAndNetworkAddressMappings::_internal_mappings_size() const {
  return mappings_.size();
}
inline int ServiceAndNetworkAddressMappings::mappings_size() const {
  return _internal_mappings_size();
}
inline void ServiceAndNetworkAddressMappings::clear_mappings() {
  mappings_.Clear();
}
inline ::ServiceAndNetworkAddressMapping* ServiceAndNetworkAddressMappings::mutable_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:ServiceAndNetworkAddressMappings.mappings)
  return mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceAndNetworkAddressMapping >*
ServiceAndNetworkAddressMappings::mutable_mappings() {
  // @@protoc_insertion_point(field_mutable_list:ServiceAndNetworkAddressMappings.mappings)
  return &mappings_;
}
inline const ::ServiceAndNetworkAddressMapping& ServiceAndNetworkAddressMappings::_internal_mappings(int index) const {
  return mappings_.Get(index);
}
inline const ::ServiceAndNetworkAddressMapping& ServiceAndNetworkAddressMappings::mappings(int index) const {
  // @@protoc_insertion_point(field_get:ServiceAndNetworkAddressMappings.mappings)
  return _internal_mappings(index);
}
inline ::ServiceAndNetworkAddressMapping* ServiceAndNetworkAddressMappings::_internal_add_mappings() {
  return mappings_.Add();
}
inline ::ServiceAndNetworkAddressMapping* ServiceAndNetworkAddressMappings::add_mappings() {
  // @@protoc_insertion_point(field_add:ServiceAndNetworkAddressMappings.mappings)
  return _internal_add_mappings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceAndNetworkAddressMapping >&
ServiceAndNetworkAddressMappings::mappings() const {
  // @@protoc_insertion_point(field_list:ServiceAndNetworkAddressMappings.mappings)
  return mappings_;
}

// -------------------------------------------------------------------

// ServiceAndNetworkAddressMapping

// int32 serviceId = 1;
inline void ServiceAndNetworkAddressMapping::clear_serviceid() {
  serviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceAndNetworkAddressMapping::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceAndNetworkAddressMapping::serviceid() const {
  // @@protoc_insertion_point(field_get:ServiceAndNetworkAddressMapping.serviceId)
  return _internal_serviceid();
}
inline void ServiceAndNetworkAddressMapping::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceid_ = value;
}
inline void ServiceAndNetworkAddressMapping::set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:ServiceAndNetworkAddressMapping.serviceId)
}

// int32 serviceInstanceId = 2;
inline void ServiceAndNetworkAddressMapping::clear_serviceinstanceid() {
  serviceinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceAndNetworkAddressMapping::_internal_serviceinstanceid() const {
  return serviceinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceAndNetworkAddressMapping::serviceinstanceid() const {
  // @@protoc_insertion_point(field_get:ServiceAndNetworkAddressMapping.serviceInstanceId)
  return _internal_serviceinstanceid();
}
inline void ServiceAndNetworkAddressMapping::_internal_set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceinstanceid_ = value;
}
inline void ServiceAndNetworkAddressMapping::set_serviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceinstanceid(value);
  // @@protoc_insertion_point(field_set:ServiceAndNetworkAddressMapping.serviceInstanceId)
}

// string networkAddress = 3;
inline void ServiceAndNetworkAddressMapping::clear_networkaddress() {
  networkaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceAndNetworkAddressMapping::networkaddress() const {
  // @@protoc_insertion_point(field_get:ServiceAndNetworkAddressMapping.networkAddress)
  return _internal_networkaddress();
}
inline void ServiceAndNetworkAddressMapping::set_networkaddress(const std::string& value) {
  _internal_set_networkaddress(value);
  // @@protoc_insertion_point(field_set:ServiceAndNetworkAddressMapping.networkAddress)
}
inline std::string* ServiceAndNetworkAddressMapping::mutable_networkaddress() {
  // @@protoc_insertion_point(field_mutable:ServiceAndNetworkAddressMapping.networkAddress)
  return _internal_mutable_networkaddress();
}
inline const std::string& ServiceAndNetworkAddressMapping::_internal_networkaddress() const {
  return networkaddress_.GetNoArena();
}
inline void ServiceAndNetworkAddressMapping::_internal_set_networkaddress(const std::string& value) {
  
  networkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceAndNetworkAddressMapping::set_networkaddress(std::string&& value) {
  
  networkaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceAndNetworkAddressMapping.networkAddress)
}
inline void ServiceAndNetworkAddressMapping::set_networkaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  networkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceAndNetworkAddressMapping.networkAddress)
}
inline void ServiceAndNetworkAddressMapping::set_networkaddress(const char* value, size_t size) {
  
  networkaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceAndNetworkAddressMapping.networkAddress)
}
inline std::string* ServiceAndNetworkAddressMapping::_internal_mutable_networkaddress() {
  
  return networkaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceAndNetworkAddressMapping::release_networkaddress() {
  // @@protoc_insertion_point(field_release:ServiceAndNetworkAddressMapping.networkAddress)
  
  return networkaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceAndNetworkAddressMapping::set_allocated_networkaddress(std::string* networkaddress) {
  if (networkaddress != nullptr) {
    
  } else {
    
  }
  networkaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networkaddress);
  // @@protoc_insertion_point(field_set_allocated:ServiceAndNetworkAddressMapping.networkAddress)
}

// int32 networkAddressId = 4;
inline void ServiceAndNetworkAddressMapping::clear_networkaddressid() {
  networkaddressid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceAndNetworkAddressMapping::_internal_networkaddressid() const {
  return networkaddressid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceAndNetworkAddressMapping::networkaddressid() const {
  // @@protoc_insertion_point(field_get:ServiceAndNetworkAddressMapping.networkAddressId)
  return _internal_networkaddressid();
}
inline void ServiceAndNetworkAddressMapping::_internal_set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  networkaddressid_ = value;
}
inline void ServiceAndNetworkAddressMapping::set_networkaddressid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_networkaddressid(value);
  // @@protoc_insertion_point(field_set:ServiceAndNetworkAddressMapping.networkAddressId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_register_2fRegister_2eproto
