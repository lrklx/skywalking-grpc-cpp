// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service-mesh-probe/service-mesh.proto
// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto__INCLUDED
#define GRPC_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto__INCLUDED

#include "service-mesh-probe/service-mesh.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class ServiceMeshMetricService final {
 public:
  static constexpr char const* service_full_name() {
    return "ServiceMeshMetricService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::ServiceMeshMetric>> collect(::grpc::ClientContext* context, ::MeshProbeDownstream* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::ServiceMeshMetric>>(collectRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ServiceMeshMetric>> Asynccollect(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ServiceMeshMetric>>(AsynccollectRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ServiceMeshMetric>> PrepareAsynccollect(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ServiceMeshMetric>>(PrepareAsynccollectRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void collect(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::experimental::ClientWriteReactor< ::ServiceMeshMetric>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::ServiceMeshMetric>* collectRaw(::grpc::ClientContext* context, ::MeshProbeDownstream* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ServiceMeshMetric>* AsynccollectRaw(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ServiceMeshMetric>* PrepareAsynccollectRaw(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::ServiceMeshMetric>> collect(::grpc::ClientContext* context, ::MeshProbeDownstream* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::ServiceMeshMetric>>(collectRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ServiceMeshMetric>> Asynccollect(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ServiceMeshMetric>>(AsynccollectRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ServiceMeshMetric>> PrepareAsynccollect(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ServiceMeshMetric>>(PrepareAsynccollectRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void collect(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::experimental::ClientWriteReactor< ::ServiceMeshMetric>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::ServiceMeshMetric>* collectRaw(::grpc::ClientContext* context, ::MeshProbeDownstream* response) override;
    ::grpc::ClientAsyncWriter< ::ServiceMeshMetric>* AsynccollectRaw(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::ServiceMeshMetric>* PrepareAsynccollectRaw(::grpc::ClientContext* context, ::MeshProbeDownstream* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_collect_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status collect(::grpc::ServerContext* context, ::grpc::ServerReader< ::ServiceMeshMetric>* reader, ::MeshProbeDownstream* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_collect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_collect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_collect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status collect(::grpc::ServerContext* context, ::grpc::ServerReader< ::ServiceMeshMetric>* reader, ::MeshProbeDownstream* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcollect(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::MeshProbeDownstream, ::ServiceMeshMetric>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_collect<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_collect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_collect() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::ServiceMeshMetric, ::MeshProbeDownstream>(
          [this] { return this->collect(); }));
    }
    ~ExperimentalWithCallbackMethod_collect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status collect(::grpc::ServerContext* context, ::grpc::ServerReader< ::ServiceMeshMetric>* reader, ::MeshProbeDownstream* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::ServiceMeshMetric, ::MeshProbeDownstream>* collect() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::ServiceMeshMetric, ::MeshProbeDownstream>;}
  };
  typedef ExperimentalWithCallbackMethod_collect<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_collect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_collect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_collect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status collect(::grpc::ServerContext* context, ::grpc::ServerReader< ::ServiceMeshMetric>* reader, ::MeshProbeDownstream* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_collect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_collect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_collect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status collect(::grpc::ServerContext* context, ::grpc::ServerReader< ::ServiceMeshMetric>* reader, ::MeshProbeDownstream* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcollect(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_collect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_collect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->collect(); }));
    }
    ~ExperimentalWithRawCallbackMethod_collect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status collect(::grpc::ServerContext* context, ::grpc::ServerReader< ::ServiceMeshMetric>* reader, ::MeshProbeDownstream* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* collect() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};


#endif  // GRPC_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto__INCLUDED
