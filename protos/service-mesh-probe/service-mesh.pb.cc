// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service-mesh-probe/service-mesh.proto

#include "service-mesh-probe/service-mesh.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class ServiceMeshMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceMeshMetric> _instance;
} _ServiceMeshMetric_default_instance_;
class MeshProbeDownstreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshProbeDownstream> _instance;
} _MeshProbeDownstream_default_instance_;
static void InitDefaultsscc_info_MeshProbeDownstream_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MeshProbeDownstream_default_instance_;
    new (ptr) ::MeshProbeDownstream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MeshProbeDownstream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeshProbeDownstream_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MeshProbeDownstream_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto}, {}};

static void InitDefaultsscc_info_ServiceMeshMetric_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServiceMeshMetric_default_instance_;
    new (ptr) ::ServiceMeshMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceMeshMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceMeshMetric_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceMeshMetric_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, starttime_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, endtime_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, sourceservicename_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, sourceserviceid_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, sourceserviceinstance_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, sourceserviceinstanceid_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, destservicename_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, destserviceid_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, destserviceinstance_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, destserviceinstanceid_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, endpoint_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, latency_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, responsecode_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, status_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, protocol_),
  PROTOBUF_FIELD_OFFSET(::ServiceMeshMetric, detectpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MeshProbeDownstream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ServiceMeshMetric)},
  { 21, -1, sizeof(::MeshProbeDownstream)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServiceMeshMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MeshProbeDownstream_default_instance_),
};

const char descriptor_table_protodef_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%service-mesh-probe/service-mesh.proto\032"
  "\023common/common.proto\"\240\003\n\021ServiceMeshMetr"
  "ic\022\021\n\tstartTime\030\001 \001(\003\022\017\n\007endTime\030\002 \001(\003\022\031"
  "\n\021sourceServiceName\030\003 \001(\t\022\027\n\017sourceServi"
  "ceId\030\004 \001(\005\022\035\n\025sourceServiceInstance\030\005 \001("
  "\t\022\037\n\027sourceServiceInstanceId\030\006 \001(\005\022\027\n\017de"
  "stServiceName\030\007 \001(\t\022\025\n\rdestServiceId\030\010 \001"
  "(\005\022\033\n\023destServiceInstance\030\t \001(\t\022\035\n\025destS"
  "erviceInstanceId\030\n \001(\005\022\020\n\010endpoint\030\013 \001(\t"
  "\022\017\n\007latency\030\014 \001(\005\022\024\n\014responseCode\030\r \001(\005\022"
  "\016\n\006status\030\016 \001(\010\022\033\n\010protocol\030\017 \001(\0162\t.Prot"
  "ocol\022!\n\013detectPoint\030\020 \001(\0162\014.DetectPoint\""
  "\025\n\023MeshProbeDownstream*\036\n\010Protocol\022\010\n\004HT"
  "TP\020\000\022\010\n\004gRPC\020\0012S\n\030ServiceMeshMetricServi"
  "ce\0227\n\007collect\022\022.ServiceMeshMetric\032\024.Mesh"
  "ProbeDownstream\"\000(\001B1\n-org.apache.skywal"
  "king.apm.network.servicemeshP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto_deps[1] = {
  &::descriptor_table_common_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto_sccs[2] = {
  &scc_info_MeshProbeDownstream_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto.base,
  &scc_info_ServiceMeshMetric_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto_once;
static bool descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto = {
  &descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto_initialized, descriptor_table_protodef_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto, "service-mesh-probe/service-mesh.proto", 678,
  &descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto_once, descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto_sccs, descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto::offsets,
  file_level_metadata_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto, 2, file_level_enum_descriptors_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto, file_level_service_descriptors_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto);
  return file_level_enum_descriptors_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto[0];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServiceMeshMetric::InitAsDefaultInstance() {
}
class ServiceMeshMetric::_Internal {
 public:
};

ServiceMeshMetric::ServiceMeshMetric()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServiceMeshMetric)
}
ServiceMeshMetric::ServiceMeshMetric(const ServiceMeshMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourceservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourceservicename().empty()) {
    sourceservicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourceservicename_);
  }
  sourceserviceinstance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourceserviceinstance().empty()) {
    sourceserviceinstance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourceserviceinstance_);
  }
  destservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destservicename().empty()) {
    destservicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destservicename_);
  }
  destserviceinstance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destserviceinstance().empty()) {
    destserviceinstance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destserviceinstance_);
  }
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint().empty()) {
    endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&detectpoint_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(detectpoint_));
  // @@protoc_insertion_point(copy_constructor:ServiceMeshMetric)
}

void ServiceMeshMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceMeshMetric_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto.base);
  sourceservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceserviceinstance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destservicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destserviceinstance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detectpoint_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(detectpoint_));
}

ServiceMeshMetric::~ServiceMeshMetric() {
  // @@protoc_insertion_point(destructor:ServiceMeshMetric)
  SharedDtor();
}

void ServiceMeshMetric::SharedDtor() {
  sourceservicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceserviceinstance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destservicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destserviceinstance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceMeshMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceMeshMetric& ServiceMeshMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceMeshMetric_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto.base);
  return *internal_default_instance();
}


void ServiceMeshMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceMeshMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourceservicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceserviceinstance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destservicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destserviceinstance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detectpoint_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(detectpoint_));
  _internal_metadata_.Clear();
}

const char* ServiceMeshMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 startTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 endTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sourceServiceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_sourceservicename(), ptr, ctx, "ServiceMeshMetric.sourceServiceName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceServiceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sourceserviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sourceServiceInstance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_sourceserviceinstance(), ptr, ctx, "ServiceMeshMetric.sourceServiceInstance");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sourceServiceInstanceId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sourceserviceinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destServiceName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_destservicename(), ptr, ctx, "ServiceMeshMetric.destServiceName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 destServiceId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          destserviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destServiceInstance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_destserviceinstance(), ptr, ctx, "ServiceMeshMetric.destServiceInstance");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 destServiceInstanceId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          destserviceinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpoint = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_endpoint(), ptr, ctx, "ServiceMeshMetric.endpoint");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 latency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 responseCode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          responsecode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol protocol = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::Protocol>(val));
        } else goto handle_unusual;
        continue;
      // .DetectPoint detectPoint = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_detectpoint(static_cast<::DetectPoint>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceMeshMetric::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceMeshMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 startTime = 1;
  if (this->starttime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_starttime(), target);
  }

  // int64 endTime = 2;
  if (this->endtime() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_endtime(), target);
  }

  // string sourceServiceName = 3;
  if (this->sourceservicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceservicename().data(), static_cast<int>(this->_internal_sourceservicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceMeshMetric.sourceServiceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sourceservicename(), target);
  }

  // int32 sourceServiceId = 4;
  if (this->sourceserviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sourceserviceid(), target);
  }

  // string sourceServiceInstance = 5;
  if (this->sourceserviceinstance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceserviceinstance().data(), static_cast<int>(this->_internal_sourceserviceinstance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceMeshMetric.sourceServiceInstance");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sourceserviceinstance(), target);
  }

  // int32 sourceServiceInstanceId = 6;
  if (this->sourceserviceinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sourceserviceinstanceid(), target);
  }

  // string destServiceName = 7;
  if (this->destservicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destservicename().data(), static_cast<int>(this->_internal_destservicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceMeshMetric.destServiceName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_destservicename(), target);
  }

  // int32 destServiceId = 8;
  if (this->destserviceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_destserviceid(), target);
  }

  // string destServiceInstance = 9;
  if (this->destserviceinstance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destserviceinstance().data(), static_cast<int>(this->_internal_destserviceinstance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceMeshMetric.destServiceInstance");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_destserviceinstance(), target);
  }

  // int32 destServiceInstanceId = 10;
  if (this->destserviceinstanceid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_destserviceinstanceid(), target);
  }

  // string endpoint = 11;
  if (this->endpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceMeshMetric.endpoint");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_endpoint(), target);
  }

  // int32 latency = 12;
  if (this->latency() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_latency(), target);
  }

  // int32 responseCode = 13;
  if (this->responsecode() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_responsecode(), target);
  }

  // bool status = 14;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_status(), target);
  }

  // .Protocol protocol = 15;
  if (this->protocol() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_protocol(), target);
  }

  // .DetectPoint detectPoint = 16;
  if (this->detectpoint() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_detectpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceMeshMetric)
  return target;
}

size_t ServiceMeshMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceMeshMetric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourceServiceName = 3;
  if (this->sourceservicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceservicename());
  }

  // string sourceServiceInstance = 5;
  if (this->sourceserviceinstance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceserviceinstance());
  }

  // string destServiceName = 7;
  if (this->destservicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destservicename());
  }

  // string destServiceInstance = 9;
  if (this->destserviceinstance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destserviceinstance());
  }

  // string endpoint = 11;
  if (this->endpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  // int64 startTime = 1;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_starttime());
  }

  // int64 endTime = 2;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_endtime());
  }

  // int32 sourceServiceId = 4;
  if (this->sourceserviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceserviceid());
  }

  // int32 sourceServiceInstanceId = 6;
  if (this->sourceserviceinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceserviceinstanceid());
  }

  // int32 destServiceId = 8;
  if (this->destserviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_destserviceid());
  }

  // int32 destServiceInstanceId = 10;
  if (this->destserviceinstanceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_destserviceinstanceid());
  }

  // int32 latency = 12;
  if (this->latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_latency());
  }

  // int32 responseCode = 13;
  if (this->responsecode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_responsecode());
  }

  // bool status = 14;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol protocol = 15;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // .DetectPoint detectPoint = 16;
  if (this->detectpoint() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_detectpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceMeshMetric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceMeshMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceMeshMetric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceMeshMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceMeshMetric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceMeshMetric)
    MergeFrom(*source);
  }
}

void ServiceMeshMetric::MergeFrom(const ServiceMeshMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceMeshMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourceservicename().size() > 0) {

    sourceservicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourceservicename_);
  }
  if (from.sourceserviceinstance().size() > 0) {

    sourceserviceinstance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourceserviceinstance_);
  }
  if (from.destservicename().size() > 0) {

    destservicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destservicename_);
  }
  if (from.destserviceinstance().size() > 0) {

    destserviceinstance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destserviceinstance_);
  }
  if (from.endpoint().size() > 0) {

    endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.sourceserviceid() != 0) {
    _internal_set_sourceserviceid(from._internal_sourceserviceid());
  }
  if (from.sourceserviceinstanceid() != 0) {
    _internal_set_sourceserviceinstanceid(from._internal_sourceserviceinstanceid());
  }
  if (from.destserviceid() != 0) {
    _internal_set_destserviceid(from._internal_destserviceid());
  }
  if (from.destserviceinstanceid() != 0) {
    _internal_set_destserviceinstanceid(from._internal_destserviceinstanceid());
  }
  if (from.latency() != 0) {
    _internal_set_latency(from._internal_latency());
  }
  if (from.responsecode() != 0) {
    _internal_set_responsecode(from._internal_responsecode());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.detectpoint() != 0) {
    _internal_set_detectpoint(from._internal_detectpoint());
  }
}

void ServiceMeshMetric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceMeshMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMeshMetric::CopyFrom(const ServiceMeshMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceMeshMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMeshMetric::IsInitialized() const {
  return true;
}

void ServiceMeshMetric::InternalSwap(ServiceMeshMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sourceservicename_.Swap(&other->sourceservicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sourceserviceinstance_.Swap(&other->sourceserviceinstance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destservicename_.Swap(&other->destservicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destserviceinstance_.Swap(&other->destserviceinstance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  endpoint_.Swap(&other->endpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(sourceserviceid_, other->sourceserviceid_);
  swap(sourceserviceinstanceid_, other->sourceserviceinstanceid_);
  swap(destserviceid_, other->destserviceid_);
  swap(destserviceinstanceid_, other->destserviceinstanceid_);
  swap(latency_, other->latency_);
  swap(responsecode_, other->responsecode_);
  swap(status_, other->status_);
  swap(protocol_, other->protocol_);
  swap(detectpoint_, other->detectpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceMeshMetric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshProbeDownstream::InitAsDefaultInstance() {
}
class MeshProbeDownstream::_Internal {
 public:
};

MeshProbeDownstream::MeshProbeDownstream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MeshProbeDownstream)
}
MeshProbeDownstream::MeshProbeDownstream(const MeshProbeDownstream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MeshProbeDownstream)
}

void MeshProbeDownstream::SharedCtor() {
}

MeshProbeDownstream::~MeshProbeDownstream() {
  // @@protoc_insertion_point(destructor:MeshProbeDownstream)
  SharedDtor();
}

void MeshProbeDownstream::SharedDtor() {
}

void MeshProbeDownstream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshProbeDownstream& MeshProbeDownstream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshProbeDownstream_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto.base);
  return *internal_default_instance();
}


void MeshProbeDownstream::Clear() {
// @@protoc_insertion_point(message_clear_start:MeshProbeDownstream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MeshProbeDownstream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshProbeDownstream::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MeshProbeDownstream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MeshProbeDownstream)
  return target;
}

size_t MeshProbeDownstream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MeshProbeDownstream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshProbeDownstream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MeshProbeDownstream)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshProbeDownstream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshProbeDownstream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MeshProbeDownstream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MeshProbeDownstream)
    MergeFrom(*source);
  }
}

void MeshProbeDownstream::MergeFrom(const MeshProbeDownstream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MeshProbeDownstream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MeshProbeDownstream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MeshProbeDownstream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshProbeDownstream::CopyFrom(const MeshProbeDownstream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MeshProbeDownstream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshProbeDownstream::IsInitialized() const {
  return true;
}

void MeshProbeDownstream::InternalSwap(MeshProbeDownstream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshProbeDownstream::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServiceMeshMetric* Arena::CreateMaybeMessage< ::ServiceMeshMetric >(Arena* arena) {
  return Arena::CreateInternal< ::ServiceMeshMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::MeshProbeDownstream* Arena::CreateMaybeMessage< ::MeshProbeDownstream >(Arena* arena) {
  return Arena::CreateInternal< ::MeshProbeDownstream >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
