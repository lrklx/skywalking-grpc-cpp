// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service-mesh-probe/service-mesh.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto;
class MeshProbeDownstream;
class MeshProbeDownstreamDefaultTypeInternal;
extern MeshProbeDownstreamDefaultTypeInternal _MeshProbeDownstream_default_instance_;
class ServiceMeshMetric;
class ServiceMeshMetricDefaultTypeInternal;
extern ServiceMeshMetricDefaultTypeInternal _ServiceMeshMetric_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MeshProbeDownstream* Arena::CreateMaybeMessage<::MeshProbeDownstream>(Arena*);
template<> ::ServiceMeshMetric* Arena::CreateMaybeMessage<::ServiceMeshMetric>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Protocol : int {
  HTTP = 0,
  gRPC = 1,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = HTTP;
constexpr Protocol Protocol_MAX = gRPC;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    const std::string& name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
// ===================================================================

class ServiceMeshMetric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceMeshMetric) */ {
 public:
  ServiceMeshMetric();
  virtual ~ServiceMeshMetric();

  ServiceMeshMetric(const ServiceMeshMetric& from);
  ServiceMeshMetric(ServiceMeshMetric&& from) noexcept
    : ServiceMeshMetric() {
    *this = ::std::move(from);
  }

  inline ServiceMeshMetric& operator=(const ServiceMeshMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMeshMetric& operator=(ServiceMeshMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceMeshMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceMeshMetric* internal_default_instance() {
    return reinterpret_cast<const ServiceMeshMetric*>(
               &_ServiceMeshMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceMeshMetric& a, ServiceMeshMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMeshMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceMeshMetric* New() const final {
    return CreateMaybeMessage<ServiceMeshMetric>(nullptr);
  }

  ServiceMeshMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceMeshMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceMeshMetric& from);
  void MergeFrom(const ServiceMeshMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMeshMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceMeshMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto);
    return ::descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceServiceNameFieldNumber = 3,
    kSourceServiceInstanceFieldNumber = 5,
    kDestServiceNameFieldNumber = 7,
    kDestServiceInstanceFieldNumber = 9,
    kEndpointFieldNumber = 11,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kSourceServiceIdFieldNumber = 4,
    kSourceServiceInstanceIdFieldNumber = 6,
    kDestServiceIdFieldNumber = 8,
    kDestServiceInstanceIdFieldNumber = 10,
    kLatencyFieldNumber = 12,
    kResponseCodeFieldNumber = 13,
    kStatusFieldNumber = 14,
    kProtocolFieldNumber = 15,
    kDetectPointFieldNumber = 16,
  };
  // string sourceServiceName = 3;
  void clear_sourceservicename();
  const std::string& sourceservicename() const;
  void set_sourceservicename(const std::string& value);
  void set_sourceservicename(std::string&& value);
  void set_sourceservicename(const char* value);
  void set_sourceservicename(const char* value, size_t size);
  std::string* mutable_sourceservicename();
  std::string* release_sourceservicename();
  void set_allocated_sourceservicename(std::string* sourceservicename);
  private:
  const std::string& _internal_sourceservicename() const;
  void _internal_set_sourceservicename(const std::string& value);
  std::string* _internal_mutable_sourceservicename();
  public:

  // string sourceServiceInstance = 5;
  void clear_sourceserviceinstance();
  const std::string& sourceserviceinstance() const;
  void set_sourceserviceinstance(const std::string& value);
  void set_sourceserviceinstance(std::string&& value);
  void set_sourceserviceinstance(const char* value);
  void set_sourceserviceinstance(const char* value, size_t size);
  std::string* mutable_sourceserviceinstance();
  std::string* release_sourceserviceinstance();
  void set_allocated_sourceserviceinstance(std::string* sourceserviceinstance);
  private:
  const std::string& _internal_sourceserviceinstance() const;
  void _internal_set_sourceserviceinstance(const std::string& value);
  std::string* _internal_mutable_sourceserviceinstance();
  public:

  // string destServiceName = 7;
  void clear_destservicename();
  const std::string& destservicename() const;
  void set_destservicename(const std::string& value);
  void set_destservicename(std::string&& value);
  void set_destservicename(const char* value);
  void set_destservicename(const char* value, size_t size);
  std::string* mutable_destservicename();
  std::string* release_destservicename();
  void set_allocated_destservicename(std::string* destservicename);
  private:
  const std::string& _internal_destservicename() const;
  void _internal_set_destservicename(const std::string& value);
  std::string* _internal_mutable_destservicename();
  public:

  // string destServiceInstance = 9;
  void clear_destserviceinstance();
  const std::string& destserviceinstance() const;
  void set_destserviceinstance(const std::string& value);
  void set_destserviceinstance(std::string&& value);
  void set_destserviceinstance(const char* value);
  void set_destserviceinstance(const char* value, size_t size);
  std::string* mutable_destserviceinstance();
  std::string* release_destserviceinstance();
  void set_allocated_destserviceinstance(std::string* destserviceinstance);
  private:
  const std::string& _internal_destserviceinstance() const;
  void _internal_set_destserviceinstance(const std::string& value);
  std::string* _internal_mutable_destserviceinstance();
  public:

  // string endpoint = 11;
  void clear_endpoint();
  const std::string& endpoint() const;
  void set_endpoint(const std::string& value);
  void set_endpoint(std::string&& value);
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  std::string* mutable_endpoint();
  std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // int64 startTime = 1;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTime = 2;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 sourceServiceId = 4;
  void clear_sourceserviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceserviceid() const;
  void set_sourceserviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceserviceid() const;
  void _internal_set_sourceserviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sourceServiceInstanceId = 6;
  void clear_sourceserviceinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 sourceserviceinstanceid() const;
  void set_sourceserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sourceserviceinstanceid() const;
  void _internal_set_sourceserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 destServiceId = 8;
  void clear_destserviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 destserviceid() const;
  void set_destserviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_destserviceid() const;
  void _internal_set_destserviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 destServiceInstanceId = 10;
  void clear_destserviceinstanceid();
  ::PROTOBUF_NAMESPACE_ID::int32 destserviceinstanceid() const;
  void set_destserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_destserviceinstanceid() const;
  void _internal_set_destserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 latency = 12;
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::int32 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 responseCode = 13;
  void clear_responsecode();
  ::PROTOBUF_NAMESPACE_ID::int32 responsecode() const;
  void set_responsecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_responsecode() const;
  void _internal_set_responsecode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool status = 14;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // .Protocol protocol = 15;
  void clear_protocol();
  ::Protocol protocol() const;
  void set_protocol(::Protocol value);
  private:
  ::Protocol _internal_protocol() const;
  void _internal_set_protocol(::Protocol value);
  public:

  // .DetectPoint detectPoint = 16;
  void clear_detectpoint();
  ::DetectPoint detectpoint() const;
  void set_detectpoint(::DetectPoint value);
  private:
  ::DetectPoint _internal_detectpoint() const;
  void _internal_set_detectpoint(::DetectPoint value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceMeshMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceservicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceserviceinstance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destservicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destserviceinstance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceserviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sourceserviceinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 destserviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 destserviceinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_;
  ::PROTOBUF_NAMESPACE_ID::int32 responsecode_;
  bool status_;
  int protocol_;
  int detectpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto;
};
// -------------------------------------------------------------------

class MeshProbeDownstream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MeshProbeDownstream) */ {
 public:
  MeshProbeDownstream();
  virtual ~MeshProbeDownstream();

  MeshProbeDownstream(const MeshProbeDownstream& from);
  MeshProbeDownstream(MeshProbeDownstream&& from) noexcept
    : MeshProbeDownstream() {
    *this = ::std::move(from);
  }

  inline MeshProbeDownstream& operator=(const MeshProbeDownstream& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshProbeDownstream& operator=(MeshProbeDownstream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshProbeDownstream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshProbeDownstream* internal_default_instance() {
    return reinterpret_cast<const MeshProbeDownstream*>(
               &_MeshProbeDownstream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MeshProbeDownstream& a, MeshProbeDownstream& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshProbeDownstream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshProbeDownstream* New() const final {
    return CreateMaybeMessage<MeshProbeDownstream>(nullptr);
  }

  MeshProbeDownstream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshProbeDownstream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshProbeDownstream& from);
  void MergeFrom(const MeshProbeDownstream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshProbeDownstream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MeshProbeDownstream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto);
    return ::descriptor_table_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MeshProbeDownstream)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceMeshMetric

// int64 startTime = 1;
inline void ServiceMeshMetric::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceMeshMetric::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceMeshMetric::starttime() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.startTime)
  return _internal_starttime();
}
inline void ServiceMeshMetric::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void ServiceMeshMetric::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.startTime)
}

// int64 endTime = 2;
inline void ServiceMeshMetric::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceMeshMetric::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceMeshMetric::endtime() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.endTime)
  return _internal_endtime();
}
inline void ServiceMeshMetric::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endtime_ = value;
}
inline void ServiceMeshMetric::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.endTime)
}

// string sourceServiceName = 3;
inline void ServiceMeshMetric::clear_sourceservicename() {
  sourceservicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceMeshMetric::sourceservicename() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.sourceServiceName)
  return _internal_sourceservicename();
}
inline void ServiceMeshMetric::set_sourceservicename(const std::string& value) {
  _internal_set_sourceservicename(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.sourceServiceName)
}
inline std::string* ServiceMeshMetric::mutable_sourceservicename() {
  // @@protoc_insertion_point(field_mutable:ServiceMeshMetric.sourceServiceName)
  return _internal_mutable_sourceservicename();
}
inline const std::string& ServiceMeshMetric::_internal_sourceservicename() const {
  return sourceservicename_.GetNoArena();
}
inline void ServiceMeshMetric::_internal_set_sourceservicename(const std::string& value) {
  
  sourceservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceMeshMetric::set_sourceservicename(std::string&& value) {
  
  sourceservicename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceMeshMetric.sourceServiceName)
}
inline void ServiceMeshMetric::set_sourceservicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourceservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceMeshMetric.sourceServiceName)
}
inline void ServiceMeshMetric::set_sourceservicename(const char* value, size_t size) {
  
  sourceservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceMeshMetric.sourceServiceName)
}
inline std::string* ServiceMeshMetric::_internal_mutable_sourceservicename() {
  
  return sourceservicename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceMeshMetric::release_sourceservicename() {
  // @@protoc_insertion_point(field_release:ServiceMeshMetric.sourceServiceName)
  
  return sourceservicename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceMeshMetric::set_allocated_sourceservicename(std::string* sourceservicename) {
  if (sourceservicename != nullptr) {
    
  } else {
    
  }
  sourceservicename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceservicename);
  // @@protoc_insertion_point(field_set_allocated:ServiceMeshMetric.sourceServiceName)
}

// int32 sourceServiceId = 4;
inline void ServiceMeshMetric::clear_sourceserviceid() {
  sourceserviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::_internal_sourceserviceid() const {
  return sourceserviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::sourceserviceid() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.sourceServiceId)
  return _internal_sourceserviceid();
}
inline void ServiceMeshMetric::_internal_set_sourceserviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceserviceid_ = value;
}
inline void ServiceMeshMetric::set_sourceserviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceserviceid(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.sourceServiceId)
}

// string sourceServiceInstance = 5;
inline void ServiceMeshMetric::clear_sourceserviceinstance() {
  sourceserviceinstance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceMeshMetric::sourceserviceinstance() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.sourceServiceInstance)
  return _internal_sourceserviceinstance();
}
inline void ServiceMeshMetric::set_sourceserviceinstance(const std::string& value) {
  _internal_set_sourceserviceinstance(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.sourceServiceInstance)
}
inline std::string* ServiceMeshMetric::mutable_sourceserviceinstance() {
  // @@protoc_insertion_point(field_mutable:ServiceMeshMetric.sourceServiceInstance)
  return _internal_mutable_sourceserviceinstance();
}
inline const std::string& ServiceMeshMetric::_internal_sourceserviceinstance() const {
  return sourceserviceinstance_.GetNoArena();
}
inline void ServiceMeshMetric::_internal_set_sourceserviceinstance(const std::string& value) {
  
  sourceserviceinstance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceMeshMetric::set_sourceserviceinstance(std::string&& value) {
  
  sourceserviceinstance_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceMeshMetric.sourceServiceInstance)
}
inline void ServiceMeshMetric::set_sourceserviceinstance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourceserviceinstance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceMeshMetric.sourceServiceInstance)
}
inline void ServiceMeshMetric::set_sourceserviceinstance(const char* value, size_t size) {
  
  sourceserviceinstance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceMeshMetric.sourceServiceInstance)
}
inline std::string* ServiceMeshMetric::_internal_mutable_sourceserviceinstance() {
  
  return sourceserviceinstance_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceMeshMetric::release_sourceserviceinstance() {
  // @@protoc_insertion_point(field_release:ServiceMeshMetric.sourceServiceInstance)
  
  return sourceserviceinstance_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceMeshMetric::set_allocated_sourceserviceinstance(std::string* sourceserviceinstance) {
  if (sourceserviceinstance != nullptr) {
    
  } else {
    
  }
  sourceserviceinstance_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceserviceinstance);
  // @@protoc_insertion_point(field_set_allocated:ServiceMeshMetric.sourceServiceInstance)
}

// int32 sourceServiceInstanceId = 6;
inline void ServiceMeshMetric::clear_sourceserviceinstanceid() {
  sourceserviceinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::_internal_sourceserviceinstanceid() const {
  return sourceserviceinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::sourceserviceinstanceid() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.sourceServiceInstanceId)
  return _internal_sourceserviceinstanceid();
}
inline void ServiceMeshMetric::_internal_set_sourceserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sourceserviceinstanceid_ = value;
}
inline void ServiceMeshMetric::set_sourceserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sourceserviceinstanceid(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.sourceServiceInstanceId)
}

// string destServiceName = 7;
inline void ServiceMeshMetric::clear_destservicename() {
  destservicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceMeshMetric::destservicename() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.destServiceName)
  return _internal_destservicename();
}
inline void ServiceMeshMetric::set_destservicename(const std::string& value) {
  _internal_set_destservicename(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.destServiceName)
}
inline std::string* ServiceMeshMetric::mutable_destservicename() {
  // @@protoc_insertion_point(field_mutable:ServiceMeshMetric.destServiceName)
  return _internal_mutable_destservicename();
}
inline const std::string& ServiceMeshMetric::_internal_destservicename() const {
  return destservicename_.GetNoArena();
}
inline void ServiceMeshMetric::_internal_set_destservicename(const std::string& value) {
  
  destservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceMeshMetric::set_destservicename(std::string&& value) {
  
  destservicename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceMeshMetric.destServiceName)
}
inline void ServiceMeshMetric::set_destservicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceMeshMetric.destServiceName)
}
inline void ServiceMeshMetric::set_destservicename(const char* value, size_t size) {
  
  destservicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceMeshMetric.destServiceName)
}
inline std::string* ServiceMeshMetric::_internal_mutable_destservicename() {
  
  return destservicename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceMeshMetric::release_destservicename() {
  // @@protoc_insertion_point(field_release:ServiceMeshMetric.destServiceName)
  
  return destservicename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceMeshMetric::set_allocated_destservicename(std::string* destservicename) {
  if (destservicename != nullptr) {
    
  } else {
    
  }
  destservicename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destservicename);
  // @@protoc_insertion_point(field_set_allocated:ServiceMeshMetric.destServiceName)
}

// int32 destServiceId = 8;
inline void ServiceMeshMetric::clear_destserviceid() {
  destserviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::_internal_destserviceid() const {
  return destserviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::destserviceid() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.destServiceId)
  return _internal_destserviceid();
}
inline void ServiceMeshMetric::_internal_set_destserviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  destserviceid_ = value;
}
inline void ServiceMeshMetric::set_destserviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_destserviceid(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.destServiceId)
}

// string destServiceInstance = 9;
inline void ServiceMeshMetric::clear_destserviceinstance() {
  destserviceinstance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceMeshMetric::destserviceinstance() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.destServiceInstance)
  return _internal_destserviceinstance();
}
inline void ServiceMeshMetric::set_destserviceinstance(const std::string& value) {
  _internal_set_destserviceinstance(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.destServiceInstance)
}
inline std::string* ServiceMeshMetric::mutable_destserviceinstance() {
  // @@protoc_insertion_point(field_mutable:ServiceMeshMetric.destServiceInstance)
  return _internal_mutable_destserviceinstance();
}
inline const std::string& ServiceMeshMetric::_internal_destserviceinstance() const {
  return destserviceinstance_.GetNoArena();
}
inline void ServiceMeshMetric::_internal_set_destserviceinstance(const std::string& value) {
  
  destserviceinstance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceMeshMetric::set_destserviceinstance(std::string&& value) {
  
  destserviceinstance_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceMeshMetric.destServiceInstance)
}
inline void ServiceMeshMetric::set_destserviceinstance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destserviceinstance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceMeshMetric.destServiceInstance)
}
inline void ServiceMeshMetric::set_destserviceinstance(const char* value, size_t size) {
  
  destserviceinstance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceMeshMetric.destServiceInstance)
}
inline std::string* ServiceMeshMetric::_internal_mutable_destserviceinstance() {
  
  return destserviceinstance_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceMeshMetric::release_destserviceinstance() {
  // @@protoc_insertion_point(field_release:ServiceMeshMetric.destServiceInstance)
  
  return destserviceinstance_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceMeshMetric::set_allocated_destserviceinstance(std::string* destserviceinstance) {
  if (destserviceinstance != nullptr) {
    
  } else {
    
  }
  destserviceinstance_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destserviceinstance);
  // @@protoc_insertion_point(field_set_allocated:ServiceMeshMetric.destServiceInstance)
}

// int32 destServiceInstanceId = 10;
inline void ServiceMeshMetric::clear_destserviceinstanceid() {
  destserviceinstanceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::_internal_destserviceinstanceid() const {
  return destserviceinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::destserviceinstanceid() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.destServiceInstanceId)
  return _internal_destserviceinstanceid();
}
inline void ServiceMeshMetric::_internal_set_destserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  destserviceinstanceid_ = value;
}
inline void ServiceMeshMetric::set_destserviceinstanceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_destserviceinstanceid(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.destServiceInstanceId)
}

// string endpoint = 11;
inline void ServiceMeshMetric::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceMeshMetric::endpoint() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.endpoint)
  return _internal_endpoint();
}
inline void ServiceMeshMetric::set_endpoint(const std::string& value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.endpoint)
}
inline std::string* ServiceMeshMetric::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:ServiceMeshMetric.endpoint)
  return _internal_mutable_endpoint();
}
inline const std::string& ServiceMeshMetric::_internal_endpoint() const {
  return endpoint_.GetNoArena();
}
inline void ServiceMeshMetric::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceMeshMetric::set_endpoint(std::string&& value) {
  
  endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceMeshMetric.endpoint)
}
inline void ServiceMeshMetric::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceMeshMetric.endpoint)
}
inline void ServiceMeshMetric::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceMeshMetric.endpoint)
}
inline std::string* ServiceMeshMetric::_internal_mutable_endpoint() {
  
  return endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceMeshMetric::release_endpoint() {
  // @@protoc_insertion_point(field_release:ServiceMeshMetric.endpoint)
  
  return endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceMeshMetric::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:ServiceMeshMetric.endpoint)
}

// int32 latency = 12;
inline void ServiceMeshMetric::clear_latency() {
  latency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::latency() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.latency)
  return _internal_latency();
}
inline void ServiceMeshMetric::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  latency_ = value;
}
inline void ServiceMeshMetric::set_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.latency)
}

// int32 responseCode = 13;
inline void ServiceMeshMetric::clear_responsecode() {
  responsecode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::_internal_responsecode() const {
  return responsecode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceMeshMetric::responsecode() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.responseCode)
  return _internal_responsecode();
}
inline void ServiceMeshMetric::_internal_set_responsecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  responsecode_ = value;
}
inline void ServiceMeshMetric::set_responsecode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_responsecode(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.responseCode)
}

// bool status = 14;
inline void ServiceMeshMetric::clear_status() {
  status_ = false;
}
inline bool ServiceMeshMetric::_internal_status() const {
  return status_;
}
inline bool ServiceMeshMetric::status() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.status)
  return _internal_status();
}
inline void ServiceMeshMetric::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ServiceMeshMetric::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.status)
}

// .Protocol protocol = 15;
inline void ServiceMeshMetric::clear_protocol() {
  protocol_ = 0;
}
inline ::Protocol ServiceMeshMetric::_internal_protocol() const {
  return static_cast< ::Protocol >(protocol_);
}
inline ::Protocol ServiceMeshMetric::protocol() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.protocol)
  return _internal_protocol();
}
inline void ServiceMeshMetric::_internal_set_protocol(::Protocol value) {
  
  protocol_ = value;
}
inline void ServiceMeshMetric::set_protocol(::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.protocol)
}

// .DetectPoint detectPoint = 16;
inline void ServiceMeshMetric::clear_detectpoint() {
  detectpoint_ = 0;
}
inline ::DetectPoint ServiceMeshMetric::_internal_detectpoint() const {
  return static_cast< ::DetectPoint >(detectpoint_);
}
inline ::DetectPoint ServiceMeshMetric::detectpoint() const {
  // @@protoc_insertion_point(field_get:ServiceMeshMetric.detectPoint)
  return _internal_detectpoint();
}
inline void ServiceMeshMetric::_internal_set_detectpoint(::DetectPoint value) {
  
  detectpoint_ = value;
}
inline void ServiceMeshMetric::set_detectpoint(::DetectPoint value) {
  _internal_set_detectpoint(value);
  // @@protoc_insertion_point(field_set:ServiceMeshMetric.detectPoint)
}

// -------------------------------------------------------------------

// MeshProbeDownstream

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol>() {
  return ::Protocol_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2dmesh_2dprobe_2fservice_2dmesh_2eproto
